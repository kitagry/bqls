// Code generated by gen_builtin_function.go, DO NOT EDIT.
package function

var BuiltInFunctions = []BuiltInFunction{
	{
		Name:        "ANY_VALUE",
		Method:      "ANY_VALUE(\n  expression\n  [ HAVING { MAX | MIN } expression2 ]\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns `expression` for some row chosen from the group. Which row is chosen is\nnondeterministic, not random. Returns `NULL` when the input produces no\nrows. Returns `NULL` when `expression`\nor `expression2` is\n`NULL` for all rows in the group.`ANY_VALUE` behaves as if `IGNORE NULLS` is specified;\nrows for which `expression` is `NULL` aren't considered and won't be\nselected.If the `HAVING` clause is included in the `ANY_VALUE` function, the\n`OVER` clause can't be used with this function.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT ANY_VALUE(fruit) as any_value\nFROM UNNEST([\"apple\", \"banana\", \"pear\"]) as fruit;\n\n/*-----------*\n | any_value |\n +-----------+\n | apple     |\n *-----------*/",
			"SELECT\n  fruit,\n  ANY_VALUE(fruit) OVER (ORDER BY LENGTH(fruit) ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS any_value\nFROM UNNEST([\"apple\", \"banana\", \"pear\"]) as fruit;\n\n/*--------+-----------*\n | fruit  | any_value |\n +--------+-----------+\n | pear   | pear      |\n | apple  | pear      |\n | banana | apple     |\n *--------+-----------*/",
			"WITH\n  Store AS (\n    SELECT 20 AS sold, \"apples\" AS fruit\n    UNION ALL\n    SELECT 30 AS sold, \"pears\" AS fruit\n    UNION ALL\n    SELECT 30 AS sold, \"bananas\" AS fruit\n    UNION ALL\n    SELECT 10 AS sold, \"oranges\" AS fruit\n  )\nSELECT ANY_VALUE(fruit HAVING MAX sold) AS a_highest_selling_fruit FROM Store;\n\n/*-------------------------*\n | a_highest_selling_fruit |\n +-------------------------+\n | pears                   |\n *-------------------------*/",
			"WITH\n  Store AS (\n    SELECT 20 AS sold, \"apples\" AS fruit\n    UNION ALL\n    SELECT 30 AS sold, \"pears\" AS fruit\n    UNION ALL\n    SELECT 30 AS sold, \"bananas\" AS fruit\n    UNION ALL\n    SELECT 10 AS sold, \"oranges\" AS fruit\n  )\nSELECT ANY_VALUE(fruit HAVING MIN sold) AS a_lowest_selling_fruit FROM Store;\n\n/*-------------------------*\n | a_lowest_selling_fruit  |\n +-------------------------+\n | oranges                 |\n *-------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#any_value",
	},
	{
		Name:        "ARRAY_AGG",
		Method:      "ARRAY_AGG(\n  [ DISTINCT ]\n  expression\n  [ { IGNORE | RESPECT } NULLS ]\n  [ ORDER BY key [ { ASC | DESC } ] [, ... ] ]\n  [ LIMIT n ]\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns an ARRAY of `expression` values.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).If this function is used with the `OVER` clause, it's part of a\nwindow function call. In a window function call,\naggregate function clauses can't be used.\nTo learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).An error is raised if an array in the final query result contains a `NULL`\nelement.",
		ExampleSQLs: []string{
			"SELECT ARRAY_AGG(x) AS array_agg FROM UNNEST([2, 1,-2, 3, -2, 1, 2]) AS x;\n\n/*-------------------------*\n | array_agg               |\n +-------------------------+\n | [2, 1, -2, 3, -2, 1, 2] |\n *-------------------------*/",
			"SELECT ARRAY_AGG(DISTINCT x) AS array_agg\nFROM UNNEST([2, 1, -2, 3, -2, 1, 2]) AS x;\n\n/*---------------*\n | array_agg     |\n +---------------+\n | [2, 1, -2, 3] |\n *---------------*/",
			"SELECT ARRAY_AGG(x IGNORE NULLS) AS array_agg\nFROM UNNEST([NULL, 1, -2, 3, -2, 1, NULL]) AS x;\n\n/*-------------------*\n | array_agg         |\n +-------------------+\n | [1, -2, 3, -2, 1] |\n *-------------------*/",
			"SELECT ARRAY_AGG(x ORDER BY ABS(x)) AS array_agg\nFROM UNNEST([2, 1, -2, 3, -2, 1, 2]) AS x;\n\n/*-------------------------*\n | array_agg               |\n +-------------------------+\n | [1, 1, 2, -2, -2, 2, 3] |\n *-------------------------*/",
			"SELECT ARRAY_AGG(x LIMIT 5) AS array_agg\nFROM UNNEST([2, 1, -2, 3, -2, 1, 2]) AS x;\n\n/*-------------------*\n | array_agg         |\n +-------------------+\n | [2, 1, -2, 3, -2] |\n *-------------------*/",
			"WITH vals AS\n  (\n    SELECT 1 x UNION ALL\n    SELECT -2 x UNION ALL\n    SELECT 3 x UNION ALL\n    SELECT -2 x UNION ALL\n    SELECT 1 x\n  )\nSELECT ARRAY_AGG(DISTINCT x ORDER BY x) as array_agg\nFROM vals;\n\n/*------------*\n | array_agg  |\n +------------+\n | [-2, 1, 3] |\n *------------*/",
			"WITH vals AS\n  (\n    SELECT 1 x, 'a' y UNION ALL\n    SELECT 1 x, 'b' y UNION ALL\n    SELECT 2 x, 'a' y UNION ALL\n    SELECT 2 x, 'c' y\n  )\nSELECT x, ARRAY_AGG(y) as array_agg\nFROM vals\nGROUP BY x;\n\n/*---------------*\n | x | array_agg |\n +---------------+\n | 1 | [a, b]    |\n | 2 | [a, c]    |\n *---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#array_agg",
	},
	{
		Name:        "ARRAY_CONCAT_AGG",
		Method:      "ARRAY_CONCAT_AGG(\n  expression\n  [ ORDER BY key [ { ASC | DESC } ] [, ... ] ]\n  [ LIMIT n ]\n)",
		Description: "Concatenates elements from `expression` of type `ARRAY`, returning a single\narray as a result.This function ignores `NULL` input arrays, but respects the `NULL` elements in\nnon- `NULL` input arrays. An\nerror is raised, however, if an array in the final query result contains a\n`NULL` element. Returns `NULL` if there are zero input rows or\n`expression` evaluates to `NULL` for all rows.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).",
		ExampleSQLs: []string{
			"SELECT FORMAT(\"%T\", ARRAY_CONCAT_AGG(x)) AS array_concat_agg FROM (\n  SELECT [NULL, 1, 2, 3, 4] AS x\n  UNION ALL SELECT NULL\n  UNION ALL SELECT [5, 6]\n  UNION ALL SELECT [7, 8, 9]\n);\n\n/*-----------------------------------*\n | array_concat_agg                  |\n +-----------------------------------+\n | [NULL, 1, 2, 3, 4, 5, 6, 7, 8, 9] |\n *-----------------------------------*/",
			"SELECT FORMAT(\"%T\", ARRAY_CONCAT_AGG(x ORDER BY ARRAY_LENGTH(x))) AS array_concat_agg FROM (\n  SELECT [1, 2, 3, 4] AS x\n  UNION ALL SELECT [5, 6]\n  UNION ALL SELECT [7, 8, 9]\n);\n\n/*-----------------------------------*\n | array_concat_agg                  |\n +-----------------------------------+\n | [5, 6, 7, 8, 9, 1, 2, 3, 4]       |\n *-----------------------------------*/",
			"SELECT FORMAT(\"%T\", ARRAY_CONCAT_AGG(x LIMIT 2)) AS array_concat_agg FROM (\n  SELECT [1, 2, 3, 4] AS x\n  UNION ALL SELECT [5, 6]\n  UNION ALL SELECT [7, 8, 9]\n);\n\n/*--------------------------*\n | array_concat_agg         |\n +--------------------------+\n | [1, 2, 3, 4, 5, 6]       |\n *--------------------------*/",
			"SELECT FORMAT(\"%T\", ARRAY_CONCAT_AGG(x ORDER BY ARRAY_LENGTH(x) LIMIT 2)) AS array_concat_agg FROM (\n  SELECT [1, 2, 3, 4] AS x\n  UNION ALL SELECT [5, 6]\n  UNION ALL SELECT [7, 8, 9]\n);\n\n/*------------------*\n | array_concat_agg |\n +------------------+\n | [5, 6, 7, 8, 9]  |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#array_concat_agg",
	},
	{
		Name:        "AVG",
		Method:      "AVG(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the average of non- `NULL` values in an aggregated group.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).This function can be used with the\n[`AGGREGATION_THRESHOLD` clause](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause).If this function is used with the `OVER` clause, it's part of a\nwindow function call. In a window function call,\naggregate function clauses can't be used.\nTo learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).`AVG` can be used with differential privacy. For more information, see\n[Differentially private aggregate functions](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-dp-functions).Caveats:If the aggregated group is empty or the argument is `NULL` for all rows in\nthe group, returns `NULL`.\nIf the argument is `NaN` for any row in the group, returns `NaN`.\nIf the argument is `[+|-]Infinity` for any row in the group, returns either\n`[+|-]Infinity` or `NaN`.\nIf there is numeric overflow, produces an error.\nIf a [floating-point type](/bigquery/docs/reference/standard-sql/data-types#floating_point_types) is returned, the result is\n[non-deterministic](/bigquery/docs/reference/standard-sql/data-types#floating_point_semantics), which means you might receive a\ndifferent result each time you use this function.",
		ExampleSQLs: []string{
			"SELECT AVG(x) as avg\nFROM UNNEST([0, 2, 4, 4, 5]) as x;\n\n/*-----*\n | avg |\n +-----+\n | 3   |\n *-----*/",
			"SELECT AVG(DISTINCT x) AS avg\nFROM UNNEST([0, 2, 4, 4, 5]) AS x;\n\n/*------*\n | avg  |\n +------+\n | 2.75 |\n *------*/",
			"SELECT\n  x,\n  AVG(x) OVER (ORDER BY x ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS avg\nFROM UNNEST([0, 2, NULL, 4, 4, 5]) AS x;\n\n/*------+------*\n | x    | avg  |\n +------+------+\n | NULL | NULL |\n | 0    | 0    |\n | 2    | 1    |\n | 4    | 3    |\n | 4    | 4    |\n | 5    | 4.5  |\n *------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#avg",
	},
	{
		Name:        "BIT_AND",
		Method:      "BIT_AND(\n  expression\n)",
		Description: "Performs a bitwise AND operation on `expression` and returns the result.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).",
		ExampleSQLs: []string{
			"SELECT BIT_AND(x) as bit_and FROM UNNEST([0xF001, 0x00A1]) as x;\n\n/*---------*\n | bit_and |\n +---------+\n | 1       |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#bit_and",
	},
	{
		Name:        "BIT_OR",
		Method:      "BIT_OR(\n  expression\n)",
		Description: "Performs a bitwise OR operation on `expression` and returns the result.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).",
		ExampleSQLs: []string{
			"SELECT BIT_OR(x) as bit_or FROM UNNEST([0xF001, 0x00A1]) as x;\n\n/*--------*\n | bit_or |\n +--------+\n | 61601  |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#bit_or",
	},
	{
		Name:        "BIT_XOR",
		Method:      "BIT_XOR(\n  [ DISTINCT ]\n  expression\n)",
		Description: "Performs a bitwise XOR operation on `expression` and returns the result.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).",
		ExampleSQLs: []string{
			"SELECT BIT_XOR(x) AS bit_xor FROM UNNEST([5678, 1234]) AS x;\n\n/*---------*\n | bit_xor |\n +---------+\n | 4860    |\n *---------*/",
			"SELECT BIT_XOR(x) AS bit_xor FROM UNNEST([1234, 5678, 1234]) AS x;\n\n/*---------*\n | bit_xor |\n +---------+\n | 5678    |\n *---------*/",
			"SELECT BIT_XOR(DISTINCT x) AS bit_xor FROM UNNEST([1234, 5678, 1234]) AS x;\n\n/*---------*\n | bit_xor |\n +---------+\n | 4860    |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#bit_xor",
	},
	{
		Name:        "COUNT",
		Method:      "COUNT(*)\n[ OVER over_clause ]",
		Description: "Gets the number of rows in the input or the number of rows with an\nexpression evaluated to any value other than `NULL`.",
		ExampleSQLs: []string{
			"SELECT\n  COUNT(*) AS count_star,\n  COUNT(DISTINCT x) AS count_dist_x\nFROM UNNEST([1, 4, 4, 5]) AS x;\n\n/*------------+--------------*\n | count_star | count_dist_x |\n +------------+--------------+\n | 4          | 3            |\n *------------+--------------*/",
			"SELECT\n  x,\n  COUNT(*) OVER (PARTITION BY MOD(x, 3)) AS count_star,\n  COUNT(DISTINCT x) OVER (PARTITION BY MOD(x, 3)) AS count_dist_x\nFROM UNNEST([1, 4, 4, 5]) AS x;\n\n/*------+------------+--------------*\n | x    | count_star | count_dist_x |\n +------+------------+--------------+\n | 1    | 3          | 2            |\n | 4    | 3          | 2            |\n | 4    | 3          | 2            |\n | 5    | 1          | 1            |\n *------+------------+--------------*/",
			"SELECT\n  x,\n  COUNT(*) OVER (PARTITION BY MOD(x, 3)) AS count_star,\n  COUNT(x) OVER (PARTITION BY MOD(x, 3)) AS count_x\nFROM UNNEST([1, 4, NULL, 4, 5]) AS x;\n\n/*------+------------+---------*\n | x    | count_star | count_x |\n +------+------------+---------+\n | NULL | 1          | 0       |\n | 1    | 3          | 3       |\n | 4    | 3          | 3       |\n | 4    | 3          | 3       |\n | 5    | 1          | 1       |\n *------+------------+---------*/",
			"SELECT COUNT(DISTINCT IF(x > 0, x, NULL)) AS distinct_positive\nFROM UNNEST([1, -2, 4, 1, -5, 4, 1, 3, -6, 1]) AS x;\n\n/*-------------------*\n | distinct_positive |\n +-------------------+\n | 3                 |\n *-------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#count",
	},
	{
		Name:        "COUNTIF",
		Method:      "COUNTIF(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Gets the number of `TRUE` values for an expression.",
		ExampleSQLs: []string{
			"SELECT COUNTIF(x<0) AS num_negative, COUNTIF(x>0) AS num_positive\nFROM UNNEST([5, -2, 3, 6, -10, -7, 4, 0]) AS x;\n\n/*--------------+--------------*\n | num_negative | num_positive |\n +--------------+--------------+\n | 3            | 4            |\n *--------------+--------------*/",
			"SELECT\n  x,\n  COUNTIF(x<0) OVER (ORDER BY ABS(x) ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS num_negative\nFROM UNNEST([5, -2, 3, 6, -10, NULL, -7, 4, 0]) AS x;\n\n/*------+--------------*\n | x    | num_negative |\n +------+--------------+\n | NULL | 0            |\n | 0    | 1            |\n | -2   | 1            |\n | 3    | 1            |\n | 4    | 0            |\n | 5    | 0            |\n | 6    | 1            |\n | -7   | 2            |\n | -10  | 2            |\n *------+--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#countif",
	},
	{
		Name:        "GROUPING",
		Method:      "GROUPING(groupable_value)",
		Description: "If a groupable item in the [`GROUP BY` clause](/bigquery/docs/reference/standard-sql/query-syntax#group_by_clause) is aggregated\n(and thus not grouped), this function returns `1`. Otherwise,\nthis function returns `0`.Definitions:`groupable_value`: An expression that represents a value that can be grouped\nin the `GROUP BY` clause.Details:The `GROUPING` function is helpful if you need to determine which rows are\nproduced by which grouping sets. A grouping set is a group of columns by which\nrows can be grouped together. So, if you need to filter rows by\na few specific grouping sets, you can use the `GROUPING` function to identify\nwhich grouping sets grouped which rows by creating a matrix of the results.In addition, you can use the `GROUPING` function to determine the type of\n`NULL` produced by the `GROUP BY` clause. In some cases, the `GROUP BY` clause\nproduces a `NULL` placeholder. This placeholder represents all groupable items\nthat are aggregated (not grouped) in the current grouping set. This is different\nfrom a standard `NULL`, which can also be produced by a query.For more information, see the following examples.",
		ExampleSQLs: []string{
			"WITH\n  Products AS (\n    SELECT 'shirt' AS product_type, 't-shirt' AS product_name, 3 AS product_count UNION ALL\n    SELECT 'shirt', 't-shirt', 8 UNION ALL\n    SELECT 'shirt', 'polo', 25 UNION ALL\n    SELECT 'pants', 'jeans', 6\n  )\nSELECT\n  product_type,\n  product_name,\n  SUM(product_count) AS product_sum,\n  GROUPING(product_type) AS product_type_agg,\n  GROUPING(product_name) AS product_name_agg,\nFROM Products\nGROUP BY GROUPING SETS(product_type, product_name, ())\nORDER BY product_name;\n\n/*--------------+--------------+-------------+------------------+------------------+\n | product_type | product_name | product_sum | product_type_agg | product_name_agg |\n +--------------+--------------+-------------+------------------+------------------+\n | NULL         | NULL         | 42          | 1                | 1                |\n | shirt        | NULL         | 36          | 0                | 1                |\n | pants        | NULL         | 6           | 0                | 1                |\n | NULL         | jeans        | 6           | 1                | 0                |\n | NULL         | polo         | 25          | 1                | 0                |\n | NULL         | t-shirt      | 11          | 1                | 0                |\n +--------------+--------------+-------------+------------------+------------------*/",
			"WITH\n  Products AS (\n    SELECT 'shirt' AS product_type, 't-shirt' AS product_name, 3 AS product_count UNION ALL\n    SELECT 'shirt', 't-shirt', 8 UNION ALL\n    SELECT NULL, 'polo', 25 UNION ALL\n    SELECT 'pants', 'jeans', 6\n  )\nSELECT\n  product_type,\n  product_name,\n  SUM(product_count) AS product_sum,\n  GROUPING(product_type) AS product_type_is_aggregated\nFROM Products\nGROUP BY GROUPING SETS(product_type, product_name)\nORDER BY product_name;\n\n/*--------------+--------------+-------------+----------------------------+\n | product_type | product_name | product_sum | product_type_is_aggregated |\n +--------------+--------------+-------------+----------------------------+\n | shirt        | NULL         | 11          | 0                          |\n | NULL         | NULL         | 25          | 0                          |\n | pants        | NULL         | 6           | 0                          |\n | NULL         | jeans        | 6           | 1                          |\n | NULL         | polo         | 25          | 1                          |\n | NULL         | t-shirt      | 11          | 1                          |\n +--------------+--------------+-------------+----------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#grouping",
	},
	{
		Name:        "LOGICAL_AND",
		Method:      "LOGICAL_AND(\n  expression\n)",
		Description: "Returns the logical AND of all non- `NULL` expressions. Returns `NULL` if there\nare zero input rows or `expression` evaluates to `NULL` for all rows.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).This function can be used with the\n[`AGGREGATION_THRESHOLD` clause](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause).",
		ExampleSQLs: []string{
			"SELECT LOGICAL_AND(x < 3) AS logical_and FROM UNNEST([1, 2, 4]) AS x;\n\n/*-------------*\n | logical_and |\n +-------------+\n | FALSE       |\n *-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#logical_and",
	},
	{
		Name:        "LOGICAL_OR",
		Method:      "LOGICAL_OR(\n  expression\n)",
		Description: "Returns the logical OR of all non- `NULL` expressions. Returns `NULL` if there\nare zero input rows or `expression` evaluates to `NULL` for all rows.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).This function can be used with the\n[`AGGREGATION_THRESHOLD` clause](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause).",
		ExampleSQLs: []string{
			"SELECT LOGICAL_OR(x < 3) AS logical_or FROM UNNEST([1, 2, 4]) AS x;\n\n/*------------*\n | logical_or |\n +------------+\n | TRUE       |\n *------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#logical_or",
	},
	{
		Name:        "MAX",
		Method:      "MAX(\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the maximum non- `NULL` value in an aggregated group.Caveats:If the aggregated group is empty or the argument is `NULL` for all rows in\nthe group, returns `NULL`.\nIf the argument is `NaN` for any row in the group, returns `NaN`.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).This function supports specifying [collation](/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{
			"SELECT MAX(x) AS max\nFROM UNNEST([8, 37, 55, 4]) AS x;\n\n/*-----*\n | max |\n +-----+\n | 55  |\n *-----*/",
			"SELECT x, MAX(x) OVER (PARTITION BY MOD(x, 2)) AS max\nFROM UNNEST([8, NULL, 37, 55, NULL, 4]) AS x;\n\n/*------+------*\n | x    | max  |\n +------+------+\n | NULL | NULL |\n | NULL | NULL |\n | 8    | 8    |\n | 4    | 8    |\n | 37   | 55   |\n | 55   | 55   |\n *------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#max",
	},
	{
		Name:        "MAX_BY",
		Method:      "MAX_BY(\n  x, y\n)",
		Description: "Synonym for [`ANY_VALUE(x HAVING MAX y)`](#any_value).",
		ExampleSQLs: []string{
			"WITH fruits AS (\n  SELECT \"apple\"  fruit, 3.55 price UNION ALL\n  SELECT \"banana\"  fruit, 2.10 price UNION ALL\n  SELECT \"pear\"  fruit, 4.30 price\n)\nSELECT MAX_BY(fruit, price) as fruit\nFROM fruits;\n\n/*-------*\n | fruit |\n +-------+\n | pear  |\n *-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#max_by",
	},
	{
		Name:        "MIN",
		Method:      "MIN(\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the minimum non- `NULL` value in an aggregated group.Caveats:If the aggregated group is empty or the argument is `NULL` for all rows in\nthe group, returns `NULL`.\nIf the argument is `NaN` for any row in the group, returns `NaN`.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).This function supports specifying [collation](/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{
			"SELECT MIN(x) AS min\nFROM UNNEST([8, 37, 4, 55]) AS x;\n\n/*-----*\n | min |\n +-----+\n | 4   |\n *-----*/",
			"SELECT x, MIN(x) OVER (PARTITION BY MOD(x, 2)) AS min\nFROM UNNEST([8, NULL, 37, 4, NULL, 55]) AS x;\n\n/*------+------*\n | x    | min  |\n +------+------+\n | NULL | NULL |\n | NULL | NULL |\n | 8    | 4    |\n | 4    | 4    |\n | 37   | 37   |\n | 55   | 37   |\n *------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#min",
	},
	{
		Name:        "MIN_BY",
		Method:      "MIN_BY(\n  x, y\n)",
		Description: "Synonym for [`ANY_VALUE(x HAVING MIN y)`](#any_value).",
		ExampleSQLs: []string{
			"WITH fruits AS (\n  SELECT \"apple\"  fruit, 3.55 price UNION ALL\n  SELECT \"banana\"  fruit, 2.10 price UNION ALL\n  SELECT \"pear\"  fruit, 4.30 price\n)\nSELECT MIN_BY(fruit, price) as fruit\nFROM fruits;\n\n/*--------*\n | fruit  |\n +--------+\n | banana |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#min_by",
	},
	{
		Name:        "STRING_AGG",
		Method:      "STRING_AGG(\n  [ DISTINCT ]\n  expression [, delimiter]\n  [ ORDER BY key [ { ASC | DESC } ] [, ... ] ]\n  [ LIMIT n ]\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns a value (either `STRING` or `BYTES`) obtained by concatenating\nnon- `NULL` values. Returns `NULL` if there are zero input rows or `expression`\nevaluates to `NULL` for all rows.If a `delimiter` is specified, concatenated values are separated by that\ndelimiter; otherwise, a comma is used as a delimiter.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).If this function is used with the `OVER` clause, it's part of a\nwindow function call. In a window function call,\naggregate function clauses can't be used.\nTo learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT STRING_AGG(fruit) AS string_agg\nFROM UNNEST([\"apple\", NULL, \"pear\", \"banana\", \"pear\"]) AS fruit;\n\n/*------------------------*\n | string_agg             |\n +------------------------+\n | apple,pear,banana,pear |\n *------------------------*/",
			"SELECT STRING_AGG(fruit, \" & \") AS string_agg\nFROM UNNEST([\"apple\", \"pear\", \"banana\", \"pear\"]) AS fruit;\n\n/*------------------------------*\n | string_agg                   |\n +------------------------------+\n | apple & pear & banana & pear |\n *------------------------------*/",
			"SELECT STRING_AGG(DISTINCT fruit, \" & \") AS string_agg\nFROM UNNEST([\"apple\", \"pear\", \"banana\", \"pear\"]) AS fruit;\n\n/*-----------------------*\n | string_agg            |\n +-----------------------+\n | apple & pear & banana |\n *-----------------------*/",
			"SELECT STRING_AGG(fruit, \" & \" ORDER BY LENGTH(fruit)) AS string_agg\nFROM UNNEST([\"apple\", \"pear\", \"banana\", \"pear\"]) AS fruit;\n\n/*------------------------------*\n | string_agg                   |\n +------------------------------+\n | pear & pear & apple & banana |\n *------------------------------*/",
			"SELECT STRING_AGG(fruit, \" & \" LIMIT 2) AS string_agg\nFROM UNNEST([\"apple\", \"pear\", \"banana\", \"pear\"]) AS fruit;\n\n/*--------------*\n | string_agg   |\n +--------------+\n | apple & pear |\n *--------------*/",
			"SELECT STRING_AGG(DISTINCT fruit, \" & \" ORDER BY fruit DESC LIMIT 2) AS string_agg\nFROM UNNEST([\"apple\", \"pear\", \"banana\", \"pear\"]) AS fruit;\n\n/*---------------*\n | string_agg    |\n +---------------+\n | pear & banana |\n *---------------*/",
			"SELECT\n  fruit,\n  STRING_AGG(fruit, \" & \") OVER (ORDER BY LENGTH(fruit)) AS string_agg\nFROM UNNEST([\"apple\", NULL, \"pear\", \"banana\", \"pear\"]) AS fruit;\n\n/*--------+------------------------------*\n | fruit  | string_agg                   |\n +--------+------------------------------+\n | NULL   | NULL                         |\n | pear   | pear & pear                  |\n | pear   | pear & pear                  |\n | apple  | pear & pear & apple          |\n | banana | pear & pear & apple & banana |\n *--------+------------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#string_agg",
	},
	{
		Name:        "SUM",
		Method:      "SUM(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the sum of non- `NULL` values in an aggregated group.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).This function can be used with the\n[`AGGREGATION_THRESHOLD` clause](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause).To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).`SUM` can be used with differential privacy. For more information, see\n[Differentially private aggregate functions](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-dp-functions).Caveats:If the aggregated group is empty or the argument is `NULL` for all rows in\nthe group, returns `NULL`.\nIf the argument is `NaN` for any row in the group, returns `NaN`.\nIf the argument is `[+|-]Infinity` for any row in the group, returns either\n`[+|-]Infinity` or `NaN`.\nIf there is numeric overflow, produces an error.\nIf a [floating-point type](/bigquery/docs/reference/standard-sql/data-types#floating_point_types) is returned, the result is\n[non-deterministic](/bigquery/docs/reference/standard-sql/data-types#floating_point_semantics), which means you might receive a\ndifferent result each time you use this function.",
		ExampleSQLs: []string{
			"SELECT SUM(x) AS sum\nFROM UNNEST([1, 2, 3, 4, 5, 4, 3, 2, 1]) AS x;\n\n/*-----*\n | sum |\n +-----+\n | 25  |\n *-----*/",
			"SELECT SUM(DISTINCT x) AS sum\nFROM UNNEST([1, 2, 3, 4, 5, 4, 3, 2, 1]) AS x;\n\n/*-----*\n | sum |\n +-----+\n | 15  |\n *-----*/",
			"SELECT\n  x,\n  SUM(x) OVER (PARTITION BY MOD(x, 3)) AS sum\nFROM UNNEST([1, 2, 3, 4, 5, 4, 3, 2, 1]) AS x;\n\n/*---+-----*\n | x | sum |\n +---+-----+\n | 3 | 6   |\n | 3 | 6   |\n | 1 | 10  |\n | 4 | 10  |\n | 4 | 10  |\n | 1 | 10  |\n | 2 | 9   |\n | 5 | 9   |\n | 2 | 9   |\n *---+-----*/",
			"SELECT\n  x,\n  SUM(DISTINCT x) OVER (PARTITION BY MOD(x, 3)) AS sum\nFROM UNNEST([1, 2, 3, 4, 5, 4, 3, 2, 1]) AS x;\n\n/*---+-----*\n | x | sum |\n +---+-----+\n | 3 | 3   |\n | 3 | 3   |\n | 1 | 5   |\n | 4 | 5   |\n | 4 | 5   |\n | 1 | 5   |\n | 2 | 7   |\n | 5 | 7   |\n | 2 | 7   |\n *---+-----*/",
			"SELECT SUM(x) AS sum\nFROM UNNEST([]) AS x;\n\n/*------*\n | sum  |\n +------+\n | NULL |\n *------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions#sum",
	},
	{
		Name:        "APPROX_COUNT_DISTINCT",
		Method:      "APPROX_COUNT_DISTINCT(\n  expression\n)",
		Description: "Returns the approximate result for `COUNT(DISTINCT expression)`. The value\nreturned is a statistical estimate, not necessarily the actual value.This function is less accurate than `COUNT(DISTINCT expression)`, but performs\nbetter on huge input.",
		ExampleSQLs: []string{
			"SELECT APPROX_COUNT_DISTINCT(x) as approx_distinct\nFROM UNNEST([0, 1, 1, 2, 3, 5]) as x;\n\n/*-----------------*\n | approx_distinct |\n +-----------------+\n | 5               |\n *-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions#approx_count_distinct",
	},
	{
		Name:        "APPROX_QUANTILES",
		Method:      "APPROX_QUANTILES(\n  [ DISTINCT ]\n  expression, number\n  [ { IGNORE | RESPECT } NULLS ]\n)",
		Description: "Returns the approximate boundaries for a group of `expression` values, where\n`number` represents the number of quantiles to create. This function returns an\narray of `number` \\+ 1 elements, sorted in ascending order, where the\nfirst element is the approximate minimum and the last element is the approximate\nmaximum.Returns `NULL` if there are zero input rows or `expression` evaluates to\n`NULL` for all rows.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).",
		ExampleSQLs: []string{
			"SELECT APPROX_QUANTILES(x, 2) AS approx_quantiles\nFROM UNNEST([1, 1, 1, 4, 5, 6, 7, 8, 9, 10]) AS x;\n\n/*------------------*\n | approx_quantiles |\n +------------------+\n | [1, 5, 10]       |\n *------------------*/",
			"SELECT APPROX_QUANTILES(x, 100)[OFFSET(90)] AS percentile_90\nFROM UNNEST([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) AS x;\n\n/*---------------*\n | percentile_90 |\n +---------------+\n | 9             |\n *---------------*/",
			"SELECT APPROX_QUANTILES(DISTINCT x, 2) AS approx_quantiles\nFROM UNNEST([1, 1, 1, 4, 5, 6, 7, 8, 9, 10]) AS x;\n\n/*------------------*\n | approx_quantiles |\n +------------------+\n | [1, 6, 10]       |\n *------------------*/",
			"SELECT FORMAT(\"%T\", APPROX_QUANTILES(x, 2 RESPECT NULLS)) AS approx_quantiles\nFROM UNNEST([NULL, NULL, 1, 1, 1, 4, 5, 6, 7, 8, 9, 10]) AS x;\n\n/*------------------*\n | approx_quantiles |\n +------------------+\n | [NULL, 4, 10]    |\n *------------------*/",
			"SELECT FORMAT(\"%T\", APPROX_QUANTILES(DISTINCT x, 2 RESPECT NULLS)) AS approx_quantiles\nFROM UNNEST([NULL, NULL, 1, 1, 1, 4, 5, 6, 7, 8, 9, 10]) AS x;\n\n/*------------------*\n | approx_quantiles |\n +------------------+\n | [NULL, 6, 10]    |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions#approx_quantiles",
	},
	{
		Name:        "APPROX_TOP_COUNT",
		Method:      "APPROX_TOP_COUNT(\n  expression, number\n)",
		Description: "Returns the approximate top elements of `expression` as an array of `STRUCT` s.\nThe `number` parameter specifies the number of elements returned.Each `STRUCT` contains two fields. The first field (named `value`) contains an\ninput value. The second field (named `count`) contains an `INT64` specifying the\nnumber of times the value was returned.Returns `NULL` if there are zero input rows.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).",
		ExampleSQLs: []string{
			"SELECT APPROX_TOP_COUNT(x, 2) as approx_top_count\nFROM UNNEST([\"apple\", \"apple\", \"pear\", \"pear\", \"pear\", \"banana\"]) as x;\n\n/*-------------------------*\n | approx_top_count        |\n +-------------------------+\n | [{pear, 3}, {apple, 2}] |\n *-------------------------*/",
			"SELECT APPROX_TOP_COUNT(x, 2) as approx_top_count\nFROM UNNEST([NULL, \"pear\", \"pear\", \"pear\", \"apple\", NULL]) as x;\n\n/*------------------------*\n | approx_top_count       |\n +------------------------+\n | [{pear, 3}, {NULL, 2}] |\n *------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions#approx_top_count",
	},
	{
		Name:        "APPROX_TOP_SUM",
		Method:      "APPROX_TOP_SUM(\n  expression, weight, number\n)",
		Description: "Returns the approximate top elements of `expression`, ordered by the sum of the\n`weight` values provided for each unique value of `expression`. The `number`\nparameter specifies the number of elements returned.If the `weight` input is negative or `NaN`, this function returns an error.The elements are returned as an array of `STRUCT` s.\nEach `STRUCT` contains two fields: `value` and `sum`.\nThe `value` field contains the value of the input expression. The `sum` field is\nthe same type as `weight`, and is the approximate sum of the input weight\nassociated with the `value` field.Returns `NULL` if there are zero input rows.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).",
		ExampleSQLs: []string{
			"SELECT APPROX_TOP_SUM(x, weight, 2) AS approx_top_sum FROM\nUNNEST([\n  STRUCT(\"apple\" AS x, 3 AS weight),\n  (\"pear\", 2),\n  (\"apple\", 0),\n  (\"banana\", 5),\n  (\"pear\", 4)\n]);\n\n/*--------------------------*\n | approx_top_sum           |\n +--------------------------+\n | [{pear, 6}, {banana, 5}] |\n *--------------------------*/",
			"SELECT APPROX_TOP_SUM(x, weight, 2) AS approx_top_sum FROM\nUNNEST([STRUCT(\"apple\" AS x, NULL AS weight), (\"pear\", 0), (\"pear\", NULL)]);\n\n/*----------------------------*\n | approx_top_sum             |\n +----------------------------+\n | [{pear, 0}, {apple, NULL}] |\n *----------------------------*/",
			"SELECT APPROX_TOP_SUM(x, weight, 2) AS approx_top_sum FROM\nUNNEST([STRUCT(\"apple\" AS x, 0 AS weight), (NULL, 2)]);\n\n/*-------------------------*\n | approx_top_sum          |\n +-------------------------+\n | [{NULL, 2}, {apple, 0}] |\n *-------------------------*/",
			"SELECT APPROX_TOP_SUM(x, weight, 2) AS approx_top_sum FROM\nUNNEST([STRUCT(\"apple\" AS x, 0 AS weight), (NULL, NULL)]);\n\n/*----------------------------*\n | approx_top_sum             |\n +----------------------------+\n | [{apple, 0}, {NULL, NULL}] |\n *----------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions#approx_top_sum",
	},
	{
		Name:        "ARRAY",
		Method:      "ARRAY(subquery)",
		Description: "The `ARRAY` function returns an `ARRAY` with one element for each row in a\n[subquery](https://cloud.google.com/bigquery/docs/reference/standard-sql/subqueries).If `subquery` produces a\nSQL table,\nthe table must have exactly one column. Each element in the output `ARRAY` is\nthe value of the single column of a row in the table.If `subquery` produces a\nvalue table,\nthen each element in the output `ARRAY` is the entire corresponding row of the\nvalue table.",
		ExampleSQLs: []string{
			"SELECT ARRAY\n  (SELECT 1 UNION ALL\n   SELECT 2 UNION ALL\n   SELECT 3) AS new_array;\n\n/*-----------*\n | new_array |\n +-----------+\n | [1, 2, 3] |\n *-----------*/",
			"SELECT\n  ARRAY\n    (SELECT AS STRUCT 1, 2, 3\n     UNION ALL SELECT AS STRUCT 4, 5, 6) AS new_array;\n\n/*------------------------*\n | new_array              |\n +------------------------+\n | [{1, 2, 3}, {4, 5, 6}] |\n *------------------------*/",
			"SELECT ARRAY\n  (SELECT AS STRUCT [1, 2, 3] UNION ALL\n   SELECT AS STRUCT [4, 5, 6]) AS new_array;\n\n/*----------------------------*\n | new_array                  |\n +----------------------------+\n | [{[1, 2, 3]}, {[4, 5, 6]}] |\n *----------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array",
	},
	{
		Name:        "ARRAY_CONCAT",
		Method:      "ARRAY_CONCAT(array_expression[, ...])",
		Description: "Concatenates one or more arrays with the same element type into a single array.The function returns `NULL` if any input argument is `NULL`.",
		ExampleSQLs: []string{
			"SELECT ARRAY_CONCAT([1, 2], [3, 4], [5, 6]) as count_to_six;\n\n/*--------------------------------------------------*\n | count_to_six                                     |\n +--------------------------------------------------+\n | [1, 2, 3, 4, 5, 6]                               |\n *--------------------------------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_concat",
	},
	{
		Name:        "ARRAY_LENGTH",
		Method:      "ARRAY_LENGTH(array_expression)",
		Description: "Returns the size of the array. Returns 0 for an empty array. Returns `NULL` if\nthe `array_expression` is `NULL`.",
		ExampleSQLs: []string{
			"SELECT\n  ARRAY_LENGTH([\"coffee\", NULL, \"milk\" ]) AS size_a,\n  ARRAY_LENGTH([\"cake\", \"pie\"]) AS size_b;\n\n/*--------+--------*\n | size_a | size_b |\n +--------+--------+\n | 3      | 2      |\n *--------+--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_length",
	},
	{
		Name:        "ARRAY_REVERSE",
		Method:      "ARRAY_REVERSE(value)",
		Description: "Returns the input `ARRAY` with elements in reverse order.",
		ExampleSQLs: []string{
			"SELECT ARRAY_REVERSE([1, 2, 3]) AS reverse_arr\n\n/*-------------*\n | reverse_arr |\n +-------------+\n | [3, 2, 1]   |\n *-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_reverse",
	},
	{
		Name:        "ARRAY_TO_STRING",
		Method:      "ARRAY_TO_STRING(array_expression, delimiter[, null_text])",
		Description: "Returns a concatenation of the elements in `array_expression`\nas a `STRING`. The value for `array_expression`\ncan either be an array of `STRING` or\n`BYTES` data types.If the `null_text` parameter is used, the function replaces any `NULL` values in\nthe array with the value of `null_text`.If the `null_text` parameter isn't used, the function omits the `NULL` value\nand its preceding delimiter.",
		ExampleSQLs: []string{
			"SELECT ARRAY_TO_STRING(['coffee', 'tea', 'milk', NULL], '--', 'MISSING') AS text\n\n/*--------------------------------*\n | text                           |\n +--------------------------------+\n | coffee--tea--milk--MISSING     |\n *--------------------------------*/",
			"SELECT ARRAY_TO_STRING(['cake', 'pie', NULL], '--', 'MISSING') AS text\n\n/*--------------------------------*\n | text                           |\n +--------------------------------+\n | cake--pie--MISSING             |\n *--------------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#array_to_string",
	},
	{
		Name:        "GENERATE_ARRAY",
		Method:      "GENERATE_ARRAY(start_expression, end_expression[, step_expression])",
		Description: "Returns an array of values. The `start_expression` and `end_expression`\nparameters determine the inclusive start and end of the array.The `GENERATE_ARRAY` function accepts the following data types as inputs:`INT64`\n`NUMERIC`\n`BIGNUMERIC`\n`FLOAT64`The `step_expression` parameter determines the increment used to\ngenerate array values. The default value for this parameter is `1`.This function returns an error if `step_expression` is set to 0, or if any\ninput is `NaN`.If any argument is `NULL`, the function will return a `NULL` array.",
		ExampleSQLs: []string{
			"SELECT GENERATE_ARRAY(1, 5) AS example_array;\n\n/*-----------------*\n | example_array   |\n +-----------------+\n | [1, 2, 3, 4, 5] |\n *-----------------*/",
			"SELECT GENERATE_ARRAY(0, 10, 3) AS example_array;\n\n/*---------------*\n | example_array |\n +---------------+\n | [0, 3, 6, 9]  |\n *---------------*/",
			"SELECT GENERATE_ARRAY(10, 0, -3) AS example_array;\n\n/*---------------*\n | example_array |\n +---------------+\n | [10, 7, 4, 1] |\n *---------------*/",
			"SELECT GENERATE_ARRAY(4, 4, 10) AS example_array;\n\n/*---------------*\n | example_array |\n +---------------+\n | [4]           |\n *---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#generate_array",
	},
	{
		Name:        "GENERATE_DATE_ARRAY",
		Method:      "GENERATE_DATE_ARRAY(start_date, end_date[, INTERVAL INT64_expr date_part])",
		Description: "Returns an array of dates. The `start_date` and `end_date`\nparameters determine the inclusive start and end of the array.The `GENERATE_DATE_ARRAY` function accepts the following data types as inputs:`start_date` must be a `DATE`.\n`end_date` must be a `DATE`.\n`INT64_expr` must be an `INT64`.\n`date_part` must be either DAY, WEEK, MONTH, QUARTER, or YEAR.The `INT64_expr` parameter determines the increment used to generate dates. The\ndefault value for this parameter is 1 day.This function returns an error if `INT64_expr` is set to 0.",
		ExampleSQLs: []string{
			"SELECT GENERATE_DATE_ARRAY('2016-10-05', '2016-10-08') AS example;\n\n/*--------------------------------------------------*\n | example                                          |\n +--------------------------------------------------+\n | [2016-10-05, 2016-10-06, 2016-10-07, 2016-10-08] |\n *--------------------------------------------------*/",
			"SELECT GENERATE_DATE_ARRAY(\n '2016-10-05', '2016-10-09', INTERVAL 2 DAY) AS example;\n\n/*--------------------------------------*\n | example                              |\n +--------------------------------------+\n | [2016-10-05, 2016-10-07, 2016-10-09] |\n *--------------------------------------*/",
			"SELECT GENERATE_DATE_ARRAY('2016-10-05',\n  '2016-10-01', INTERVAL -3 DAY) AS example;\n\n/*--------------------------*\n | example                  |\n +--------------------------+\n | [2016-10-05, 2016-10-02] |\n *--------------------------*/",
			"SELECT GENERATE_DATE_ARRAY('2016-10-05',\n  '2016-10-05', INTERVAL 8 DAY) AS example;\n\n/*--------------*\n | example      |\n +--------------+\n | [2016-10-05] |\n *--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#generate_date_array",
	},
	{
		Name:        "GENERATE_TIMESTAMP_ARRAY",
		Method:      "GENERATE_TIMESTAMP_ARRAY(start_timestamp, end_timestamp,\n                         INTERVAL step_expression date_part)",
		Description: "Returns an `ARRAY` of `TIMESTAMPS` separated by a given interval. The\n`start_timestamp` and `end_timestamp` parameters determine the inclusive\nlower and upper bounds of the `ARRAY`.The `GENERATE_TIMESTAMP_ARRAY` function accepts the following data types as\ninputs:`start_timestamp`: `TIMESTAMP`\n`end_timestamp`: `TIMESTAMP`\n`step_expression`: `INT64`\nAllowed `date_part` values are:\n`MICROSECOND`, `MILLISECOND`, `SECOND`, `MINUTE`, `HOUR`, or `DAY`.The `step_expression` parameter determines the increment used to generate\ntimestamps.",
		ExampleSQLs: []string{
			"SELECT GENERATE_TIMESTAMP_ARRAY('2016-10-05 00:00:00', '2016-10-07 00:00:00',\n                                INTERVAL 1 DAY) AS timestamp_array;\n\n/*--------------------------------------------------------------------------*\n | timestamp_array                                                          |\n +--------------------------------------------------------------------------+\n | [2016-10-05 00:00:00+00, 2016-10-06 00:00:00+00, 2016-10-07 00:00:00+00] |\n *--------------------------------------------------------------------------*/",
			"SELECT GENERATE_TIMESTAMP_ARRAY('2016-10-05 00:00:00', '2016-10-05 00:00:02',\n                                INTERVAL 1 SECOND) AS timestamp_array;\n\n/*--------------------------------------------------------------------------*\n | timestamp_array                                                          |\n +--------------------------------------------------------------------------+\n | [2016-10-05 00:00:00+00, 2016-10-05 00:00:01+00, 2016-10-05 00:00:02+00] |\n *--------------------------------------------------------------------------*/",
			"SELECT GENERATE_TIMESTAMP_ARRAY('2016-10-06 00:00:00', '2016-10-01 00:00:00',\n                                INTERVAL -2 DAY) AS timestamp_array;\n\n/*--------------------------------------------------------------------------*\n | timestamp_array                                                          |\n +--------------------------------------------------------------------------+\n | [2016-10-06 00:00:00+00, 2016-10-04 00:00:00+00, 2016-10-02 00:00:00+00] |\n *--------------------------------------------------------------------------*/",
			"SELECT GENERATE_TIMESTAMP_ARRAY('2016-10-05 00:00:00', '2016-10-05 00:00:00',\n                                INTERVAL 1 HOUR) AS timestamp_array;\n\n/*--------------------------*\n | timestamp_array          |\n +--------------------------+\n | [2016-10-05 00:00:00+00] |\n *--------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions#generate_timestamp_array",
	},
	{
		Name:        "BIT_COUNT",
		Method:      "BIT_COUNT(expression)",
		Description: "The input, `expression`, must be an\ninteger or `BYTES`.Returns the number of bits that are set in the input `expression`.\nFor signed integers, this is the number of bits in two's complement form.",
		ExampleSQLs: []string{
			"SELECT a, BIT_COUNT(a) AS a_bits, FORMAT(\"%T\", b) as b, BIT_COUNT(b) AS b_bits\nFROM UNNEST([\n  STRUCT(0 AS a, b'' AS b), (0, b'\\x00'), (5, b'\\x05'), (8, b'\\x00\\x08'),\n  (0xFFFF, b'\\xFF\\xFF'), (-2, b'\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFE'),\n  (-1, b'\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'),\n  (NULL, b'\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF')\n]) AS x;\n\n/*-------+--------+---------------------------------------------+--------*\n | a     | a_bits | b                                           | b_bits |\n +-------+--------+---------------------------------------------+--------+\n | 0     | 0      | b\"\"                                         | 0      |\n | 0     | 0      | b\"\\x00\"                                     | 0      |\n | 5     | 2      | b\"\\x05\"                                     | 2      |\n | 8     | 1      | b\"\\x00\\x08\"                                 | 1      |\n | 65535 | 16     | b\"\\xff\\xff\"                                 | 16     |\n | -2    | 63     | b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\"         | 63     |\n | -1    | 64     | b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"         | 64     |\n | NULL  | NULL   | b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\" | 80     |\n *-------+--------+---------------------------------------------+--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/bit_functions#bit_count",
	},
	{
		Name:        "EXTERNAL_OBJECT_TRANSFORM",
		Method:      "EXTERNAL_OBJECT_TRANSFORM(TABLE object_table_name, transform_types_array)",
		Description: "This function returns a transformed object table with the original columns plus\none or more additional columns, depending on the `transform_types` values\nspecified.This function only supports\n[object tables](https://cloud.google.com/bigquery/docs/object-table-introduction)\nas inputs. Subqueries or any other types of tables aren't supported.`object_table_name` is the name of the object table to be transformed, in\nthe format `dataset_name.object_table_name`.`transform_types_array` is an array of `STRING` literals. Currently, the only\nsupported `transform_types_array` value is `SIGNED_URL`. Specifying `SIGNED_URL`\ncreates read-only signed URLs for the objects in the identified object table,\nwhich are returned in a `signed_url` column. Generated signed URLs are\nvalid for 6 hours.",
		ExampleSQLs: []string{
			"SELECT uri, signed_url\nFROM EXTERNAL_OBJECT_TRANSFORM(TABLE mydataset.myobjecttable, ['SIGNED_URL']);\n\n--The preceding statement returns results similar to the following:\n/*-----------------------------------------------------------------------------------------------------------------------------*\n |  uri                                 | signed_url                                                                           |\n +-----------------------------------------------------------------------------------------------------------------------------+\n | gs://myobjecttable/1234_Main_St.jpeg | https://storage.googleapis.com/mybucket/1234_Main_St.jpeg?X-Goog-Algorithm=1234abcd… |\n +-----------------------------------------------------------------------------------------------------------------------------+\n | gs://myobjecttable/345_River_Rd.jpeg | https://storage.googleapis.com/mybucket/345_River_Rd.jpeg?X-Goog-Algorithm=2345bcde… |\n *-----------------------------------------------------------------------------------------------------------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/table-functions-built-in#external_object_transform",
	},
	{
		Name:        "CAST",
		Method:      "CAST(expression AS typename [format_clause])",
		Description: "Cast syntax is used in a query to indicate that the result type of an\nexpression should be converted to some other type.When using `CAST`, a query can fail if GoogleSQL is unable to perform\nthe cast. If you want to protect your queries from these types of errors, you\ncan use [SAFE\\_CAST](#safe_casting).Casts between supported types that don't successfully map from the original\nvalue to the target domain produce runtime errors. For example, casting\n`BYTES` to `STRING` where the byte sequence isn't valid UTF-8 results in a\nruntime error.Some casts can include a [format clause](https://cloud.google.com/bigquery/docs/reference/standard-sql/format-elements#formatting_syntax), which provides\ninstructions for how to conduct the\ncast. For example, you could\ninstruct a cast to convert a sequence of bytes to a BASE64-encoded string\ninstead of a UTF-8-encoded string.The structure of the format clause is unique to each type of cast and more\ninformation is available in the section for that cast.",
		ExampleSQLs: []string{
			"CAST(x=1 AS STRING)",
			"CAST(expression AS ARRAY<element_type>)",
			"CAST(expression AS BIGNUMERIC)",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#cast",
	},
	{
		Name:        "PARSE_BIGNUMERIC",
		Method:      "PARSE_BIGNUMERIC(string_expression)",
		Description: "Converts a `STRING` to a `BIGNUMERIC` value.The numeric literal contained in the string must not exceed the\n[maximum precision or range](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#decimal_types) of the `BIGNUMERIC` type, or an\nerror occurs. If the number of digits after the decimal point exceeds 38, then\nthe resulting `BIGNUMERIC` value rounds\n[half away from zero](https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero) to have 38 digits after the\ndecimal point.```\n\n-- This example shows how a string with a decimal point is parsed.\nSELECT PARSE_BIGNUMERIC(\"123.45\") AS parsed;\n\n/*--------*\n | parsed |\n +--------+\n | 123.45 |\n *--------*/\n\n-- This example shows how a string with an exponent is parsed.\nSELECT PARSE_BIGNUMERIC(\"123.456E37\") AS parsed;\n\n/*-----------------------------------------*\n | parsed                                  |\n +-----------------------------------------+\n | 123400000000000000000000000000000000000 |\n *-----------------------------------------*/\n\n-- This example shows the rounding when digits after the decimal point exceeds 38.\nSELECT PARSE_BIGNUMERIC(\"1.123456789012345678901234567890123456789\") as parsed;\n\n/*------------------------------------------*\n | parsed                                   |\n +------------------------------------------+\n | 1.12345678901234567890123456789012345679 |\n *------------------------------------------*/\n\n```This function is similar to using the [`CAST AS BIGNUMERIC`](#cast_bignumeric)\nfunction except that the `PARSE_BIGNUMERIC` function only accepts string inputs\nand allows the following in the string:Spaces between the sign (+/-) and the number\nSigns (+/-) after the numberRules for valid input strings:Rule\n Example Input\n Output\n\n\n\n\n\n The string can only contain digits, commas, decimal points and signs.\n\n\n \"\\- 12,34567,89.0\"\n\n -123456789\n\n\n Whitespaces are allowed anywhere except between digits.\n\n \" \\- 12.345 \"\n\n -12.345\n\n\n Only digits and commas are allowed before the decimal point.\n\n \" 12,345,678\"\n\n 12345678\n\n\n Only digits are allowed after the decimal point.\n\n \"1.234 \"\n\n 1.234\n\n\n\n Use `E` or `e` for exponents. After the\n `e`, digits and a leading sign indicator are allowed.\n\n \" 123.45e-1\"\n 12.345\n\n\n\n If the integer part isn't empty, then it must contain at least one\n digit.\n\n \" 0,.12 -\"\n -0.12\n\n\n\n If the string contains a decimal point, then it must contain at least\n one digit.\n\n \" .1\"\n 0.1\n\n\n\n The string can't contain more than one sign.\n\n \" 0.5 +\"\n 0.5",
		ExampleSQLs: []string{
			"SELECT PARSE_BIGNUMERIC(\"  -  12.34 \") as parsed;\n\n/*--------*\n | parsed |\n +--------+\n | -12.34 |\n *--------*/",
			"SELECT PARSE_BIGNUMERIC(\"12.34e-1-\") as parsed;\n\n/*--------*\n | parsed |\n +--------+\n | -1.234 |\n *--------*/",
			"SELECT PARSE_BIGNUMERIC(\"  1,2,,3,.45 + \") as parsed;\n\n/*--------*\n | parsed |\n +--------+\n | 123.45 |\n *--------*/",
			"SELECT PARSE_BIGNUMERIC(\".1234  \") as parsed;\n\n/*--------*\n | parsed |\n +--------+\n | 0.1234 |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#parse_bignumeric",
	},
	{
		Name:        "PARSE_NUMERIC",
		Method:      "PARSE_NUMERIC(string_expression)",
		Description: "Converts a `STRING` to a `NUMERIC` value.The numeric literal contained in the string must not exceed the\n[maximum precision or range](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#decimal_types) of the `NUMERIC` type, or an error\noccurs. If the number of digits after the decimal point exceeds nine, then the\nresulting `NUMERIC` value rounds\n[half away from zero](https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero) to have nine digits after the\ndecimal point.```\n\n-- This example shows how a string with a decimal point is parsed.\nSELECT PARSE_NUMERIC(\"123.45\") AS parsed;\n\n/*--------*\n | parsed |\n +--------+\n | 123.45 |\n *--------*/\n\n-- This example shows how a string with an exponent is parsed.\nSELECT PARSE_NUMERIC(\"12.34E27\") as parsed;\n\n/*-------------------------------*\n | parsed                        |\n +-------------------------------+\n | 12340000000000000000000000000 |\n *-------------------------------*/\n\n-- This example shows the rounding when digits after the decimal point exceeds 9.\nSELECT PARSE_NUMERIC(\"1.0123456789\") as parsed;\n\n/*-------------*\n | parsed      |\n +-------------+\n | 1.012345679 |\n *-------------*/\n\n```This function is similar to using the [`CAST AS NUMERIC`](#cast_numeric) function\nexcept that the `PARSE_NUMERIC` function only accepts string inputs and allows\nthe following in the string:Spaces between the sign (+/-) and the number\nSigns (+/-) after the numberRules for valid input strings:Rule\n Example Input\n Output\n\n\n\n\n\n The string can only contain digits, commas, decimal points and signs.\n\n\n \"\\- 12,34567,89.0\"\n\n -123456789\n\n\n Whitespaces are allowed anywhere except between digits.\n\n \" \\- 12.345 \"\n\n -12.345\n\n\n Only digits and commas are allowed before the decimal point.\n\n \" 12,345,678\"\n\n 12345678\n\n\n Only digits are allowed after the decimal point.\n\n \"1.234 \"\n\n 1.234\n\n\n\n Use `E` or `e` for exponents. After\n the `e`,\n digits and a leading sign indicator are allowed.\n\n \" 123.45e-1\"\n 12.345\n\n\n\n If the integer part isn't empty, then it must contain at least one\n digit.\n\n \" 0,.12 -\"\n -0.12\n\n\n\n If the string contains a decimal point, then it must contain at least\n one digit.\n\n \" .1\"\n 0.1\n\n\n\n The string can't contain more than one sign.\n\n \" 0.5 +\"\n 0.5",
		ExampleSQLs: []string{
			"SELECT PARSE_NUMERIC(\"  -  12.34 \") as parsed;\n\n/*--------*\n | parsed |\n +--------+\n | -12.34 |\n *--------*/",
			"SELECT PARSE_NUMERIC(\"12.34e-1-\") as parsed;\n\n/*--------*\n | parsed |\n +--------+\n | -1.234 |\n *--------*/",
			"SELECT PARSE_NUMERIC(\"  1,2,,3,.45 + \") as parsed;\n\n/*--------*\n | parsed |\n +--------+\n | 123.45 |\n *--------*/",
			"SELECT PARSE_NUMERIC(\".1234  \") as parsed;\n\n/*--------*\n | parsed |\n +--------+\n | 0.1234 |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#parse_numeric",
	},
	{
		Name:        "SAFE_CAST",
		Method:      "SAFE_CAST(expression AS typename [format_clause])",
		Description: "When using `CAST`, a query can fail if GoogleSQL is unable to perform\nthe cast. For example, the following query generates an error:```\nSELECT CAST(\"apple\" AS INT64) AS not_a_number;\n\n```If you want to protect your queries from these types of errors, you can use\n`SAFE_CAST`. `SAFE_CAST` replaces runtime errors with `NULL` s. However, during\nstatic analysis, impossible casts between two non-castable types still produce\nan error because the query is invalid.```\nSELECT SAFE_CAST(\"apple\" AS INT64) AS not_a_number;\n\n/*--------------*\n | not_a_number |\n +--------------+\n | NULL         |\n *--------------*/\n\n```Some casts can include a [format clause](https://cloud.google.com/bigquery/docs/reference/standard-sql/format-elements#formatting_syntax), which provides\ninstructions for how to conduct the\ncast. For example, you could\ninstruct a cast to convert a sequence of bytes to a BASE64-encoded string\ninstead of a UTF-8-encoded string.The structure of the format clause is unique to each type of cast and more\ninformation is available in the section for that cast.If you are casting from bytes to strings, you can also use the\nfunction, [`SAFE_CONVERT_BYTES_TO_STRING`](/bigquery/docs/reference/standard-sql/string_functions#safe_convert_bytes_to_string). Any invalid UTF-8 characters\nare replaced with the unicode replacement character, `U+FFFD`.",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#safe_cast",
	},
	{
		Name:        "CURRENT_DATE",
		Method:      "CURRENT_DATE()",
		Description: "Returns the current date as a `DATE` object. Parentheses are optional when\ncalled with no arguments.This function supports the following arguments:`time_zone_expression`: A `STRING` expression that represents a\n[time zone](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timezone_definitions). If no time zone is specified, the\ndefault time zone, UTC, is used. If this expression is\nused and it evaluates to `NULL`, this function returns `NULL`.The current date value is set at the start of the query statement that contains\nthis function. All invocations of `CURRENT_DATE()` within a query statement\nyield the same value.",
		ExampleSQLs: []string{
			"SELECT CURRENT_DATE() AS the_date;\n\n/*--------------*\n | the_date     |\n +--------------+\n | 2016-12-25   |\n *--------------*/",
			"SELECT CURRENT_DATE('America/Los_Angeles') AS the_date;\n\n/*--------------*\n | the_date     |\n +--------------+\n | 2016-12-25   |\n *--------------*/",
			"SELECT CURRENT_DATE('-08') AS the_date;\n\n/*--------------*\n | the_date     |\n +--------------+\n | 2016-12-25   |\n *--------------*/",
			"SELECT CURRENT_DATE AS the_date;\n\n/*--------------*\n | the_date     |\n +--------------+\n | 2016-12-25   |\n *--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#current_date",
	},
	{
		Name:        "DATE",
		Method:      "DATE(year, month, day)",
		Description: "Constructs or extracts a date.This function supports the following arguments:`year`: The `INT64` value for year.\n`month`: The `INT64` value for month.\n`day`: The `INT64` value for day.\n`timestamp_expression`: A `TIMESTAMP` expression that contains the date.\n`time_zone_expression`: A `STRING` expression that represents a\n[time zone](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timezone_definitions). If no time zone is specified with\n`timestamp_expression`, the default time zone, UTC, is\nused.\n`datetime_expression`: A `DATETIME` expression that contains the date.",
		ExampleSQLs: []string{
			"SELECT\n  DATE(2016, 12, 25) AS date_ymd,\n  DATE(DATETIME '2016-12-25 23:59:59') AS date_dt,\n  DATE(TIMESTAMP '2016-12-25 05:30:00+07', 'America/Los_Angeles') AS date_tstz;\n\n/*------------+------------+------------*\n | date_ymd   | date_dt    | date_tstz  |\n +------------+------------+------------+\n | 2016-12-25 | 2016-12-25 | 2016-12-24 |\n *------------+------------+------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date",
	},
	{
		Name:        "DATE_ADD",
		Method:      "DATE_ADD(date_expression, INTERVAL int64_expression date_part)",
		Description: "Adds a specified time interval to a DATE.`DATE_ADD` supports the following `date_part` values:`DAY`\n`WEEK`. Equivalent to 7 `DAY` s.\n`MONTH`\n`QUARTER`\n`YEAR`Special handling is required for MONTH, QUARTER, and YEAR parts when\nthe date is at (or near) the last day of the month. If the resulting\nmonth has fewer days than the original date's day, then the resulting\ndate is the last date of that month.",
		ExampleSQLs: []string{
			"SELECT DATE_ADD(DATE '2008-12-25', INTERVAL 5 DAY) AS five_days_later;\n\n/*--------------------*\n | five_days_later    |\n +--------------------+\n | 2008-12-30         |\n *--------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_add",
	},
	{
		Name:        "DATE_DIFF",
		Method:      "DATE_DIFF(end_date, start_date, granularity)",
		Description: "Gets the number of unit boundaries between two `DATE` values ( `end_date` -\n`start_date`) at a particular time granularity.",
		ExampleSQLs: []string{
			"SELECT DATE_DIFF(DATE '2010-07-07', DATE '2008-12-25', DAY) AS days_diff;\n\n/*-----------*\n | days_diff |\n +-----------+\n | 559       |\n *-----------*/",
			"SELECT\n  DATE_DIFF(DATE '2017-10-15', DATE '2017-10-14', DAY) AS days_diff,\n  DATE_DIFF(DATE '2017-10-15', DATE '2017-10-14', WEEK) AS weeks_diff;\n\n/*-----------+------------*\n | days_diff | weeks_diff |\n +-----------+------------+\n | 1         | 1          |\n *-----------+------------*/",
			"SELECT\n  DATE_DIFF('2017-12-30', '2014-12-30', YEAR) AS year_diff,\n  DATE_DIFF('2017-12-30', '2014-12-30', ISOYEAR) AS isoyear_diff;\n\n/*-----------+--------------*\n | year_diff | isoyear_diff |\n +-----------+--------------+\n | 3         | 2            |\n *-----------+--------------*/",
			"SELECT\n  DATE_DIFF('2017-12-18', '2017-12-17', WEEK) AS week_diff,\n  DATE_DIFF('2017-12-18', '2017-12-17', WEEK(MONDAY)) AS week_weekday_diff,\n  DATE_DIFF('2017-12-18', '2017-12-17', ISOWEEK) AS isoweek_diff;\n\n/*-----------+-------------------+--------------*\n | week_diff | week_weekday_diff | isoweek_diff |\n +-----------+-------------------+--------------+\n | 0         | 1                 | 1            |\n *-----------+-------------------+--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_diff",
	},
	{
		Name:        "DATE_FROM_UNIX_DATE",
		Method:      "DATE_FROM_UNIX_DATE(int64_expression)",
		Description: "Interprets `int64_expression` as the number of days since 1970-01-01.",
		ExampleSQLs: []string{
			"SELECT DATE_FROM_UNIX_DATE(14238) AS date_from_epoch;\n\n/*-----------------*\n | date_from_epoch |\n +-----------------+\n | 2008-12-25      |\n *-----------------+*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_from_unix_date",
	},
	{
		Name:        "DATE_SUB",
		Method:      "DATE_SUB(date_expression, INTERVAL int64_expression date_part)",
		Description: "Subtracts a specified time interval from a DATE.`DATE_SUB` supports the following `date_part` values:`DAY`\n`WEEK`. Equivalent to 7 `DAY` s.\n`MONTH`\n`QUARTER`\n`YEAR`Special handling is required for MONTH, QUARTER, and YEAR parts when\nthe date is at (or near) the last day of the month. If the resulting\nmonth has fewer days than the original date's day, then the resulting\ndate is the last date of that month.",
		ExampleSQLs: []string{
			"SELECT DATE_SUB(DATE '2008-12-25', INTERVAL 5 DAY) AS five_days_ago;\n\n/*---------------*\n | five_days_ago |\n +---------------+\n | 2008-12-20    |\n *---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_sub",
	},
	{
		Name:        "DATE_TRUNC",
		Method:      "DATE_TRUNC(date_value, date_granularity)",
		Description: "Truncates a `DATE`, `DATETIME`, or `TIMESTAMP` value at a particular\ngranularity.",
		ExampleSQLs: []string{
			"SELECT DATE_TRUNC(DATE '2008-12-25', MONTH) AS month;\n\n/*------------*\n | month      |\n +------------+\n | 2008-12-01 |\n *------------*/",
			"SELECT date AS original, DATE_TRUNC(date, WEEK(MONDAY)) AS truncated\nFROM (SELECT DATE('2017-11-05') AS date);\n\n/*------------+------------*\n | original   | truncated  |\n +------------+------------+\n | 2017-11-05 | 2017-10-30 |\n *------------+------------*/",
			"SELECT\n  DATE_TRUNC('2015-06-15', ISOYEAR) AS isoyear_boundary,\n  EXTRACT(ISOYEAR FROM DATE '2015-06-15') AS isoyear_number;\n\n/*------------------+----------------*\n | isoyear_boundary | isoyear_number |\n +------------------+----------------+\n | 2014-12-29       | 2015           |\n *------------------+----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#date_trunc",
	},
	{
		Name:        "EXTRACT",
		Method:      "EXTRACT(part FROM date_expression)",
		Description: "Returns the value corresponding to the specified date part. The `part` must\nbe one of:`DAYOFWEEK`: Returns values in the range \\[1,7\\] with Sunday as the first day\nof the week.\n`DAY`\n`DAYOFYEAR`\n`WEEK`: Returns the week number of the date in the range \\[0, 53\\]. Weeks begin\nwith Sunday, and dates prior to the first Sunday of the year are in week 0.\n`WEEK(<WEEKDAY>)`: Returns the week number of the date in the range \\[0, 53\\].\nWeeks begin on `WEEKDAY`. Dates prior to\nthe first `WEEKDAY` of the year are in week 0. Valid values for `WEEKDAY` are\n`SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, and\n`SATURDAY`.\n`ISOWEEK`: Returns the [ISO 8601 week](https://en.wikipedia.org/wiki/ISO_week_date)\nnumber of the `date_expression`. `ISOWEEK` s begin on Monday. Return values\nare in the range \\[1, 53\\]. The first `ISOWEEK` of each ISO year begins on the\nMonday before the first Thursday of the Gregorian calendar year.\n`MONTH`\n`QUARTER`: Returns values in the range \\[1,4\\].\n`YEAR`\n`ISOYEAR`: Returns the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\nweek-numbering year, which is the Gregorian calendar year containing the\nThursday of the week to which `date_expression` belongs.",
		ExampleSQLs: []string{
			"SELECT EXTRACT(DAY FROM DATE '2013-12-25') AS the_day;\n\n/*---------*\n | the_day |\n +---------+\n | 25      |\n *---------*/",
			"SELECT\n  date,\n  EXTRACT(ISOYEAR FROM date) AS isoyear,\n  EXTRACT(ISOWEEK FROM date) AS isoweek,\n  EXTRACT(YEAR FROM date) AS year,\n  EXTRACT(WEEK FROM date) AS week\nFROM UNNEST(GENERATE_DATE_ARRAY('2015-12-23', '2016-01-09')) AS date\nORDER BY date;\n\n/*------------+---------+---------+------+------*\n | date       | isoyear | isoweek | year | week |\n +------------+---------+---------+------+------+\n | 2015-12-23 | 2015    | 52      | 2015 | 51   |\n | 2015-12-24 | 2015    | 52      | 2015 | 51   |\n | 2015-12-25 | 2015    | 52      | 2015 | 51   |\n | 2015-12-26 | 2015    | 52      | 2015 | 51   |\n | 2015-12-27 | 2015    | 52      | 2015 | 52   |\n | 2015-12-28 | 2015    | 53      | 2015 | 52   |\n | 2015-12-29 | 2015    | 53      | 2015 | 52   |\n | 2015-12-30 | 2015    | 53      | 2015 | 52   |\n | 2015-12-31 | 2015    | 53      | 2015 | 52   |\n | 2016-01-01 | 2015    | 53      | 2016 | 0    |\n | 2016-01-02 | 2015    | 53      | 2016 | 0    |\n | 2016-01-03 | 2015    | 53      | 2016 | 1    |\n | 2016-01-04 | 2016    | 1       | 2016 | 1    |\n | 2016-01-05 | 2016    | 1       | 2016 | 1    |\n | 2016-01-06 | 2016    | 1       | 2016 | 1    |\n | 2016-01-07 | 2016    | 1       | 2016 | 1    |\n | 2016-01-08 | 2016    | 1       | 2016 | 1    |\n | 2016-01-09 | 2016    | 1       | 2016 | 1    |\n *------------+---------+---------+------+------*/",
			"WITH table AS (SELECT DATE('2017-11-05') AS date)\nSELECT\n  date,\n  EXTRACT(WEEK(SUNDAY) FROM date) AS week_sunday,\n  EXTRACT(WEEK(MONDAY) FROM date) AS week_monday FROM table;\n\n/*------------+-------------+-------------*\n | date       | week_sunday | week_monday |\n +------------+-------------+-------------+\n | 2017-11-05 | 45          | 44          |\n *------------+-------------+-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#extract",
	},
	{
		Name:        "FORMAT_DATE",
		Method:      "FORMAT_DATE(format_string, date_expr)",
		Description: "Formats a `DATE` value according to a specified format string.",
		ExampleSQLs: []string{
			"SELECT FORMAT_DATE('%x', DATE '2008-12-25') AS US_format;\n\n/*------------*\n | US_format  |\n +------------+\n | 12/25/08   |\n *------------*/",
			"SELECT FORMAT_DATE('%b-%d-%Y', DATE '2008-12-25') AS formatted;\n\n/*-------------*\n | formatted   |\n +-------------+\n | Dec-25-2008 |\n *-------------*/",
			"SELECT FORMAT_DATE('%b %Y', DATE '2008-12-25') AS formatted;\n\n/*-------------*\n | formatted   |\n +-------------+\n | Dec 2008    |\n *-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#format_date",
	},
	{
		Name:        "LAST_DAY",
		Method:      "LAST_DAY(date_expression[, date_part])",
		Description: "Returns the last day from a date expression. This is commonly used to return\nthe last day of the month.You can optionally specify the date part for which the last day is returned.\nIf this parameter isn't used, the default value is `MONTH`.\n`LAST_DAY` supports the following values for `date_part`:`YEAR`\n`QUARTER`\n`MONTH`\n`WEEK`. Equivalent to 7 `DAY` s.\n`WEEK(<WEEKDAY>)`. `<WEEKDAY>` represents the starting day of the week.\nValid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`,\n`FRIDAY`, and `SATURDAY`.\n`ISOWEEK`. Uses [ISO 8601](https://en.wikipedia.org/wiki/ISO_week_date) week boundaries. ISO weeks begin\non Monday.\n`ISOYEAR`. Uses the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) week-numbering year boundary.\nThe ISO year boundary is the Monday of the first week whose Thursday belongs\nto the corresponding Gregorian calendar year.",
		ExampleSQLs: []string{
			"SELECT LAST_DAY(DATE '2008-11-25', MONTH) AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-11-30 |\n *------------*/",
			"SELECT LAST_DAY(DATE '2008-11-25') AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-11-30 |\n *------------*/",
			"SELECT LAST_DAY(DATE '2008-11-25', YEAR) AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-12-31 |\n *------------*/",
			"SELECT LAST_DAY(DATE '2008-11-10', WEEK(SUNDAY)) AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-11-15 |\n *------------*/",
			"SELECT LAST_DAY(DATE '2008-11-10', WEEK(MONDAY)) AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-11-16 |\n *------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#last_day",
	},
	{
		Name:        "PARSE_DATE",
		Method:      "PARSE_DATE(format_string, date_string)",
		Description: "Converts a `STRING` value to a `DATE` value.",
		ExampleSQLs: []string{
			"SELECT PARSE_DATE('%x', '12/25/08') AS parsed;\n\n/*------------*\n | parsed     |\n +------------+\n | 2008-12-25 |\n *------------*/",
			"SELECT PARSE_DATE('%Y%m%d', '20081225') AS parsed;\n\n/*------------*\n | parsed     |\n +------------+\n | 2008-12-25 |\n *------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#parse_date",
	},
	{
		Name:        "UNIX_DATE",
		Method:      "UNIX_DATE(date_expression)",
		Description: "Returns the number of days since `1970-01-01`.",
		ExampleSQLs: []string{
			"SELECT UNIX_DATE(DATE '2008-12-25') AS days_from_epoch;\n\n/*-----------------*\n | days_from_epoch |\n +-----------------+\n | 14238           |\n *-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions#unix_date",
	},
	{
		Name:        "CURRENT_DATETIME",
		Method:      "CURRENT_DATETIME([time_zone])",
		Description: "Returns the current time as a `DATETIME` object. Parentheses are optional when\ncalled with no arguments.This function supports an optional `time_zone` parameter.\nSee [Time zone definitions](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timezone_definitions) for\ninformation on how to specify a time zone.The current date and time value is set at the start of the query statement that\ncontains this function. All invocations of `CURRENT_DATETIME()` within a query\nstatement yield the same value.",
		ExampleSQLs: []string{
			"SELECT CURRENT_DATETIME() as now;\n\n/*----------------------------*\n | now                        |\n +----------------------------+\n | 2016-05-19T10:38:47.046465 |\n *----------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#current_datetime",
	},
	{
		Name:        "DATETIME",
		Method:      "1. DATETIME(year, month, day, hour, minute, second)\n2. DATETIME(date_expression[, time_expression])\n3. DATETIME(timestamp_expression [, time_zone])",
		Description: "Constructs a `DATETIME` object using `INT64` values\nrepresenting the year, month, day, hour, minute, and second.\nConstructs a `DATETIME` object using a DATE object and an optional `TIME`\nobject.\nConstructs a `DATETIME` object using a `TIMESTAMP` object. It supports an\noptional parameter to\n[specify a time zone](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timezone_definitions).\nIf no time zone is specified, the default time zone, UTC,\nis used.",
		ExampleSQLs: []string{
			"SELECT\n  DATETIME(2008, 12, 25, 05, 30, 00) as datetime_ymdhms,\n  DATETIME(TIMESTAMP \"2008-12-25 05:30:00+00\", \"America/Los_Angeles\") as datetime_tstz;\n\n/*---------------------+---------------------*\n | datetime_ymdhms     | datetime_tstz       |\n +---------------------+---------------------+\n | 2008-12-25T05:30:00 | 2008-12-24T21:30:00 |\n *---------------------+---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime",
	},
	{
		Name:        "DATETIME_ADD",
		Method:      "DATETIME_ADD(datetime_expression, INTERVAL int64_expression part)",
		Description: "Adds `int64_expression` units of `part` to the `DATETIME` object.`DATETIME_ADD` supports the following values for `part`:`MICROSECOND`\n`MILLISECOND`\n`SECOND`\n`MINUTE`\n`HOUR`\n`DAY`\n`WEEK`. Equivalent to 7 `DAY` s.\n`MONTH`\n`QUARTER`\n`YEAR`Special handling is required for MONTH, QUARTER, and YEAR parts when the\ndate is at (or near) the last day of the month. If the resulting month has fewer\ndays than the original DATETIME's day, then the result day is the last day of\nthe new month.",
		ExampleSQLs: []string{
			"SELECT\n  DATETIME \"2008-12-25 15:30:00\" as original_date,\n  DATETIME_ADD(DATETIME \"2008-12-25 15:30:00\", INTERVAL 10 MINUTE) as later;\n\n/*-----------------------------+------------------------*\n | original_date               | later                  |\n +-----------------------------+------------------------+\n | 2008-12-25T15:30:00         | 2008-12-25T15:40:00    |\n *-----------------------------+------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime_add",
	},
	{
		Name:        "DATETIME_DIFF",
		Method:      "DATETIME_DIFF(end_datetime, start_datetime, granularity)",
		Description: "Gets the number of unit boundaries between two `DATETIME` values\n( `end_datetime` \\- `start_datetime`) at a particular time granularity.",
		ExampleSQLs: []string{
			"SELECT\n  DATETIME \"2010-07-07 10:20:00\" as first_datetime,\n  DATETIME \"2008-12-25 15:30:00\" as second_datetime,\n  DATETIME_DIFF(DATETIME \"2010-07-07 10:20:00\",\n    DATETIME \"2008-12-25 15:30:00\", DAY) as difference;\n\n/*----------------------------+------------------------+------------------------*\n | first_datetime             | second_datetime        | difference             |\n +----------------------------+------------------------+------------------------+\n | 2010-07-07T10:20:00        | 2008-12-25T15:30:00    | 559                    |\n *----------------------------+------------------------+------------------------*/",
			"SELECT\n  DATETIME_DIFF(DATETIME '2017-10-15 00:00:00',\n    DATETIME '2017-10-14 00:00:00', DAY) as days_diff,\n  DATETIME_DIFF(DATETIME '2017-10-15 00:00:00',\n    DATETIME '2017-10-14 00:00:00', WEEK) as weeks_diff;\n\n/*-----------+------------*\n | days_diff | weeks_diff |\n +-----------+------------+\n | 1         | 1          |\n *-----------+------------*/",
			"SELECT\n  DATETIME_DIFF('2017-12-30 00:00:00',\n    '2014-12-30 00:00:00', YEAR) AS year_diff,\n  DATETIME_DIFF('2017-12-30 00:00:00',\n    '2014-12-30 00:00:00', ISOYEAR) AS isoyear_diff;\n\n/*-----------+--------------*\n | year_diff | isoyear_diff |\n +-----------+--------------+\n | 3         | 2            |\n *-----------+--------------*/",
			"SELECT\n  DATETIME_DIFF('2017-12-18', '2017-12-17', WEEK) AS week_diff,\n  DATETIME_DIFF('2017-12-18', '2017-12-17', WEEK(MONDAY)) AS week_weekday_diff,\n  DATETIME_DIFF('2017-12-18', '2017-12-17', ISOWEEK) AS isoweek_diff;\n\n/*-----------+-------------------+--------------*\n | week_diff | week_weekday_diff | isoweek_diff |\n +-----------+-------------------+--------------+\n | 0         | 1                 | 1            |\n *-----------+-------------------+--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime_diff",
	},
	{
		Name:        "DATETIME_SUB",
		Method:      "DATETIME_SUB(datetime_expression, INTERVAL int64_expression part)",
		Description: "Subtracts `int64_expression` units of `part` from the `DATETIME`.`DATETIME_SUB` supports the following values for `part`:`MICROSECOND`\n`MILLISECOND`\n`SECOND`\n`MINUTE`\n`HOUR`\n`DAY`\n`WEEK`. Equivalent to 7 `DAY` s.\n`MONTH`\n`QUARTER`\n`YEAR`Special handling is required for `MONTH`, `QUARTER`, and `YEAR` parts when the\ndate is at (or near) the last day of the month. If the resulting month has fewer\ndays than the original `DATETIME`'s day, then the result day is the last day of\nthe new month.",
		ExampleSQLs: []string{
			"SELECT\n  DATETIME \"2008-12-25 15:30:00\" as original_date,\n  DATETIME_SUB(DATETIME \"2008-12-25 15:30:00\", INTERVAL 10 MINUTE) as earlier;\n\n/*-----------------------------+------------------------*\n | original_date               | earlier                |\n +-----------------------------+------------------------+\n | 2008-12-25T15:30:00         | 2008-12-25T15:20:00    |\n *-----------------------------+------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime_sub",
	},
	{
		Name:        "DATETIME_TRUNC",
		Method:      "DATETIME_TRUNC(datetime_value, datetime_granularity)",
		Description: "Truncates a `DATETIME` or `TIMESTAMP` value at a particular granularity.",
		ExampleSQLs: []string{
			"SELECT\n  DATETIME \"2008-12-25 15:30:00\" as original,\n  DATETIME_TRUNC(DATETIME \"2008-12-25 15:30:00\", DAY) as truncated;\n\n/*----------------------------+------------------------*\n | original                   | truncated              |\n +----------------------------+------------------------+\n | 2008-12-25T15:30:00        | 2008-12-25T00:00:00    |\n *----------------------------+------------------------*/",
			"SELECT\n datetime AS original,\n DATETIME_TRUNC(datetime, WEEK(MONDAY)) AS truncated\nFROM (SELECT DATETIME(TIMESTAMP \"2017-11-05 00:00:00+00\", \"UTC\") AS datetime);\n\n/*---------------------+---------------------*\n | original            | truncated           |\n +---------------------+---------------------+\n | 2017-11-05T00:00:00 | 2017-10-30T00:00:00 |\n *---------------------+---------------------*/",
			"SELECT\n  DATETIME_TRUNC('2015-06-15 00:00:00', ISOYEAR) AS isoyear_boundary,\n  EXTRACT(ISOYEAR FROM DATETIME '2015-06-15 00:00:00') AS isoyear_number;\n\n/*---------------------+----------------*\n | isoyear_boundary    | isoyear_number |\n +---------------------+----------------+\n | 2014-12-29T00:00:00 | 2015           |\n *---------------------+----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#datetime_trunc",
	},
	{
		Name:        "EXTRACT",
		Method:      "EXTRACT(part FROM datetime_expression)",
		Description: "Returns a value that corresponds to the\nspecified `part` from a supplied `datetime_expression`.Allowed `part` values are:`MICROSECOND`\n`MILLISECOND`\n`SECOND`\n`MINUTE`\n`HOUR`\n`DAYOFWEEK`: Returns values in the range \\[1,7\\] with Sunday as the first day of\nof the week.\n`DAY`\n`DAYOFYEAR`\n`WEEK`: Returns the week number of the date in the range \\[0, 53\\]. Weeks begin\nwith Sunday, and dates prior to the first Sunday of the year are in week 0.\n`WEEK(<WEEKDAY>)`: Returns the week number of `datetime_expression` in the\nrange \\[0, 53\\]. Weeks begin on `WEEKDAY`.\n`datetime` s prior to the first `WEEKDAY` of the year are in week 0. Valid\nvalues for `WEEKDAY` are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`,\n`THURSDAY`, `FRIDAY`, and `SATURDAY`.\n`ISOWEEK`: Returns the [ISO 8601 week](https://en.wikipedia.org/wiki/ISO_week_date)\nnumber of the `datetime_expression`. `ISOWEEK` s begin on Monday. Return values\nare in the range \\[1, 53\\]. The first `ISOWEEK` of each ISO year begins on the\nMonday before the first Thursday of the Gregorian calendar year.\n`MONTH`\n`QUARTER`\n`YEAR`\n`ISOYEAR`: Returns the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\nweek-numbering year, which is the Gregorian calendar year containing the\nThursday of the week to which `date_expression` belongs.\n`DATE`\n`TIME`Returned values truncate lower order time periods. For example, when extracting\nseconds, `EXTRACT` truncates the millisecond and microsecond values.",
		ExampleSQLs: []string{
			"SELECT EXTRACT(HOUR FROM DATETIME(2008, 12, 25, 15, 30, 00)) as hour;\n\n/*------------------*\n | hour             |\n +------------------+\n | 15               |\n *------------------*/",
			"WITH Datetimes AS (\n  SELECT DATETIME '2005-01-03 12:34:56' AS datetime UNION ALL\n  SELECT DATETIME '2007-12-31' UNION ALL\n  SELECT DATETIME '2009-01-01' UNION ALL\n  SELECT DATETIME '2009-12-31' UNION ALL\n  SELECT DATETIME '2017-01-02' UNION ALL\n  SELECT DATETIME '2017-05-26'\n)\nSELECT\n  datetime,\n  EXTRACT(ISOYEAR FROM datetime) AS isoyear,\n  EXTRACT(ISOWEEK FROM datetime) AS isoweek,\n  EXTRACT(YEAR FROM datetime) AS year,\n  EXTRACT(WEEK FROM datetime) AS week\nFROM Datetimes\nORDER BY datetime;\n\n/*---------------------+---------+---------+------+------*\n | datetime            | isoyear | isoweek | year | week |\n +---------------------+---------+---------+------+------+\n | 2005-01-03T12:34:56 | 2005    | 1       | 2005 | 1    |\n | 2007-12-31T00:00:00 | 2008    | 1       | 2007 | 52   |\n | 2009-01-01T00:00:00 | 2009    | 1       | 2009 | 0    |\n | 2009-12-31T00:00:00 | 2009    | 53      | 2009 | 52   |\n | 2017-01-02T00:00:00 | 2017    | 1       | 2017 | 1    |\n | 2017-05-26T00:00:00 | 2017    | 21      | 2017 | 21   |\n *---------------------+---------+---------+------+------*/",
			"WITH table AS (SELECT DATETIME(TIMESTAMP \"2017-11-05 00:00:00+00\", \"UTC\") AS datetime)\nSELECT\n  datetime,\n  EXTRACT(WEEK(SUNDAY) FROM datetime) AS week_sunday,\n  EXTRACT(WEEK(MONDAY) FROM datetime) AS week_monday\nFROM table;\n\n/*---------------------+-------------+---------------*\n | datetime            | week_sunday | week_monday   |\n +---------------------+-------------+---------------+\n | 2017-11-05T00:00:00 | 45          | 44            |\n *---------------------+-------------+---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#extract",
	},
	{
		Name:        "FORMAT_DATETIME",
		Method:      "FORMAT_DATETIME(format_string, datetime_expr)",
		Description: "Formats a `DATETIME` value according to a specified format string.",
		ExampleSQLs: []string{
			"SELECT\n  FORMAT_DATETIME(\"%c\", DATETIME \"2008-12-25 15:30:00\")\n  AS formatted;\n\n/*--------------------------*\n | formatted                |\n +--------------------------+\n | Thu Dec 25 15:30:00 2008 |\n *--------------------------*/",
			"SELECT\n  FORMAT_DATETIME(\"%b-%d-%Y\", DATETIME \"2008-12-25 15:30:00\")\n  AS formatted;\n\n/*-------------*\n | formatted   |\n +-------------+\n | Dec-25-2008 |\n *-------------*/",
			"SELECT\n  FORMAT_DATETIME(\"%b %Y\", DATETIME \"2008-12-25 15:30:00\")\n  AS formatted;\n\n/*-------------*\n | formatted   |\n +-------------+\n | Dec 2008    |\n *-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#format_datetime",
	},
	{
		Name:        "LAST_DAY",
		Method:      "LAST_DAY(datetime_expression[, date_part])",
		Description: "Returns the last day from a datetime expression that contains the date.\nThis is commonly used to return the last day of the month.You can optionally specify the date part for which the last day is returned.\nIf this parameter isn't used, the default value is `MONTH`.\n`LAST_DAY` supports the following values for `date_part`:`YEAR`\n`QUARTER`\n`MONTH`\n`WEEK`. Equivalent to 7 `DAY` s.\n`WEEK(<WEEKDAY>)`. `<WEEKDAY>` represents the starting day of the week.\nValid values are `SUNDAY`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`,\n`FRIDAY`, and `SATURDAY`.\n`ISOWEEK`. Uses [ISO 8601](https://en.wikipedia.org/wiki/ISO_week_date) week boundaries. ISO weeks begin\non Monday.\n`ISOYEAR`. Uses the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) week-numbering year boundary.\nThe ISO year boundary is the Monday of the first week whose Thursday belongs\nto the corresponding Gregorian calendar year.",
		ExampleSQLs: []string{
			"SELECT LAST_DAY(DATETIME '2008-11-25', MONTH) AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-11-30 |\n *------------*/",
			"SELECT LAST_DAY(DATETIME '2008-11-25') AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-11-30 |\n *------------*/",
			"SELECT LAST_DAY(DATETIME '2008-11-25 15:30:00', YEAR) AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-12-31 |\n *------------*/",
			"SELECT LAST_DAY(DATETIME '2008-11-10 15:30:00', WEEK(SUNDAY)) AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-11-15 |\n *------------*/",
			"SELECT LAST_DAY(DATETIME '2008-11-10 15:30:00', WEEK(MONDAY)) AS last_day\n\n/*------------*\n | last_day   |\n +------------+\n | 2008-11-16 |\n *------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#last_day",
	},
	{
		Name:        "PARSE_DATETIME",
		Method:      "PARSE_DATETIME(format_string, datetime_string)",
		Description: "Converts a `STRING` value to a `DATETIME` value.",
		ExampleSQLs: []string{
			"SELECT PARSE_DATETIME('%Y-%m-%d %H:%M:%S', '1998-10-18 13:45:55') AS datetime;\n\n/*---------------------*\n | datetime            |\n +---------------------+\n | 1998-10-18T13:45:55 |\n *---------------------*/",
			"SELECT PARSE_DATETIME('%m/%d/%Y %I:%M:%S %p', '8/30/2018 2:23:38 pm') AS datetime;\n\n/*---------------------*\n | datetime            |\n +---------------------+\n | 2018-08-30T14:23:38 |\n *---------------------*/",
			"SELECT PARSE_DATETIME('%A, %B %e, %Y','Wednesday, December 19, 2018')\n  AS datetime;\n\n/*---------------------*\n | datetime            |\n +---------------------+\n | 2018-12-19T00:00:00 |\n *---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions#parse_datetime",
	},
	{
		Name:        "ERROR",
		Method:      "ERROR(error_message)",
		Description: "Returns an error.",
		ExampleSQLs: []string{
			"-- ERROR: Show this error message (while evaluating error(\"Show this error message\"))\nSELECT ERROR('Show this error message')",
			"SELECT\n  CASE\n    WHEN value = 'foo' THEN 'Value is foo.'\n    WHEN value = 'bar' THEN 'Value is bar.'\n    ELSE ERROR(CONCAT('Found unexpected value: ', value))\n  END AS new_value\nFROM (\n  SELECT 'foo' AS value UNION ALL\n  SELECT 'bar' AS value UNION ALL\n  SELECT 'baz' AS value);\n\n-- Found unexpected value: baz",
			"SELECT *\nFROM (SELECT -1 AS x)\nWHERE x > 0 AND ERROR('Example error');",
			"SELECT *\nFROM (SELECT -1 AS x)\nWHERE IF(x > 0, true, ERROR(FORMAT('Error: x must be positive but is %t', x)));\n\n-- Error: x must be positive but is -1",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging_functions#error",
	},
	{
		Name:        "EXTRACT",
		Method:      "EXTRACT(part FROM interval_expression)",
		Description: "Returns the value corresponding to the specified date part. The `part` must be\none of `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, `SECOND`, `MILLISECOND` or\n`MICROSECOND`.",
		ExampleSQLs: []string{
			"SELECT\n  EXTRACT(YEAR FROM i) AS year,\n  EXTRACT(MONTH FROM i) AS month,\n  EXTRACT(DAY FROM i) AS day,\n  EXTRACT(HOUR FROM i) AS hour,\n  EXTRACT(MINUTE FROM i) AS minute,\n  EXTRACT(SECOND FROM i) AS second,\n  EXTRACT(MILLISECOND FROM i) AS milli,\n  EXTRACT(MICROSECOND FROM i) AS micro\nFROM\n  UNNEST([INTERVAL '1-2 3 4:5:6.789999' YEAR TO SECOND,\n          INTERVAL '0-13 370 48:61:61' YEAR TO SECOND]) AS i\n\n/*------+-------+-----+------+--------+--------+-------+--------*\n | year | month | day | hour | minute | second | milli | micro  |\n +------+-------+-----+------+--------+--------+-------+--------+\n | 1    | 2     | 3   | 4    | 5      | 6      | 789   | 789999 |\n | 1    | 1     | 370 | 49   | 2      | 1      | 0     | 0      |\n *------+-------+-----+------+--------+--------+-------+--------*/",
			"SELECT\n  EXTRACT(HOUR FROM i) AS hour,\n  EXTRACT(MINUTE FROM i) AS minute\nFROM\n  UNNEST([INTERVAL '10 -12:30' DAY TO MINUTE]) AS i\n\n/*------+--------*\n | hour | minute |\n +------+--------+\n | -12  | -30    |\n *------+--------*/",
			"SELECT\n  EXTRACT(YEAR FROM i) AS year,\n  EXTRACT(MONTH FROM i) AS month\nFROM\n  UNNEST([INTERVAL '-22-6 10 -12:30' YEAR TO MINUTE]) AS i\n\n/*------+--------*\n | year | month  |\n +------+--------+\n | -22  | -6     |\n *------+--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions#extract",
	},
	{
		Name:        "JUSTIFY_DAYS",
		Method:      "JUSTIFY_DAYS(interval_expression)",
		Description: "Normalizes the day part of the interval to the range from -29 to 29 by\nincrementing/decrementing the month or year part of the interval.",
		ExampleSQLs: []string{
			"SELECT\n  JUSTIFY_DAYS(INTERVAL 29 DAY) AS i1,\n  JUSTIFY_DAYS(INTERVAL -30 DAY) AS i2,\n  JUSTIFY_DAYS(INTERVAL 31 DAY) AS i3,\n  JUSTIFY_DAYS(INTERVAL -65 DAY) AS i4,\n  JUSTIFY_DAYS(INTERVAL 370 DAY) AS i5\n\n/*--------------+--------------+-------------+---------------+--------------*\n | i1           | i2           | i3          | i4            | i5           |\n +--------------+--------------+-------------+---------------+--------------+\n | 0-0 29 0:0:0 | -0-1 0 0:0:0 | 0-1 1 0:0:0 | -0-2 -5 0:0:0 | 1-0 10 0:0:0 |\n *--------------+--------------+-------------+---------------+--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions#justify_days",
	},
	{
		Name:        "JUSTIFY_HOURS",
		Method:      "JUSTIFY_HOURS(interval_expression)",
		Description: "Normalizes the time part of the interval to the range from -23:59:59.999999 to\n23:59:59.999999 by incrementing/decrementing the day part of the interval.",
		ExampleSQLs: []string{
			"SELECT\n  JUSTIFY_HOURS(INTERVAL 23 HOUR) AS i1,\n  JUSTIFY_HOURS(INTERVAL -24 HOUR) AS i2,\n  JUSTIFY_HOURS(INTERVAL 47 HOUR) AS i3,\n  JUSTIFY_HOURS(INTERVAL -12345 MINUTE) AS i4\n\n/*--------------+--------------+--------------+-----------------*\n | i1           | i2           | i3           | i4              |\n +--------------+--------------+--------------+-----------------+\n | 0-0 0 23:0:0 | 0-0 -1 0:0:0 | 0-0 1 23:0:0 | 0-0 -8 -13:45:0 |\n *--------------+--------------+--------------+-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions#justify_hours",
	},
	{
		Name:        "JUSTIFY_INTERVAL",
		Method:      "JUSTIFY_INTERVAL(interval_expression)",
		Description: "Normalizes the days and time parts of the interval.",
		ExampleSQLs: []string{
			"SELECT JUSTIFY_INTERVAL(INTERVAL '29 49:00:00' DAY TO SECOND) AS i\n\n/*-------------*\n | i           |\n +-------------+\n | 0-1 1 1:0:0 |\n *-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions#justify_interval",
	},
	{
		Name:        "MAKE_INTERVAL",
		Method:      "MAKE_INTERVAL(\n  [ [ year => ] value ]\n  [, [ month => ] value ]\n  [, [ day => ] value ]\n  [, [ hour => ] value ]\n  [, [ minute => ] value ]\n  [, [ second => ] value ]\n)",
		Description: "Constructs an [`INTERVAL`](/bigquery/docs/reference/standard-sql/data-types#interval_type) object using `INT64` values\nrepresenting the year, month, day, hour, minute, and second. All arguments are\noptional, `0` by default, and can be [named arguments](https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-reference#named_arguments).",
		ExampleSQLs: []string{
			"SELECT\n  MAKE_INTERVAL(1, 6, 15) AS i1,\n  MAKE_INTERVAL(hour => 10, second => 20) AS i2,\n  MAKE_INTERVAL(1, minute => 5, day => 2) AS i3\n\n/*--------------+---------------+-------------*\n | i1           | i2            | i3          |\n +--------------+---------------+-------------+\n | 1-6 15 0:0:0 | 0-0 0 10:0:20 | 1-0 2 0:5:0 |\n *--------------+---------------+-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions#make_interval",
	},
	{
		Name:        "JSON_QUERY",
		Method:      "JSON_QUERY(json_string_expr, json_path)",
		Description: "Extracts a JSON value and converts it to a SQL\nJSON-formatted `STRING` or\n`JSON` value.\nThis function uses double quotes to escape invalid\n[JSONPath](#JSONPath_format) characters in JSON keys. For example: `\"a.b\"`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\nExtracts a SQL `NULL` when a JSON-formatted string `null` is encountered.\nFor example:\n\n```\nSELECT JSON_QUERY(\"null\", \"$\") -- Returns a SQL NULL\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\nExtracts a JSON `null` when a JSON `null` is encountered.\n\n```\nSELECT JSON_QUERY(JSON 'null', \"$\") -- Returns a JSON 'null'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input. This function\nlets you [specify a mode](#JSONPath_mode) for the JSONPath.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).",
		ExampleSQLs: []string{
			"SELECT\n  JSON_QUERY(\n    JSON '{\"class\": {\"students\": [{\"id\": 5}, {\"id\": 12}]}}',\n    '$.class') AS json_data;\n\n/*-----------------------------------*\n | json_data                         |\n +-----------------------------------+\n | {\"students\":[{\"id\":5},{\"id\":12}]} |\n *-----------------------------------*/",
			"SELECT\n  JSON_QUERY('{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}', '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[{\"name\":\"Jane\"}]}}                  |\n *-----------------------------------------------------------*/",
			"SELECT JSON_QUERY('{\"class\": {\"students\": []}}', '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[]}}                                 |\n *-----------------------------------------------------------*/",
			"SELECT\n  JSON_QUERY(\n    '{\"class\": {\"students\": [{\"name\": \"John\"},{\"name\": \"Jamie\"}]}}',\n    '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[{\"name\":\"John\"},{\"name\":\"Jamie\"}]}} |\n *-----------------------------------------------------------*/",
			"SELECT\n  JSON_QUERY(\n    '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}',\n    '$.class.students[0]') AS first_student;\n\n/*-----------------*\n | first_student   |\n +-----------------+\n | {\"name\":\"Jane\"} |\n *-----------------*/",
			"SELECT\n  JSON_QUERY('{\"class\": {\"students\": []}}', '$.class.students[0]') AS first_student;\n\n/*-----------------*\n | first_student   |\n +-----------------+\n | NULL            |\n *-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_query",
	},
	{
		Name:        "JSON_EXTRACT",
		Method:      "",
		Description: "Extracts a JSON value and converts it to a\nSQL JSON-formatted `STRING` or `JSON` value.\nThis function uses single quotes and brackets to escape invalid\n[JSONPath](#JSONPath_format) characters in JSON keys. For example: `['a.b']`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\nExtracts a SQL `NULL` when a JSON-formatted string `null` is encountered.\nFor example:\n\n```\nSELECT JSON_EXTRACT(\"null\", \"$\") -- Returns a SQL NULL\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\nExtracts a JSON `null` when a JSON `null` is encountered.\n\n```\nSELECT JSON_EXTRACT(JSON 'null', \"$\") -- Returns a JSON 'null'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).",
		ExampleSQLs: []string{
			"SELECT\n  JSON_EXTRACT(JSON '{\"class\": {\"students\": [{\"id\": 5}, {\"id\": 12}]}}', '$.class')\n  AS json_data;\n\n/*-----------------------------------*\n | json_data                         |\n +-----------------------------------+\n | {\"students\":[{\"id\":5},{\"id\":12}]} |\n *-----------------------------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}',\n  '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[{\"name\":\"Jane\"}]}}                  |\n *-----------------------------------------------------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": []}}',\n  '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[]}}                                 |\n *-----------------------------------------------------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": [{\"name\": \"John\"}, {\"name\": \"Jamie\"}]}}',\n  '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[{\"name\":\"John\"},{\"name\":\"Jamie\"}]}} |\n *-----------------------------------------------------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}',\n  '$.class.students[0]') AS first_student;\n\n/*-----------------*\n | first_student   |\n +-----------------+\n | {\"name\":\"Jane\"} |\n *-----------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": []}}',\n  '$.class.students[0]') AS first_student;\n\n/*-----------------*\n | first_student   |\n +-----------------+\n | NULL            |\n *-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_extract",
	},
	{
		Name:        "LAX_BOOL",
		Method:      "LAX_BOOL(json_expr)",
		Description: "Attempts to convert a JSON value to a SQL `BOOL` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON 'true'\n\n```Details:If `json_expr` is SQL `NULL`, the function returns SQL `NULL`.\nSee the conversion rules in the next section for additional `NULL` handling.",
		ExampleSQLs: []string{
			"SELECT LAX_BOOL(JSON 'true') AS result;\n\n/*--------*\n | result |\n +--------+\n | true   |\n *--------*/",
			"SELECT LAX_BOOL(JSON '\"true\"') AS result;\n\n/*--------*\n | result |\n +--------+\n | TRUE   |\n *--------*/",
			"SELECT LAX_BOOL(JSON '\"true \"') AS result;\n\n/*--------*\n | result |\n +--------+\n | NULL   |\n *--------*/",
			"SELECT LAX_BOOL(JSON '\"foo\"') AS result;\n\n/*--------*\n | result |\n +--------+\n | NULL   |\n *--------*/",
			"SELECT LAX_BOOL(JSON '10') AS result;\n\n/*--------*\n | result |\n +--------+\n | TRUE   |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#lax_bool",
	},
	{
		Name:        "BOOL",
		Method:      "BOOL(json_expr)",
		Description: "Converts a JSON boolean to a SQL `BOOL` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON 'true'\n\n```\n\nIf the JSON value isn't a boolean, an error is produced. If the expression\nis SQL `NULL`, the function returns SQL `NULL`.",
		ExampleSQLs: []string{
			"SELECT BOOL(JSON 'true') AS vacancy;\n\n/*---------*\n | vacancy |\n +---------+\n | true    |\n *---------*/",
			"SELECT BOOL(JSON_QUERY(JSON '{\"hotel class\": \"5-star\", \"vacancy\": true}', \"$.vacancy\")) AS vacancy;\n\n/*---------*\n | vacancy |\n +---------+\n | true    |\n *---------*/",
			"-- An error is thrown if JSON isn't of type bool.\nSELECT BOOL(JSON '123') AS result; -- Throws an error\nSELECT BOOL(JSON 'null') AS result; -- Throws an error\nSELECT SAFE.BOOL(JSON '123') AS result; -- Returns a SQL NULL",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#bool",
	},
	{
		Name:        "PARSE_JSON",
		Method:      "PARSE_JSON(\n  json_string_expr\n  [, wide_number_mode => { 'exact' | 'round' } ]\n)",
		Description: "Converts a JSON-formatted `STRING` value to a [`JSON` value](https://www.json.org/json-en.html).Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\n`wide_number_mode`: A named argument with a `STRING` value. Determines\nhow to handle numbers that can't be stored in a `JSON` value without the\nloss of precision. If used, `wide_number_mode` must include one of the\nfollowing values:\n\n- `exact` (default): Only accept numbers that can be stored without loss\n  of precision. If a number that can't be stored without loss of\n  precision is encountered, the function throws an error.\n- `round`: If a number that can't be stored without loss of precision is\n  encountered, attempt to round it to a number that can be stored without\n  loss of precision. If the number can't be rounded, the function throws\n  an error.\n\nIf a number appears in a JSON object or array, the `wide_number_mode`\nargument is applied to the number in the object or array.Numbers from the following domains can be stored in JSON without loss of\nprecision:64-bit signed/unsigned integers, such as `INT64`\n`FLOAT64`",
		ExampleSQLs: []string{
			"SELECT PARSE_JSON('{\"coordinates\": [10, 20], \"id\": 1}') AS json_data;\n\n/*--------------------------------*\n | json_data                      |\n +--------------------------------+\n | {\"coordinates\":[10,20],\"id\":1} |\n *--------------------------------*/",
			"SELECT PARSE_JSON('{\"id\": 922337203685477580701}') AS json_data; -- fails\nSELECT PARSE_JSON('{\"id\": 922337203685477580701}', wide_number_mode=>'exact') AS json_data; -- fails",
			"SELECT PARSE_JSON('{\"id\": 922337203685477580701}', wide_number_mode=>'round') AS json_data;\n\n/*------------------------------*\n | json_data                    |\n +------------------------------+\n | {\"id\":9.223372036854776e+20} |\n *------------------------------*/",
			"SELECT PARSE_JSON('6') AS json_data;\n\n/*------------------------------*\n | json_data                    |\n +------------------------------+\n | 6                            |\n *------------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#parse_json",
	},
	{
		Name:        "JSON_ARRAY",
		Method:      "JSON_ARRAY([value][, ...])",
		Description: "Creates a JSON array from zero or more SQL values.Arguments:`value`: A [JSON encoding-supported](#json_encodings) value to add\nto a JSON array.",
		ExampleSQLs: []string{
			"SELECT JSON_ARRAY(10) AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | [10]      |\n *-----------*/",
			"SELECT JSON_ARRAY([]) AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | [[]]      |\n *-----------*/",
			"SELECT JSON_ARRAY(10, 'foo', NULL) AS json_data\n\n/*-----------------*\n | json_data       |\n +-----------------+\n | [10,\"foo\",null] |\n *-----------------*/",
			"SELECT JSON_ARRAY(STRUCT(10 AS a, 'foo' AS b)) AS json_data\n\n/*----------------------*\n | json_data            |\n +----------------------+\n | [{\"a\":10,\"b\":\"foo\"}] |\n *----------------------*/",
			"SELECT JSON_ARRAY(10, ['foo', 'bar'], [20, 30]) AS json_data\n\n/*----------------------------*\n | json_data                  |\n +----------------------------+\n | [10,[\"foo\",\"bar\"],[20,30]] |\n *----------------------------*/",
			"SELECT JSON_ARRAY(10, [JSON '20', JSON '\"foo\"']) AS json_data\n\n/*-----------------*\n | json_data       |\n +-----------------+\n | [10,[20,\"foo\"]] |\n *-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_array",
	},
	{
		Name:        "JSON_ARRAY_APPEND",
		Method:      "JSON_ARRAY_APPEND(\n  json_expr,\n  json_path_value_pair[, ...]\n  [, append_each_element => { TRUE | FALSE } ]\n)\n\njson_path_value_pair:\n  json_path, value",
		Description: "```\nSELECT JSON_ARRAY_APPEND(JSON '[\"a\", \"b\", \"c\"]', '$', 1) AS json_data\n\n/*-----------------*\n | json_data       |\n +-----------------+\n | [\"a\",\"b\",\"c\",1] |\n *-----------------*/\n\n```In the following example, `append_each_element` defaults to `TRUE`, so\n`[1, 2]` is appended as individual elements.```\nSELECT JSON_ARRAY_APPEND(JSON '[\"a\", \"b\", \"c\"]', '$', [1, 2]) AS json_data\n\n/*-------------------*\n | json_data         |\n +-------------------+\n | [\"a\",\"b\",\"c\",1,2] |\n *-------------------*/\n\n```In the following example, `append_each_element` is `FALSE`, so\n`[1, 2]` is appended as one element.```\nSELECT JSON_ARRAY_APPEND(\n  JSON '[\"a\", \"b\", \"c\"]',\n  '$', [1, 2],\n  append_each_element=>FALSE) AS json_data\n\n/*---------------------*\n | json_data           |\n +---------------------+\n | [\"a\",\"b\",\"c\",[1,2]] |\n *---------------------*/\n\n```In the following example, `append_each_element` is `FALSE`, so\n`[1, 2]` and `[3, 4]` are each appended as one element.```\nSELECT JSON_ARRAY_APPEND(\n  JSON '[\"a\", [\"b\"], \"c\"]',\n  '$[1]', [1, 2],\n  '$[1][1]', [3, 4],\n  append_each_element=>FALSE) AS json_data\n\n/*-----------------------------*\n | json_data                   |\n +-----------------------------+\n | [\"a\",[\"b\",[1,2,[3,4]]],\"c\"] |\n *-----------------------------*/\n\n```",
		ExampleSQLs: []string{
			"SELECT JSON_ARRAY_APPEND(JSON '{\"a\": 1}', '$.a', 2) AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | {\"a\":1}   |\n *-----------*/",
			"SELECT JSON_ARRAY_APPEND(JSON '{\"a\": 1}', '$.b', 2) AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | {\"a\":1}   |\n *-----------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_array_append",
	},
	{
		Name:        "JSON_KEYS",
		Method:      "Note: To provide feedback or request support for this feature, send an email to\nbigquery-sql-preview-support@google.com.",
		Description: "Extracts unique JSON keys from a JSON expression.Arguments:`json_expr`: `JSON`. For example:\n\n```\nJSON '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\n`max_depth`: An `INT64` value that represents the maximum depth of nested\nfields to search in `json_expr`.\n\n`mode`: A named argument with a `STRING` value that can be one of the\nfollowing:\n\n- `strict` (default): Ignore any key that appears in an array.\n- `lax`: Also include keys contained in non-consecutively nested arrays.\n- `lax recursive`: Return all keys.Details:Keys are de-duplicated and returned in alphabetical order.\nKeys don't include array indices.\nKeys containing special characters are escaped using double quotes.\nKeys are case sensitive and not normalized.\nIf `json_expr` or `mode` is SQL `NULL`, the function returns SQL `NULL`.\nIf `max_depth` is SQL `NULL`, the function ignores the argument.\nIf `max_depth` is less than or equal to 0, then an error is returned.",
		ExampleSQLs: []string{
			"SELECT JSON_KEYS(JSON '{\"a\": {\"b\":1}}') AS json_keys\n\n/*-----------*\n | json_keys |\n *-----------*\n | [a, a.b]  |\n *-----------*/",
			"SELECT JSON_KEYS(JSON '{\"a\": {\"b\":1}}', 1) AS json_keys\n\n/*-----------*\n | json_keys |\n *-----------*\n | [a]       |\n *-----------*/",
			"SELECT JSON_KEYS(JSON '{\"a\":[{\"b\":1}, {\"c\":2}], \"d\":3}') AS json_keys\n\n/*-----------*\n | json_keys |\n *-----------*\n | [a, d]    |\n *-----------*/",
			"SELECT JSON_KEYS(\n  JSON '{\"a\":[{\"b\":1}, {\"c\":2}], \"d\":3}',\n  mode => \"lax\") as json_keys\n\n/*------------------*\n | json_keys        |\n *------------------*\n | [a, a.b, a.c, d] |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_keys",
	},
	{
		Name:        "BOOL",
		Method:      "BOOL(json_expr)",
		Description: "Converts a JSON boolean to a SQL `BOOL` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON 'true'\n\n```\n\nIf the JSON value isn't a boolean, an error is produced. If the expression\nis SQL `NULL`, the function returns SQL `NULL`.",
		ExampleSQLs: []string{
			"SELECT BOOL(JSON 'true') AS vacancy;\n\n/*---------*\n | vacancy |\n +---------+\n | true    |\n *---------*/",
			"SELECT BOOL(JSON_QUERY(JSON '{\"hotel class\": \"5-star\", \"vacancy\": true}', \"$.vacancy\")) AS vacancy;\n\n/*---------*\n | vacancy |\n +---------+\n | true    |\n *---------*/",
			"-- An error is thrown if JSON isn't of type bool.\nSELECT BOOL(JSON '123') AS result; -- Throws an error\nSELECT BOOL(JSON 'null') AS result; -- Throws an error\nSELECT SAFE.BOOL(JSON '123') AS result; -- Returns a SQL NULL",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#bool",
	},
	{
		Name:        "FLOAT64",
		Method:      "FLOAT64(\n  json_expr\n  [, wide_number_mode => { 'exact' | 'round' } ]\n)",
		Description: "Converts a JSON number to a SQL `FLOAT64` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '9.8'\n\n```\n\nIf the JSON value isn't a number, an error is produced. If the expression\nis a SQL `NULL`, the function returns SQL `NULL`.\n\n`wide_number_mode`: A named argument with a `STRING` value.\nDefines what happens with a number that can't be\nrepresented as a `FLOAT64` without loss of\nprecision. This argument accepts one of the two case-sensitive values:\n\n- `exact`: The function fails if the result can't be represented as a\n  `FLOAT64` without loss of precision.\n- `round` (default): The numeric value stored in JSON will be rounded to\n  `FLOAT64`. If such rounding isn't possible,\n  the function fails.",
		ExampleSQLs: []string{
			"SELECT FLOAT64(JSON '9.8') AS velocity;\n\n/*----------*\n | velocity |\n +----------+\n | 9.8      |\n *----------*/",
			"SELECT FLOAT64(JSON_QUERY(JSON '{\"vo2_max\": 39.1, \"age\": 18}', \"$.vo2_max\")) AS vo2_max;\n\n/*---------*\n | vo2_max |\n +---------+\n | 39.1    |\n *---------*/",
			"SELECT FLOAT64(JSON '18446744073709551615', wide_number_mode=>'round') as result;\n\n/*------------------------*\n | result                 |\n +------------------------+\n | 1.8446744073709552e+19 |\n *------------------------*/",
			"SELECT FLOAT64(JSON '18446744073709551615') as result;\n\n/*------------------------*\n | result                 |\n +------------------------+\n | 1.8446744073709552e+19 |\n *------------------------*/",
			"-- An error is thrown if JSON isn't of type FLOAT64.\nSELECT FLOAT64(JSON '\"strawberry\"') AS result;\nSELECT FLOAT64(JSON 'null') AS result;\n\n-- An error is thrown because `wide_number_mode` is case-sensitive and not \"exact\" or \"round\".\nSELECT FLOAT64(JSON '123.4', wide_number_mode=>'EXACT') as result;\nSELECT FLOAT64(JSON '123.4', wide_number_mode=>'exac') as result;\n\n-- An error is thrown because the number can't be converted to DOUBLE without loss of precision\nSELECT FLOAT64(JSON '18446744073709551615', wide_number_mode=>'exact') as result;\n\n-- Returns a SQL NULL\nSELECT SAFE.FLOAT64(JSON '\"strawberry\"') AS result;",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#float64",
	},
	{
		Name:        "INT64",
		Method:      "INT64(json_expr)",
		Description: "Converts a JSON number to a SQL `INT64` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '999'\n\n```\n\nIf the JSON value isn't a number, or the JSON number isn't in the SQL\n`INT64` domain, an error is produced. If the expression is SQL `NULL`, the\nfunction returns SQL `NULL`.",
		ExampleSQLs: []string{
			"SELECT INT64(JSON '2005') AS flight_number;\n\n/*---------------*\n | flight_number |\n +---------------+\n | 2005          |\n *---------------*/",
			"SELECT INT64(JSON_QUERY(JSON '{\"gate\": \"A4\", \"flight_number\": 2005}', \"$.flight_number\")) AS flight_number;\n\n/*---------------*\n | flight_number |\n +---------------+\n | 2005          |\n *---------------*/",
			"SELECT INT64(JSON '10.0') AS score;\n\n/*-------*\n | score |\n +-------+\n | 10    |\n *-------*/",
			"-- An error is thrown if JSON isn't a number or can't be converted to a 64-bit integer.\nSELECT INT64(JSON '10.1') AS result;  -- Throws an error\nSELECT INT64(JSON '\"strawberry\"') AS result; -- Throws an error\nSELECT INT64(JSON 'null') AS result; -- Throws an error\nSELECT SAFE.INT64(JSON '\"strawberry\"') AS result;  -- Returns a SQL NULL",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#int64",
	},
	{
		Name:        "JSON_ARRAY",
		Method:      "JSON_ARRAY([value][, ...])",
		Description: "Creates a JSON array from zero or more SQL values.Arguments:`value`: A [JSON encoding-supported](#json_encodings) value to add\nto a JSON array.",
		ExampleSQLs: []string{
			"SELECT JSON_ARRAY(10) AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | [10]      |\n *-----------*/",
			"SELECT JSON_ARRAY([]) AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | [[]]      |\n *-----------*/",
			"SELECT JSON_ARRAY(10, 'foo', NULL) AS json_data\n\n/*-----------------*\n | json_data       |\n +-----------------+\n | [10,\"foo\",null] |\n *-----------------*/",
			"SELECT JSON_ARRAY(STRUCT(10 AS a, 'foo' AS b)) AS json_data\n\n/*----------------------*\n | json_data            |\n +----------------------+\n | [{\"a\":10,\"b\":\"foo\"}] |\n *----------------------*/",
			"SELECT JSON_ARRAY(10, ['foo', 'bar'], [20, 30]) AS json_data\n\n/*----------------------------*\n | json_data                  |\n +----------------------------+\n | [10,[\"foo\",\"bar\"],[20,30]] |\n *----------------------------*/",
			"SELECT JSON_ARRAY(10, [JSON '20', JSON '\"foo\"']) AS json_data\n\n/*-----------------*\n | json_data       |\n +-----------------+\n | [10,[20,\"foo\"]] |\n *-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_array",
	},
	{
		Name:        "JSON_ARRAY_APPEND",
		Method:      "JSON_ARRAY_APPEND(\n  json_expr,\n  json_path_value_pair[, ...]\n  [, append_each_element => { TRUE | FALSE } ]\n)\n\njson_path_value_pair:\n  json_path, value",
		Description: "```\nSELECT JSON_ARRAY_APPEND(JSON '[\"a\", \"b\", \"c\"]', '$', 1) AS json_data\n\n/*-----------------*\n | json_data       |\n +-----------------+\n | [\"a\",\"b\",\"c\",1] |\n *-----------------*/\n\n```In the following example, `append_each_element` defaults to `TRUE`, so\n`[1, 2]` is appended as individual elements.```\nSELECT JSON_ARRAY_APPEND(JSON '[\"a\", \"b\", \"c\"]', '$', [1, 2]) AS json_data\n\n/*-------------------*\n | json_data         |\n +-------------------+\n | [\"a\",\"b\",\"c\",1,2] |\n *-------------------*/\n\n```In the following example, `append_each_element` is `FALSE`, so\n`[1, 2]` is appended as one element.```\nSELECT JSON_ARRAY_APPEND(\n  JSON '[\"a\", \"b\", \"c\"]',\n  '$', [1, 2],\n  append_each_element=>FALSE) AS json_data\n\n/*---------------------*\n | json_data           |\n +---------------------+\n | [\"a\",\"b\",\"c\",[1,2]] |\n *---------------------*/\n\n```In the following example, `append_each_element` is `FALSE`, so\n`[1, 2]` and `[3, 4]` are each appended as one element.```\nSELECT JSON_ARRAY_APPEND(\n  JSON '[\"a\", [\"b\"], \"c\"]',\n  '$[1]', [1, 2],\n  '$[1][1]', [3, 4],\n  append_each_element=>FALSE) AS json_data\n\n/*-----------------------------*\n | json_data                   |\n +-----------------------------+\n | [\"a\",[\"b\",[1,2,[3,4]]],\"c\"] |\n *-----------------------------*/\n\n```",
		ExampleSQLs: []string{
			"SELECT JSON_ARRAY_APPEND(JSON '{\"a\": 1}', '$.a', 2) AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | {\"a\":1}   |\n *-----------*/",
			"SELECT JSON_ARRAY_APPEND(JSON '{\"a\": 1}', '$.b', 2) AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | {\"a\":1}   |\n *-----------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_array_append",
	},
	{
		Name:        "JSON_ARRAY_INSERT",
		Method:      "JSON_ARRAY_INSERT(\n  json_expr,\n  json_path_value_pair[, ...]\n  [, insert_each_element => { TRUE | FALSE } ]\n)\n\njson_path_value_pair:\n  json_path, value",
		Description: "```\nSELECT JSON_ARRAY_INSERT(JSON '[\"a\", [\"b\", \"c\"], \"d\"]', '$[1]', 1) AS json_data\n\n/*-----------------------*\n | json_data             |\n +-----------------------+\n | [\"a\",1,[\"b\",\"c\"],\"d\"] |\n *-----------------------*/\n\n```In the following example, path `$[1][0]` is matched and inserts `1`.```\nSELECT JSON_ARRAY_INSERT(JSON '[\"a\", [\"b\", \"c\"], \"d\"]', '$[1][0]', 1) AS json_data\n\n/*-----------------------*\n | json_data             |\n +-----------------------+\n | [\"a\",[1,\"b\",\"c\"],\"d\"] |\n *-----------------------*/\n\n```In the following example, `insert_each_element` defaults to `TRUE`, so\n`[1, 2]` is inserted as individual elements.```\nSELECT JSON_ARRAY_INSERT(JSON '[\"a\", \"b\", \"c\"]', '$[1]', [1, 2]) AS json_data\n\n/*-------------------*\n | json_data         |\n +-------------------+\n | [\"a\",1,2,\"b\",\"c\"] |\n *-------------------*/\n\n```In the following example, `insert_each_element` is `FALSE`, so `[1, 2]` is\ninserted as one element.```\nSELECT JSON_ARRAY_INSERT(\n  JSON '[\"a\", \"b\", \"c\"]',\n  '$[1]', [1, 2],\n  insert_each_element=>FALSE) AS json_data\n\n/*---------------------*\n | json_data           |\n +---------------------+\n | [\"a\",[1,2],\"b\",\"c\"] |\n *---------------------*/\n\n```",
		ExampleSQLs: []string{
			"SELECT JSON_ARRAY_INSERT(JSON '{\"a\": null}', '$.a[2]', 10) AS json_data\n\n/*----------------------*\n | json_data            |\n +----------------------+\n | {\"a\":[null,null,10]} |\n *----------------------*/",
			"SELECT JSON_ARRAY_INSERT(JSON '1', '$[0]', 'r1') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | 1         |\n *-----------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_array_insert",
	},
	{
		Name:        "JSON_EXTRACT",
		Method:      "",
		Description: "Extracts a JSON value and converts it to a\nSQL JSON-formatted `STRING` or `JSON` value.\nThis function uses single quotes and brackets to escape invalid\n[JSONPath](#JSONPath_format) characters in JSON keys. For example: `['a.b']`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\nExtracts a SQL `NULL` when a JSON-formatted string `null` is encountered.\nFor example:\n\n```\nSELECT JSON_EXTRACT(\"null\", \"$\") -- Returns a SQL NULL\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\nExtracts a JSON `null` when a JSON `null` is encountered.\n\n```\nSELECT JSON_EXTRACT(JSON 'null', \"$\") -- Returns a JSON 'null'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).",
		ExampleSQLs: []string{
			"SELECT\n  JSON_EXTRACT(JSON '{\"class\": {\"students\": [{\"id\": 5}, {\"id\": 12}]}}', '$.class')\n  AS json_data;\n\n/*-----------------------------------*\n | json_data                         |\n +-----------------------------------+\n | {\"students\":[{\"id\":5},{\"id\":12}]} |\n *-----------------------------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}',\n  '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[{\"name\":\"Jane\"}]}}                  |\n *-----------------------------------------------------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": []}}',\n  '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[]}}                                 |\n *-----------------------------------------------------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": [{\"name\": \"John\"}, {\"name\": \"Jamie\"}]}}',\n  '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[{\"name\":\"John\"},{\"name\":\"Jamie\"}]}} |\n *-----------------------------------------------------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}',\n  '$.class.students[0]') AS first_student;\n\n/*-----------------*\n | first_student   |\n +-----------------+\n | {\"name\":\"Jane\"} |\n *-----------------*/",
			"SELECT JSON_EXTRACT(\n  '{\"class\": {\"students\": []}}',\n  '$.class.students[0]') AS first_student;\n\n/*-----------------*\n | first_student   |\n +-----------------+\n | NULL            |\n *-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_extract",
	},
	{
		Name:        "JSON_EXTRACT_ARRAY",
		Method:      "",
		Description: "Extracts a JSON array and converts it to\na SQL `ARRAY<JSON-formatted STRING>` or\n`ARRAY<JSON>` value.\nThis function uses single quotes and brackets to escape invalid\n[JSONPath](#JSONPath_format) characters in JSON keys. For example: `['a.b']`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'[\"a\", \"b\", {\"key\": \"c\"}]'\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '[\"a\", \"b\", {\"key\": \"c\"}]'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input. If this optional parameter isn't\nprovided, then the JSONPath `$` symbol is applied, which means that all of\nthe data is analyzed.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).",
		ExampleSQLs: []string{
			"SELECT JSON_EXTRACT_ARRAY(\n  JSON '{\"fruits\":[\"apples\",\"oranges\",\"grapes\"]}','$.fruits'\n  ) AS json_array;\n\n/*---------------------------------*\n | json_array                      |\n +---------------------------------+\n | [\"apples\", \"oranges\", \"grapes\"] |\n *---------------------------------*/",
			"SELECT JSON_EXTRACT_ARRAY('[1,2,3]') AS string_array;\n\n/*--------------*\n | string_array |\n +--------------+\n | [1, 2, 3]    |\n *--------------*/",
			"SELECT ARRAY(\n  SELECT CAST(integer_element AS INT64)\n  FROM UNNEST(\n    JSON_EXTRACT_ARRAY('[1,2,3]','$')\n  ) AS integer_element\n) AS integer_array;\n\n/*---------------*\n | integer_array |\n +---------------+\n | [1, 2, 3]     |\n *---------------*/",
			"-- Doesn't strip the double quotes\nSELECT JSON_EXTRACT_ARRAY('[\"apples\", \"oranges\", \"grapes\"]', '$') AS string_array;\n\n/*---------------------------------*\n | string_array                    |\n +---------------------------------+\n | [\"apples\", \"oranges\", \"grapes\"] |\n *---------------------------------*/\n\n-- Strips the double quotes\nSELECT ARRAY(\n  SELECT JSON_EXTRACT_SCALAR(string_element, '$')\n  FROM UNNEST(JSON_EXTRACT_ARRAY('[\"apples\",\"oranges\",\"grapes\"]','$')) AS string_element\n) AS string_array;\n\n/*---------------------------*\n | string_array              |\n +---------------------------+\n | [apples, oranges, grapes] |\n *---------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_extract_array",
	},
	{
		Name:        "JSON_EXTRACT_SCALAR",
		Method:      "",
		Description: "Extracts a JSON scalar value and converts it to a SQL `STRING` value.\nIn addition, this function:Removes the outermost quotes and unescapes the return values.\nReturns a SQL `NULL` if a non-scalar value is selected.\nUses single quotes and brackets to escape invalid [JSONPath](#JSONPath_format)\ncharacters in JSON keys. For example: `['a.b']`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'{\"name\": \"Jane\", \"age\": \"6\"}'\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '{\"name\": \"Jane\", \"age\": \"6\"}'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input. If this optional parameter isn't\nprovided, then the JSONPath `$` symbol is applied, which means that all of\nthe data is analyzed.\n\nIf `json_path` returns a JSON `null` or a non-scalar value (in other words,\nif `json_path` refers to an object or an array), then a SQL `NULL` is\nreturned.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).",
		ExampleSQLs: []string{
			"SELECT JSON_EXTRACT_SCALAR(JSON '{\"name\": \"Jakob\", \"age\": \"6\" }', '$.age') AS scalar_age;\n\n/*------------*\n | scalar_age |\n +------------+\n | 6          |\n *------------*/",
			"SELECT JSON_EXTRACT('{\"name\": \"Jakob\", \"age\": \"6\" }', '$.name') AS json_name,\n  JSON_EXTRACT_SCALAR('{\"name\": \"Jakob\", \"age\": \"6\" }', '$.name') AS scalar_name,\n  JSON_EXTRACT('{\"name\": \"Jakob\", \"age\": \"6\" }', '$.age') AS json_age,\n  JSON_EXTRACT_SCALAR('{\"name\": \"Jakob\", \"age\": \"6\" }', '$.age') AS scalar_age;\n\n/*-----------+-------------+----------+------------*\n | json_name | scalar_name | json_age | scalar_age |\n +-----------+-------------+----------+------------+\n | \"Jakob\"   | Jakob       | \"6\"      | 6          |\n *-----------+-------------+----------+------------*/",
			"SELECT JSON_EXTRACT('{\"fruits\": [\"apple\", \"banana\"]}', '$.fruits') AS json_extract,\n  JSON_EXTRACT_SCALAR('{\"fruits\": [\"apple\", \"banana\"]}', '$.fruits') AS json_extract_scalar;\n\n/*--------------------+---------------------*\n | json_extract       | json_extract_scalar |\n +--------------------+---------------------+\n | [\"apple\",\"banana\"] | NULL                |\n *--------------------+---------------------*/",
			"SELECT JSON_EXTRACT_SCALAR('{\"a.b\": {\"c\": \"world\"}}', \"$['a.b'].c\") AS hello;\n\n/*-------*\n | hello |\n +-------+\n | world |\n *-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_extract_scalar",
	},
	{
		Name:        "JSON_EXTRACT_STRING_ARRAY",
		Method:      "",
		Description: "Extracts a JSON array of scalar values and converts it to a SQL `ARRAY<STRING>`\nvalue. In addition, this function:Removes the outermost quotes and unescapes the values.\nReturns a SQL `NULL` if the selected value isn't an array or\nnot an array containing only scalar values.\nUses single quotes and brackets to escape invalid [JSONPath](#JSONPath_format)\ncharacters in JSON keys. For example: `['a.b']`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'[\"apples\", \"oranges\", \"grapes\"]'\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '[\"apples\", \"oranges\", \"grapes\"]'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input. If this optional parameter isn't\nprovided, then the JSONPath `$` symbol is applied, which means that all of\nthe data is analyzed.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).Caveats:A JSON `null` in the input array produces a SQL `NULL` as the output for that\nJSON `null`. If the output contains a `NULL` array element, an error is\nproduced because the final output can't be an array with `NULL` values.\nIf a JSONPath matches an array that contains scalar objects and a JSON `null`,\nthen the output of the function must be transformed because the final output\ncan't be an array with `NULL` values.",
		ExampleSQLs: []string{
			"SELECT JSON_EXTRACT_STRING_ARRAY(\n  JSON '{\"fruits\": [\"apples\", \"oranges\", \"grapes\"]}', '$.fruits'\n  ) AS string_array;\n\n/*---------------------------*\n | string_array              |\n +---------------------------+\n | [apples, oranges, grapes] |\n *---------------------------*/",
			"SELECT JSON_EXTRACT_ARRAY('[\"apples\", \"oranges\"]') AS json_array,\nJSON_EXTRACT_STRING_ARRAY('[\"apples\", \"oranges\"]') AS string_array;\n\n/*-----------------------+-------------------*\n | json_array            | string_array      |\n +-----------------------+-------------------+\n | [\"apples\", \"oranges\"] | [apples, oranges] |\n *-----------------------+-------------------*/",
			"-- Strips the double quotes\nSELECT JSON_EXTRACT_STRING_ARRAY('[\"foo\", \"bar\", \"baz\"]', '$') AS string_array;\n\n/*-----------------*\n | string_array    |\n +-----------------+\n | [foo, bar, baz] |\n *-----------------*/",
			"SELECT ARRAY(\n  SELECT CAST(integer_element AS INT64)\n  FROM UNNEST(\n    JSON_EXTRACT_STRING_ARRAY('[1, 2, 3]', '$')\n  ) AS integer_element\n) AS integer_array;\n\n/*---------------*\n | integer_array |\n +---------------+\n | [1, 2, 3]     |\n *---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_extract_string_array",
	},
	{
		Name:        "JSON_KEYS",
		Method:      "Note: To provide feedback or request support for this feature, send an email to\nbigquery-sql-preview-support@google.com.",
		Description: "Extracts unique JSON keys from a JSON expression.Arguments:`json_expr`: `JSON`. For example:\n\n```\nJSON '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\n`max_depth`: An `INT64` value that represents the maximum depth of nested\nfields to search in `json_expr`.\n\n`mode`: A named argument with a `STRING` value that can be one of the\nfollowing:\n\n- `strict` (default): Ignore any key that appears in an array.\n- `lax`: Also include keys contained in non-consecutively nested arrays.\n- `lax recursive`: Return all keys.Details:Keys are de-duplicated and returned in alphabetical order.\nKeys don't include array indices.\nKeys containing special characters are escaped using double quotes.\nKeys are case sensitive and not normalized.\nIf `json_expr` or `mode` is SQL `NULL`, the function returns SQL `NULL`.\nIf `max_depth` is SQL `NULL`, the function ignores the argument.\nIf `max_depth` is less than or equal to 0, then an error is returned.",
		ExampleSQLs: []string{
			"SELECT JSON_KEYS(JSON '{\"a\": {\"b\":1}}') AS json_keys\n\n/*-----------*\n | json_keys |\n *-----------*\n | [a, a.b]  |\n *-----------*/",
			"SELECT JSON_KEYS(JSON '{\"a\": {\"b\":1}}', 1) AS json_keys\n\n/*-----------*\n | json_keys |\n *-----------*\n | [a]       |\n *-----------*/",
			"SELECT JSON_KEYS(JSON '{\"a\":[{\"b\":1}, {\"c\":2}], \"d\":3}') AS json_keys\n\n/*-----------*\n | json_keys |\n *-----------*\n | [a, d]    |\n *-----------*/",
			"SELECT JSON_KEYS(\n  JSON '{\"a\":[{\"b\":1}, {\"c\":2}], \"d\":3}',\n  mode => \"lax\") as json_keys\n\n/*------------------*\n | json_keys        |\n *------------------*\n | [a, a.b, a.c, d] |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_keys",
	},
	{
		Name:        "JSON_OBJECT",
		Method:      "Signature 1",
		Description: "Creates a JSON object, using key-value pairs.Arguments:`json_key`: A `STRING` value that represents a key.\n`json_value`: A [JSON encoding-supported](#json_encodings) value.Details:If two keys are passed in with the same name, only the first key-value pair\nis preserved.\nThe order of key-value pairs isn't preserved.\nIf `json_key` is `NULL`, an error is produced.",
		ExampleSQLs: []string{
			"SELECT JSON_OBJECT() AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | {}        |\n *-----------*/",
			"SELECT JSON_OBJECT('foo', 10, 'bar', TRUE) AS json_data\n\n/*-----------------------*\n | json_data             |\n +-----------------------+\n | {\"bar\":true,\"foo\":10} |\n *-----------------------*/",
			"SELECT JSON_OBJECT('foo', 10, 'bar', ['a', 'b']) AS json_data\n\n/*----------------------------*\n | json_data                  |\n +----------------------------+\n | {\"bar\":[\"a\",\"b\"],\"foo\":10} |\n *----------------------------*/",
			"SELECT JSON_OBJECT('a', NULL, 'b', JSON 'null') AS json_data\n\n/*---------------------*\n | json_data           |\n +---------------------+\n | {\"a\":null,\"b\":null} |\n *---------------------*/",
			"SELECT JSON_OBJECT('a', 10, 'a', 'foo') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | {\"a\":10}  |\n *-----------*/",
			"WITH Items AS (SELECT 'hello' AS key, 'world' AS value)\nSELECT JSON_OBJECT(key, value) AS json_data FROM Items\n\n/*-------------------*\n | json_data         |\n +-------------------+\n | {\"hello\":\"world\"} |\n *-------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_object",
	},
	{
		Name:        "JSON_QUERY",
		Method:      "JSON_QUERY(json_string_expr, json_path)",
		Description: "Extracts a JSON value and converts it to a SQL\nJSON-formatted `STRING` or\n`JSON` value.\nThis function uses double quotes to escape invalid\n[JSONPath](#JSONPath_format) characters in JSON keys. For example: `\"a.b\"`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\nExtracts a SQL `NULL` when a JSON-formatted string `null` is encountered.\nFor example:\n\n```\nSELECT JSON_QUERY(\"null\", \"$\") -- Returns a SQL NULL\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\nExtracts a JSON `null` when a JSON `null` is encountered.\n\n```\nSELECT JSON_QUERY(JSON 'null', \"$\") -- Returns a JSON 'null'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input. This function\nlets you [specify a mode](#JSONPath_mode) for the JSONPath.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).",
		ExampleSQLs: []string{
			"SELECT\n  JSON_QUERY(\n    JSON '{\"class\": {\"students\": [{\"id\": 5}, {\"id\": 12}]}}',\n    '$.class') AS json_data;\n\n/*-----------------------------------*\n | json_data                         |\n +-----------------------------------+\n | {\"students\":[{\"id\":5},{\"id\":12}]} |\n *-----------------------------------*/",
			"SELECT\n  JSON_QUERY('{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}', '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[{\"name\":\"Jane\"}]}}                  |\n *-----------------------------------------------------------*/",
			"SELECT JSON_QUERY('{\"class\": {\"students\": []}}', '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[]}}                                 |\n *-----------------------------------------------------------*/",
			"SELECT\n  JSON_QUERY(\n    '{\"class\": {\"students\": [{\"name\": \"John\"},{\"name\": \"Jamie\"}]}}',\n    '$') AS json_text_string;\n\n/*-----------------------------------------------------------*\n | json_text_string                                          |\n +-----------------------------------------------------------+\n | {\"class\":{\"students\":[{\"name\":\"John\"},{\"name\":\"Jamie\"}]}} |\n *-----------------------------------------------------------*/",
			"SELECT\n  JSON_QUERY(\n    '{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}',\n    '$.class.students[0]') AS first_student;\n\n/*-----------------*\n | first_student   |\n +-----------------+\n | {\"name\":\"Jane\"} |\n *-----------------*/",
			"SELECT\n  JSON_QUERY('{\"class\": {\"students\": []}}', '$.class.students[0]') AS first_student;\n\n/*-----------------*\n | first_student   |\n +-----------------+\n | NULL            |\n *-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_query",
	},
	{
		Name:        "JSON_QUERY_ARRAY",
		Method:      "JSON_QUERY_ARRAY(json_string_expr[, json_path])",
		Description: "Extracts a JSON array and converts it to\na SQL `ARRAY<JSON-formatted STRING>` or\n`ARRAY<JSON>` value.\nIn addition, this function uses double quotes to escape invalid\n[JSONPath](#JSONPath_format) characters in JSON keys. For example: `\"a.b\"`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'[\"a\", \"b\", {\"key\": \"c\"}]'\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '[\"a\", \"b\", {\"key\": \"c\"}]'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input. If this optional parameter isn't\nprovided, then the JSONPath `$` symbol is applied, which means that all of\nthe data is analyzed.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).",
		ExampleSQLs: []string{
			"SELECT JSON_QUERY_ARRAY(\n  JSON '{\"fruits\": [\"apples\", \"oranges\", \"grapes\"]}', '$.fruits'\n  ) AS json_array;\n\n/*---------------------------------*\n | json_array                      |\n +---------------------------------+\n | [\"apples\", \"oranges\", \"grapes\"] |\n *---------------------------------*/",
			"SELECT JSON_QUERY_ARRAY('[1, 2, 3]') AS string_array;\n\n/*--------------*\n | string_array |\n +--------------+\n | [1, 2, 3]    |\n *--------------*/",
			"SELECT ARRAY(\n  SELECT CAST(integer_element AS INT64)\n  FROM UNNEST(\n    JSON_QUERY_ARRAY('[1, 2, 3]','$')\n  ) AS integer_element\n) AS integer_array;\n\n/*---------------*\n | integer_array |\n +---------------+\n | [1, 2, 3]     |\n *---------------*/",
			"-- Doesn't strip the double quotes\nSELECT JSON_QUERY_ARRAY('[\"apples\", \"oranges\", \"grapes\"]', '$') AS string_array;\n\n/*---------------------------------*\n | string_array                    |\n +---------------------------------+\n | [\"apples\", \"oranges\", \"grapes\"] |\n *---------------------------------*/",
			"-- Strips the double quotes\nSELECT ARRAY(\n  SELECT JSON_VALUE(string_element, '$')\n  FROM UNNEST(JSON_QUERY_ARRAY('[\"apples\", \"oranges\", \"grapes\"]', '$')) AS string_element\n) AS string_array;\n\n/*---------------------------*\n | string_array              |\n +---------------------------+\n | [apples, oranges, grapes] |\n *---------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_query_array",
	},
	{
		Name:        "JSON_REMOVE",
		Method:      "JSON_REMOVE(json_expr, json_path[, ...])",
		Description: "```\nSELECT JSON_REMOVE(JSON '[\"a\", [\"b\", \"c\"], \"d\"]', '$[1]') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | [\"a\",\"d\"] |\n *-----------*/\n\n```You can use the field access operator to pass JSON data into this function.\nFor example:```\nWITH T AS (SELECT JSON '{\"a\": {\"b\": 10, \"c\": 20}}' AS data)\nSELECT JSON_REMOVE(data.a, '$.b') AS json_data FROM T\n\n/*-----------*\n | json_data |\n +-----------+\n | {\"c\":20}  |\n *-----------*/\n\n```In the following example, the first path `$[1]` is matched and removes\n`[\"b\", \"c\"]`. Then, the second path `$[1]` is matched and removes `\"d\"`.```\nSELECT JSON_REMOVE(JSON '[\"a\", [\"b\", \"c\"], \"d\"]', '$[1]', '$[1]') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | [\"a\"]     |\n *-----------*/\n\n```The structure of an empty array is preserved when all elements are deleted\nfrom it. For example:```\nSELECT JSON_REMOVE(JSON '[\"a\", [\"b\", \"c\"], \"d\"]', '$[1]', '$[1]', '$[0]') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | []        |\n *-----------*/\n\n```",
		ExampleSQLs: []string{
			"SELECT JSON_REMOVE(JSON '{\"a\": [1, 2, 3]}', '$.a[0]', '$.a.b', '$.b', '$.a[0]') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | {\"a\":[3]} |\n *-----------*/",
			"-- Error: The JSONPath can't be '$'\nSELECT JSON_REMOVE(JSON '{}', '$') AS json_data",
			"SELECT JSON_REMOVE(JSON 'null', '$.a.b') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | null      |\n *-----------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_remove",
	},
	{
		Name:        "JSON_SET",
		Method:      "JSON_SET(\n  json_expr,\n  json_path_value_pair[, ...]\n  [, create_if_missing => { TRUE | FALSE } ]\n)\n\njson_path_value_pair:\n  json_path, value",
		Description: "```\nSELECT JSON_SET(JSON '{\"a\": 1}', '$', JSON '{\"b\": 2, \"c\": 3}') AS json_data\n\n/*---------------*\n | json_data     |\n +---------------+\n | {\"b\":2,\"c\":3} |\n *---------------*/\n\n```In the following example, `create_if_missing` is `FALSE` and the path `$.b`\ndoesn't exist, so the set operation is ignored.```\nSELECT JSON_SET(\n  JSON '{\"a\": 1}',\n  \"$.b\", 999,\n  create_if_missing => false) AS json_data\n\n/*------------*\n | json_data  |\n +------------+\n | '{\"a\": 1}' |\n *------------*/\n\n```In the following example, `create_if_missing` is `TRUE` and the path `$.a`\nexists, so the value is replaced.```\nSELECT JSON_SET(\n  JSON '{\"a\": 1}',\n  \"$.a\", 999,\n  create_if_missing => false) AS json_data\n\n/*--------------*\n | json_data    |\n +--------------+\n | '{\"a\": 999}' |\n *--------------*/\n\n```In the following example, the path `$.a` is matched, but `$.a.b` doesn't\nexist, so the new path and the value are inserted.```\nSELECT JSON_SET(JSON '{\"a\": {}}', '$.a.b', 100) AS json_data\n\n/*-----------------*\n | json_data       |\n +-----------------+\n | {\"a\":{\"b\":100}} |\n *-----------------*/\n\n```",
		ExampleSQLs: []string{
			"SELECT JSON_SET(JSON '[\"a\", [\"b\", \"c\"], \"d\"]', '$[1]', \"foo\") AS json_data\n\n/*-----------------*\n | json_data       |\n +-----------------+\n | [\"a\",\"foo\",\"d\"] |\n *-----------------*/",
			"SELECT JSON_SET(JSON '[\"a\", [\"b\", \"c\"], \"d\"]', '$[1][0]', \"foo\") AS json_data\n\n/*-----------------------*\n | json_data             |\n +-----------------------+\n | [\"a\",[\"foo\",\"c\"],\"d\"] |\n *-----------------------*/",
			"SELECT JSON_SET(JSON 'null', '$[0][3]', \"foo\")\n\n/*--------------------------*\n | json_data                |\n +--------------------------+\n | [[null,null,null,\"foo\"]] |\n *--------------------------*/",
			"SELECT JSON_SET(JSON '[\"a\", [\"b\", \"c\"], \"d\"]', '$[1][4]', \"foo\") AS json_data\n\n/*-------------------------------------*\n | json_data                           |\n +-------------------------------------+\n | [\"a\",[\"b\",\"c\",null,null,\"foo\"],\"d\"] |\n *-------------------------------------*/",
			"SELECT JSON_SET(JSON '[\"a\", [\"b\", \"c\"], \"d\"]', '$[1][0][0]', \"foo\") AS json_data\n\n/*---------------------*\n | json_data           |\n +---------------------+\n | [\"a\",[\"b\",\"c\"],\"d\"] |\n *---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_set",
	},
	{
		Name:        "JSON_STRIP_NULLS",
		Method:      "JSON_STRIP_NULLS(\n  json_expr\n  [, json_path ]\n  [, include_arrays => { TRUE | FALSE } ]\n  [, remove_empty => { TRUE | FALSE } ]\n)",
		Description: "```\nSELECT JSON_STRIP_NULLS(JSON '{\"a\": null, \"b\": \"c\"}') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | {\"b\":\"c\"} |\n *-----------*/\n\n```In the following example, all JSON nulls are removed from a JSON array.```\nSELECT JSON_STRIP_NULLS(JSON '[1, null, 2, null]') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | [1,2]     |\n *-----------*/\n\n```In the following example, `include_arrays` is set as `FALSE` so that JSON nulls\naren't removed from JSON arrays.```\nSELECT JSON_STRIP_NULLS(JSON '[1, null, 2, null]', include_arrays=>FALSE) AS json_data\n\n/*-----------------*\n | json_data       |\n +-----------------+\n | [1,null,2,null] |\n *-----------------*/\n\n```In the following example, `remove_empty` is omitted and defaults to\n`FALSE`, and the empty structures are retained.```\nSELECT JSON_STRIP_NULLS(JSON '[1, null, 2, null, [null]]') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | [1,2,[]]  |\n *-----------*/\n\n```",
		ExampleSQLs: []string{
			"SELECT JSON_STRIP_NULLS(\n  JSON '{\"a\": {\"b\": {\"c\": null}}, \"d\": [null], \"e\": [], \"f\": 1}',\n  include_arrays=>FALSE,\n  remove_empty=>TRUE) AS json_data\n\n/*---------------------------*\n | json_data                 |\n +---------------------------+\n | {\"d\":[null],\"e\":[],\"f\":1} |\n *---------------------------*/",
			"SELECT JSON_STRIP_NULLS(\n  JSON '{\"a\": {\"b\": {\"c\": null}}, \"d\": [null], \"e\": [], \"f\": 1}',\n  remove_empty=>TRUE) AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | {\"f\":1}   |\n *-----------*/",
			"SELECT JSON_STRIP_NULLS(JSON 'null') AS json_data\n\n/*-----------*\n | json_data |\n +-----------+\n | null      |\n *-----------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_strip_nulls",
	},
	{
		Name:        "JSON_TYPE",
		Method:      "JSON_TYPE(json_expr)",
		Description: "Gets the JSON type of the outermost JSON value and converts the name of\nthis type to a SQL `STRING` value. The names of these JSON types can be\nreturned: `object`, `array`, `string`, `number`, `boolean`, `null`Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '{\"name\": \"sky\", \"color\": \"blue\"}'\n\n```\n\nIf this expression is SQL `NULL`, the function returns SQL `NULL`. If the\nextracted JSON value isn't a valid JSON type, an error is produced.",
		ExampleSQLs: []string{
			"SELECT json_val, JSON_TYPE(json_val) AS type\nFROM\n  UNNEST(\n    [\n      JSON '\"apple\"',\n      JSON '10',\n      JSON '3.14',\n      JSON 'null',\n      JSON '{\"city\": \"New York\", \"State\": \"NY\"}',\n      JSON '[\"apple\", \"banana\"]',\n      JSON 'false'\n    ]\n  ) AS json_val;\n\n/*----------------------------------+---------*\n | json_val                         | type    |\n +----------------------------------+---------+\n | \"apple\"                          | string  |\n | 10                               | number  |\n | 3.14                             | number  |\n | null                             | null    |\n | {\"State\":\"NY\",\"city\":\"New York\"} | object  |\n | [\"apple\",\"banana\"]               | array   |\n | false                            | boolean |\n *----------------------------------+---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_type",
	},
	{
		Name:        "JSON_VALUE",
		Method:      "JSON_VALUE(json_string_expr[, json_path])",
		Description: "Extracts a JSON scalar value and converts it to a SQL `STRING` value.\nIn addition, this function:Removes the outermost quotes and unescapes the values.\nReturns a SQL `NULL` if a non-scalar value is selected.\nUses double quotes to escape invalid [JSONPath](#JSONPath_format) characters\nin JSON keys. For example: `\"a.b\"`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'{\"name\": \"Jakob\", \"age\": \"6\"}'\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '{\"name\": \"Jane\", \"age\": \"6\"}'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input. If this optional parameter isn't\nprovided, then the JSONPath `$` symbol is applied, which means that all of\nthe data is analyzed.\n\nIf `json_path` returns a JSON `null` or a non-scalar value (in other words,\nif `json_path` refers to an object or an array), then a SQL `NULL` is\nreturned.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).",
		ExampleSQLs: []string{
			"SELECT JSON_VALUE(JSON '{\"name\": \"Jakob\", \"age\": \"6\" }', '$.age') AS scalar_age;\n\n/*------------*\n | scalar_age |\n +------------+\n | 6          |\n *------------*/",
			"SELECT JSON_QUERY('{\"name\": \"Jakob\", \"age\": \"6\"}', '$.name') AS json_name,\n  JSON_VALUE('{\"name\": \"Jakob\", \"age\": \"6\"}', '$.name') AS scalar_name,\n  JSON_QUERY('{\"name\": \"Jakob\", \"age\": \"6\"}', '$.age') AS json_age,\n  JSON_VALUE('{\"name\": \"Jakob\", \"age\": \"6\"}', '$.age') AS scalar_age;\n\n/*-----------+-------------+----------+------------*\n | json_name | scalar_name | json_age | scalar_age |\n +-----------+-------------+----------+------------+\n | \"Jakob\"   | Jakob       | \"6\"      | 6          |\n *-----------+-------------+----------+------------*/",
			"SELECT JSON_QUERY('{\"fruits\": [\"apple\", \"banana\"]}', '$.fruits') AS json_query,\n  JSON_VALUE('{\"fruits\": [\"apple\", \"banana\"]}', '$.fruits') AS json_value;\n\n/*--------------------+------------*\n | json_query         | json_value |\n +--------------------+------------+\n | [\"apple\",\"banana\"] | NULL       |\n *--------------------+------------*/",
			"SELECT JSON_VALUE('{\"a.b\": {\"c\": \"world\"}}', '$.\"a.b\".c') AS hello;\n\n/*-------*\n | hello |\n +-------+\n | world |\n *-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_value",
	},
	{
		Name:        "JSON_VALUE_ARRAY",
		Method:      "JSON_VALUE_ARRAY(json_string_expr[, json_path])",
		Description: "Extracts a JSON array of scalar values and converts it to a SQL\n`ARRAY<STRING>` value.\nIn addition, this function:Removes the outermost quotes and unescapes the values.\nReturns a SQL `NULL` if the selected value isn't an array or\nnot an array containing only scalar values.\nUses double quotes to escape invalid [JSONPath](#JSONPath_format) characters\nin JSON keys. For example: `\"a.b\"`.Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'[\"apples\", \"oranges\", \"grapes\"]'\n\n```\n\n`json_expr`: JSON. For example:\n\n```\nJSON '[\"apples\", \"oranges\", \"grapes\"]'\n\n```\n\n`json_path`: The [JSONPath](#JSONPath_format). This identifies the data that\nyou want to obtain from the input. If this optional parameter isn't\nprovided, then the JSONPath `$` symbol is applied, which means that all of\nthe data is analyzed.There are differences between the JSON-formatted string and JSON input types.\nFor details, see [Differences between the JSON and JSON-formatted STRING types](#differences_json_and_string).Caveats:A JSON `null` in the input array produces a SQL `NULL` as the output for\nJSON `null`. If the output contains a `NULL` array element, an error is\nproduced because the final output can't be an array with `NULL` values.\nIf a JSONPath matches an array that contains scalar objects and a JSON `null`,\nthen the output of the function must be transformed because the final output\ncan't be an array with `NULL` values.",
		ExampleSQLs: []string{
			"SELECT JSON_VALUE_ARRAY(\n  JSON '{\"fruits\": [\"apples\", \"oranges\", \"grapes\"]}', '$.fruits'\n  ) AS string_array;\n\n/*---------------------------*\n | string_array              |\n +---------------------------+\n | [apples, oranges, grapes] |\n *---------------------------*/",
			"SELECT JSON_QUERY_ARRAY('[\"apples\", \"oranges\"]') AS json_array,\n       JSON_VALUE_ARRAY('[\"apples\", \"oranges\"]') AS string_array;\n\n/*-----------------------+-------------------*\n | json_array            | string_array      |\n +-----------------------+-------------------+\n | [\"apples\", \"oranges\"] | [apples, oranges] |\n *-----------------------+-------------------*/",
			"-- Strips the double quotes\nSELECT JSON_VALUE_ARRAY('[\"foo\", \"bar\", \"baz\"]', '$') AS string_array;\n\n/*-----------------*\n | string_array    |\n +-----------------+\n | [foo, bar, baz] |\n *-----------------*/",
			"SELECT ARRAY(\n  SELECT CAST(integer_element AS INT64)\n  FROM UNNEST(\n    JSON_VALUE_ARRAY('[1, 2, 3]', '$')\n  ) AS integer_element\n) AS integer_array;\n\n/*---------------*\n | integer_array |\n +---------------+\n | [1, 2, 3]     |\n *---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#json_value_array",
	},
	{
		Name:        "LAX_BOOL",
		Method:      "LAX_BOOL(json_expr)",
		Description: "Attempts to convert a JSON value to a SQL `BOOL` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON 'true'\n\n```Details:If `json_expr` is SQL `NULL`, the function returns SQL `NULL`.\nSee the conversion rules in the next section for additional `NULL` handling.",
		ExampleSQLs: []string{
			"SELECT LAX_BOOL(JSON 'true') AS result;\n\n/*--------*\n | result |\n +--------+\n | true   |\n *--------*/",
			"SELECT LAX_BOOL(JSON '\"true\"') AS result;\n\n/*--------*\n | result |\n +--------+\n | TRUE   |\n *--------*/",
			"SELECT LAX_BOOL(JSON '\"true \"') AS result;\n\n/*--------*\n | result |\n +--------+\n | NULL   |\n *--------*/",
			"SELECT LAX_BOOL(JSON '\"foo\"') AS result;\n\n/*--------*\n | result |\n +--------+\n | NULL   |\n *--------*/",
			"SELECT LAX_BOOL(JSON '10') AS result;\n\n/*--------*\n | result |\n +--------+\n | TRUE   |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#lax_bool",
	},
	{
		Name:        "LAX_FLOAT64",
		Method:      "LAX_FLOAT64(json_expr)",
		Description: "Attempts to convert a JSON value to a\nSQL `FLOAT64` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '9.8'\n\n```Details:If `json_expr` is SQL `NULL`, the function returns SQL `NULL`.\nSee the conversion rules in the next section for additional `NULL` handling.",
		ExampleSQLs: []string{
			"SELECT LAX_FLOAT64(JSON '9.8') AS result;\n\n/*--------*\n | result |\n +--------+\n | 9.8    |\n *--------*/",
			"SELECT LAX_FLOAT64(JSON '9') AS result;\n\n/*--------*\n | result |\n +--------+\n | 9.0    |\n *--------*/",
			"SELECT LAX_FLOAT64(JSON '9007199254740993') AS result;\n\n/*--------------------*\n | result             |\n +--------------------+\n | 9007199254740992.0 |\n *--------------------*/",
			"SELECT LAX_FLOAT64(JSON '1e100') AS result;\n\n/*--------*\n | result |\n +--------+\n | 1e+100 |\n *--------*/",
			"SELECT LAX_FLOAT64(JSON 'true') AS result;\n\n/*--------*\n | result |\n +--------+\n | NULL   |\n *--------*/",
			"SELECT LAX_FLOAT64(JSON 'false') AS result;\n\n/*--------*\n | result |\n +--------+\n | NULL   |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#lax_float64",
	},
	{
		Name:        "LAX_INT64",
		Method:      "LAX_INT64(json_expr)",
		Description: "Attempts to convert a JSON value to a SQL `INT64` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '999'\n\n```Details:If `json_expr` is SQL `NULL`, the function returns SQL `NULL`.\nSee the conversion rules in the next section for additional `NULL` handling.",
		ExampleSQLs: []string{
			"SELECT LAX_INT64(JSON '10') AS result;\n\n/*--------*\n | result |\n +--------+\n | 10     |\n *--------*/",
			"SELECT LAX_INT64(JSON '10.0') AS result;\n\n/*--------*\n | result |\n +--------+\n | 10     |\n *--------*/",
			"SELECT LAX_INT64(JSON '1.1') AS result;\n\n/*--------*\n | result |\n +--------+\n | 1      |\n *--------*/",
			"SELECT LAX_INT64(JSON '3.5') AS result;\n\n/*--------*\n | result |\n +--------+\n | 4      |\n *--------*/",
			"SELECT LAX_INT64(JSON '1.1e2') AS result;\n\n/*--------*\n | result |\n +--------+\n | 110    |\n *--------*/",
			"SELECT LAX_INT64(JSON '1e100') AS result;\n\n/*--------*\n | result |\n +--------+\n | NULL   |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#lax_int64",
	},
	{
		Name:        "LAX_STRING",
		Method:      "LAX_STRING(json_expr)",
		Description: "Attempts to convert a JSON value to a SQL `STRING` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '\"name\"'\n\n```Details:If `json_expr` is SQL `NULL`, the function returns SQL `NULL`.\nSee the conversion rules in the next section for additional `NULL` handling.",
		ExampleSQLs: []string{
			"SELECT LAX_STRING(JSON '\"purple\"') AS result;\n\n/*--------*\n | result |\n +--------+\n | purple |\n *--------*/",
			"SELECT LAX_STRING(JSON '\"10\"') AS result;\n\n/*--------*\n | result |\n +--------+\n | 10     |\n *--------*/",
			"SELECT LAX_STRING(JSON 'true') AS result;\n\n/*--------*\n | result |\n +--------+\n | true   |\n *--------*/",
			"SELECT LAX_STRING(JSON 'false') AS result;\n\n/*--------*\n | result |\n +--------+\n | false  |\n *--------*/",
			"SELECT LAX_STRING(JSON '10.0') AS result;\n\n/*--------*\n | result |\n +--------+\n | 10     |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#lax_string",
	},
	{
		Name:        "PARSE_JSON",
		Method:      "PARSE_JSON(\n  json_string_expr\n  [, wide_number_mode => { 'exact' | 'round' } ]\n)",
		Description: "Converts a JSON-formatted `STRING` value to a [`JSON` value](https://www.json.org/json-en.html).Arguments:`json_string_expr`: A JSON-formatted string. For example:\n\n```\n'{\"class\": {\"students\": [{\"name\": \"Jane\"}]}}'\n\n```\n\n`wide_number_mode`: A named argument with a `STRING` value. Determines\nhow to handle numbers that can't be stored in a `JSON` value without the\nloss of precision. If used, `wide_number_mode` must include one of the\nfollowing values:\n\n- `exact` (default): Only accept numbers that can be stored without loss\n  of precision. If a number that can't be stored without loss of\n  precision is encountered, the function throws an error.\n- `round`: If a number that can't be stored without loss of precision is\n  encountered, attempt to round it to a number that can be stored without\n  loss of precision. If the number can't be rounded, the function throws\n  an error.\n\nIf a number appears in a JSON object or array, the `wide_number_mode`\nargument is applied to the number in the object or array.Numbers from the following domains can be stored in JSON without loss of\nprecision:64-bit signed/unsigned integers, such as `INT64`\n`FLOAT64`",
		ExampleSQLs: []string{
			"SELECT PARSE_JSON('{\"coordinates\": [10, 20], \"id\": 1}') AS json_data;\n\n/*--------------------------------*\n | json_data                      |\n +--------------------------------+\n | {\"coordinates\":[10,20],\"id\":1} |\n *--------------------------------*/",
			"SELECT PARSE_JSON('{\"id\": 922337203685477580701}') AS json_data; -- fails\nSELECT PARSE_JSON('{\"id\": 922337203685477580701}', wide_number_mode=>'exact') AS json_data; -- fails",
			"SELECT PARSE_JSON('{\"id\": 922337203685477580701}', wide_number_mode=>'round') AS json_data;\n\n/*------------------------------*\n | json_data                    |\n +------------------------------+\n | {\"id\":9.223372036854776e+20} |\n *------------------------------*/",
			"SELECT PARSE_JSON('6') AS json_data;\n\n/*------------------------------*\n | json_data                    |\n +------------------------------+\n | 6                            |\n *------------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#parse_json",
	},
	{
		Name:        "STRING",
		Method:      "STRING(json_expr)",
		Description: "Converts a JSON string to a SQL `STRING` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '\"purple\"'\n\n```\n\nIf the JSON value isn't a string, an error is produced. If the expression\nis SQL `NULL`, the function returns SQL `NULL`.",
		ExampleSQLs: []string{
			"SELECT STRING(JSON '\"purple\"') AS color;\n\n/*--------*\n | color  |\n +--------+\n | purple |\n *--------*/",
			"SELECT STRING(JSON_QUERY(JSON '{\"name\": \"sky\", \"color\": \"blue\"}', \"$.color\")) AS color;\n\n/*-------*\n | color |\n +-------+\n | blue  |\n *-------*/",
			"-- An error is thrown if the JSON isn't of type string.\nSELECT STRING(JSON '123') AS result; -- Throws an error\nSELECT STRING(JSON 'null') AS result; -- Throws an error\nSELECT SAFE.STRING(JSON '123') AS result; -- Returns a SQL NULL",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#string",
	},
	{
		Name:        "TO_JSON",
		Method:      "TO_JSON(\n  sql_value\n  [, stringify_wide_numbers => { TRUE | FALSE } ]\n)",
		Description: "Converts a SQL value to a JSON value.Arguments:`sql_value`: The SQL value to convert to a JSON value. You can review the\nGoogleSQL data types that this function supports and their\nJSON encodings [here](#json_encodings).\n`stringify_wide_numbers`: A named argument that's either\n`TRUE` or `FALSE` (default).\n\n- If `TRUE`, numeric values outside of the\n  `FLOAT64` type domain are encoded as strings.\n- If `FALSE` (default), numeric values outside of the\n  `FLOAT64` type domain aren't encoded as strings,\n  but are stored as JSON numbers. If a numerical value can't be stored in\n  JSON without loss of precision, an error is thrown.\n\nThe following numerical data types are affected by the\n`stringify_wide_numbers` argument:\n\n`INT64`\n\n`NUMERIC`\n\n`BIGNUMERIC`\n\nIf one of these numerical data types appears in a container data type\nsuch as an `ARRAY` or `STRUCT`, the `stringify_wide_numbers` argument is\napplied to the numerical data types in the container data type.",
		ExampleSQLs: []string{
			"With CoordinatesTable AS (\n    (SELECT 1 AS id, [10, 20] AS coordinates) UNION ALL\n    (SELECT 2 AS id, [30, 40] AS coordinates) UNION ALL\n    (SELECT 3 AS id, [50, 60] AS coordinates))\nSELECT TO_JSON(t) AS json_objects\nFROM CoordinatesTable AS t;\n\n/*--------------------------------*\n | json_objects                   |\n +--------------------------------+\n | {\"coordinates\":[10,20],\"id\":1} |\n | {\"coordinates\":[30,40],\"id\":2} |\n | {\"coordinates\":[50,60],\"id\":3} |\n *--------------------------------*/",
			"SELECT TO_JSON(9007199254740993, stringify_wide_numbers=>TRUE) as stringify_on;\n\n/*--------------------*\n | stringify_on       |\n +--------------------+\n | \"9007199254740993\" |\n *--------------------*/",
			"SELECT TO_JSON(9007199254740993, stringify_wide_numbers=>FALSE) as stringify_off;\nSELECT TO_JSON(9007199254740993) as stringify_off;\n\n/*------------------*\n | stringify_off    |\n +------------------+\n | 9007199254740993 |\n *------------------*/",
			"With T1 AS (\n  (SELECT 9007199254740993 AS id) UNION ALL\n  (SELECT 2 AS id))\nSELECT TO_JSON(t, stringify_wide_numbers=>TRUE) AS json_objects\nFROM T1 AS t;\n\n/*---------------------------*\n | json_objects              |\n +---------------------------+\n | {\"id\":\"9007199254740993\"} |\n | {\"id\":2}                  |\n *---------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#to_json",
	},
	{
		Name:        "TO_JSON_STRING",
		Method:      "TO_JSON_STRING(value[, pretty_print])",
		Description: "Converts a SQL value to a JSON-formatted `STRING` value.Arguments:`value`: A SQL value. You can review the GoogleSQL data types that\nthis function supports and their JSON encodings [here](#json_encodings).\n`pretty_print`: Optional boolean parameter. If `pretty_print` is `true`, the\nreturned value is formatted for easy readability.",
		ExampleSQLs: []string{
			"SELECT TO_JSON_STRING(STRUCT(1 AS id, [10,20] AS coordinates)) AS json_data\n\n/*--------------------------------*\n | json_data                      |\n +--------------------------------+\n | {\"id\":1,\"coordinates\":[10,20]} |\n *--------------------------------*/",
			"SELECT TO_JSON_STRING(STRUCT(1 AS id, [10,20] AS coordinates), true) AS json_data\n\n/*--------------------*\n | json_data          |\n +--------------------+\n | {                  |\n |   \"id\": 1,         |\n |   \"coordinates\": [ |\n |     10,            |\n |     20             |\n |   ]                |\n | }                  |\n *--------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#to_json_string",
	},
	{
		Name:        "BOOL",
		Method:      "BOOL(json_expr)",
		Description: "Converts a JSON boolean to a SQL `BOOL` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON 'true'\n\n```\n\nIf the JSON value isn't a boolean, an error is produced. If the expression\nis SQL `NULL`, the function returns SQL `NULL`.",
		ExampleSQLs: []string{
			"SELECT BOOL(JSON 'true') AS vacancy;\n\n/*---------*\n | vacancy |\n +---------+\n | true    |\n *---------*/",
			"SELECT BOOL(JSON_QUERY(JSON '{\"hotel class\": \"5-star\", \"vacancy\": true}', \"$.vacancy\")) AS vacancy;\n\n/*---------*\n | vacancy |\n +---------+\n | true    |\n *---------*/",
			"-- An error is thrown if JSON isn't of type bool.\nSELECT BOOL(JSON '123') AS result; -- Throws an error\nSELECT BOOL(JSON 'null') AS result; -- Throws an error\nSELECT SAFE.BOOL(JSON '123') AS result; -- Returns a SQL NULL",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#bool",
	},
	{
		Name:        "FLOAT64",
		Method:      "FLOAT64(\n  json_expr\n  [, wide_number_mode => { 'exact' | 'round' } ]\n)",
		Description: "Converts a JSON number to a SQL `FLOAT64` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '9.8'\n\n```\n\nIf the JSON value isn't a number, an error is produced. If the expression\nis a SQL `NULL`, the function returns SQL `NULL`.\n\n`wide_number_mode`: A named argument with a `STRING` value.\nDefines what happens with a number that can't be\nrepresented as a `FLOAT64` without loss of\nprecision. This argument accepts one of the two case-sensitive values:\n\n- `exact`: The function fails if the result can't be represented as a\n  `FLOAT64` without loss of precision.\n- `round` (default): The numeric value stored in JSON will be rounded to\n  `FLOAT64`. If such rounding isn't possible,\n  the function fails.",
		ExampleSQLs: []string{
			"SELECT FLOAT64(JSON '9.8') AS velocity;\n\n/*----------*\n | velocity |\n +----------+\n | 9.8      |\n *----------*/",
			"SELECT FLOAT64(JSON_QUERY(JSON '{\"vo2_max\": 39.1, \"age\": 18}', \"$.vo2_max\")) AS vo2_max;\n\n/*---------*\n | vo2_max |\n +---------+\n | 39.1    |\n *---------*/",
			"SELECT FLOAT64(JSON '18446744073709551615', wide_number_mode=>'round') as result;\n\n/*------------------------*\n | result                 |\n +------------------------+\n | 1.8446744073709552e+19 |\n *------------------------*/",
			"SELECT FLOAT64(JSON '18446744073709551615') as result;\n\n/*------------------------*\n | result                 |\n +------------------------+\n | 1.8446744073709552e+19 |\n *------------------------*/",
			"-- An error is thrown if JSON isn't of type FLOAT64.\nSELECT FLOAT64(JSON '\"strawberry\"') AS result;\nSELECT FLOAT64(JSON 'null') AS result;\n\n-- An error is thrown because `wide_number_mode` is case-sensitive and not \"exact\" or \"round\".\nSELECT FLOAT64(JSON '123.4', wide_number_mode=>'EXACT') as result;\nSELECT FLOAT64(JSON '123.4', wide_number_mode=>'exac') as result;\n\n-- An error is thrown because the number can't be converted to DOUBLE without loss of precision\nSELECT FLOAT64(JSON '18446744073709551615', wide_number_mode=>'exact') as result;\n\n-- Returns a SQL NULL\nSELECT SAFE.FLOAT64(JSON '\"strawberry\"') AS result;",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#float64",
	},
	{
		Name:        "FLOAT64",
		Method:      "FLOAT64(\n  json_expr\n  [, wide_number_mode => { 'exact' | 'round' } ]\n)",
		Description: "Converts a JSON number to a SQL `FLOAT64` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '9.8'\n\n```\n\nIf the JSON value isn't a number, an error is produced. If the expression\nis a SQL `NULL`, the function returns SQL `NULL`.\n\n`wide_number_mode`: A named argument with a `STRING` value.\nDefines what happens with a number that can't be\nrepresented as a `FLOAT64` without loss of\nprecision. This argument accepts one of the two case-sensitive values:\n\n- `exact`: The function fails if the result can't be represented as a\n  `FLOAT64` without loss of precision.\n- `round` (default): The numeric value stored in JSON will be rounded to\n  `FLOAT64`. If such rounding isn't possible,\n  the function fails.",
		ExampleSQLs: []string{
			"SELECT FLOAT64(JSON '9.8') AS velocity;\n\n/*----------*\n | velocity |\n +----------+\n | 9.8      |\n *----------*/",
			"SELECT FLOAT64(JSON_QUERY(JSON '{\"vo2_max\": 39.1, \"age\": 18}', \"$.vo2_max\")) AS vo2_max;\n\n/*---------*\n | vo2_max |\n +---------+\n | 39.1    |\n *---------*/",
			"SELECT FLOAT64(JSON '18446744073709551615', wide_number_mode=>'round') as result;\n\n/*------------------------*\n | result                 |\n +------------------------+\n | 1.8446744073709552e+19 |\n *------------------------*/",
			"SELECT FLOAT64(JSON '18446744073709551615') as result;\n\n/*------------------------*\n | result                 |\n +------------------------+\n | 1.8446744073709552e+19 |\n *------------------------*/",
			"-- An error is thrown if JSON isn't of type FLOAT64.\nSELECT FLOAT64(JSON '\"strawberry\"') AS result;\nSELECT FLOAT64(JSON 'null') AS result;\n\n-- An error is thrown because `wide_number_mode` is case-sensitive and not \"exact\" or \"round\".\nSELECT FLOAT64(JSON '123.4', wide_number_mode=>'EXACT') as result;\nSELECT FLOAT64(JSON '123.4', wide_number_mode=>'exac') as result;\n\n-- An error is thrown because the number can't be converted to DOUBLE without loss of precision\nSELECT FLOAT64(JSON '18446744073709551615', wide_number_mode=>'exact') as result;\n\n-- Returns a SQL NULL\nSELECT SAFE.FLOAT64(JSON '\"strawberry\"') AS result;",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#float64",
	},
	{
		Name:        "INT64",
		Method:      "INT64(json_expr)",
		Description: "Converts a JSON number to a SQL `INT64` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '999'\n\n```\n\nIf the JSON value isn't a number, or the JSON number isn't in the SQL\n`INT64` domain, an error is produced. If the expression is SQL `NULL`, the\nfunction returns SQL `NULL`.",
		ExampleSQLs: []string{
			"SELECT INT64(JSON '2005') AS flight_number;\n\n/*---------------*\n | flight_number |\n +---------------+\n | 2005          |\n *---------------*/",
			"SELECT INT64(JSON_QUERY(JSON '{\"gate\": \"A4\", \"flight_number\": 2005}', \"$.flight_number\")) AS flight_number;\n\n/*---------------*\n | flight_number |\n +---------------+\n | 2005          |\n *---------------*/",
			"SELECT INT64(JSON '10.0') AS score;\n\n/*-------*\n | score |\n +-------+\n | 10    |\n *-------*/",
			"-- An error is thrown if JSON isn't a number or can't be converted to a 64-bit integer.\nSELECT INT64(JSON '10.1') AS result;  -- Throws an error\nSELECT INT64(JSON '\"strawberry\"') AS result; -- Throws an error\nSELECT INT64(JSON 'null') AS result; -- Throws an error\nSELECT SAFE.INT64(JSON '\"strawberry\"') AS result;  -- Returns a SQL NULL",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#int64",
	},
	{
		Name:        "INT64",
		Method:      "INT64(json_expr)",
		Description: "Converts a JSON number to a SQL `INT64` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '999'\n\n```\n\nIf the JSON value isn't a number, or the JSON number isn't in the SQL\n`INT64` domain, an error is produced. If the expression is SQL `NULL`, the\nfunction returns SQL `NULL`.",
		ExampleSQLs: []string{
			"SELECT INT64(JSON '2005') AS flight_number;\n\n/*---------------*\n | flight_number |\n +---------------+\n | 2005          |\n *---------------*/",
			"SELECT INT64(JSON_QUERY(JSON '{\"gate\": \"A4\", \"flight_number\": 2005}', \"$.flight_number\")) AS flight_number;\n\n/*---------------*\n | flight_number |\n +---------------+\n | 2005          |\n *---------------*/",
			"SELECT INT64(JSON '10.0') AS score;\n\n/*-------*\n | score |\n +-------+\n | 10    |\n *-------*/",
			"-- An error is thrown if JSON isn't a number or can't be converted to a 64-bit integer.\nSELECT INT64(JSON '10.1') AS result;  -- Throws an error\nSELECT INT64(JSON '\"strawberry\"') AS result; -- Throws an error\nSELECT INT64(JSON 'null') AS result; -- Throws an error\nSELECT SAFE.INT64(JSON '\"strawberry\"') AS result;  -- Returns a SQL NULL",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#int64",
	},
	{
		Name:        "STRING",
		Method:      "STRING(json_expr)",
		Description: "Converts a JSON string to a SQL `STRING` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '\"purple\"'\n\n```\n\nIf the JSON value isn't a string, an error is produced. If the expression\nis SQL `NULL`, the function returns SQL `NULL`.",
		ExampleSQLs: []string{
			"SELECT STRING(JSON '\"purple\"') AS color;\n\n/*--------*\n | color  |\n +--------+\n | purple |\n *--------*/",
			"SELECT STRING(JSON_QUERY(JSON '{\"name\": \"sky\", \"color\": \"blue\"}', \"$.color\")) AS color;\n\n/*-------*\n | color |\n +-------+\n | blue  |\n *-------*/",
			"-- An error is thrown if the JSON isn't of type string.\nSELECT STRING(JSON '123') AS result; -- Throws an error\nSELECT STRING(JSON 'null') AS result; -- Throws an error\nSELECT SAFE.STRING(JSON '123') AS result; -- Returns a SQL NULL",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#string",
	},
	{
		Name:        "STRING",
		Method:      "STRING(json_expr)",
		Description: "Converts a JSON string to a SQL `STRING` value.Arguments:`json_expr`: JSON. For example:\n\n```\nJSON '\"purple\"'\n\n```\n\nIf the JSON value isn't a string, an error is produced. If the expression\nis SQL `NULL`, the function returns SQL `NULL`.",
		ExampleSQLs: []string{
			"SELECT STRING(JSON '\"purple\"') AS color;\n\n/*--------*\n | color  |\n +--------+\n | purple |\n *--------*/",
			"SELECT STRING(JSON_QUERY(JSON '{\"name\": \"sky\", \"color\": \"blue\"}', \"$.color\")) AS color;\n\n/*-------*\n | color |\n +-------+\n | blue  |\n *-------*/",
			"-- An error is thrown if the JSON isn't of type string.\nSELECT STRING(JSON '123') AS result; -- Throws an error\nSELECT STRING(JSON 'null') AS result; -- Throws an error\nSELECT SAFE.STRING(JSON '123') AS result; -- Returns a SQL NULL",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#string",
	},
	{
		Name:        "TO_JSON",
		Method:      "TO_JSON(\n  sql_value\n  [, stringify_wide_numbers => { TRUE | FALSE } ]\n)",
		Description: "Converts a SQL value to a JSON value.Arguments:`sql_value`: The SQL value to convert to a JSON value. You can review the\nGoogleSQL data types that this function supports and their\nJSON encodings [here](#json_encodings).\n`stringify_wide_numbers`: A named argument that's either\n`TRUE` or `FALSE` (default).\n\n- If `TRUE`, numeric values outside of the\n  `FLOAT64` type domain are encoded as strings.\n- If `FALSE` (default), numeric values outside of the\n  `FLOAT64` type domain aren't encoded as strings,\n  but are stored as JSON numbers. If a numerical value can't be stored in\n  JSON without loss of precision, an error is thrown.\n\nThe following numerical data types are affected by the\n`stringify_wide_numbers` argument:\n\n`INT64`\n\n`NUMERIC`\n\n`BIGNUMERIC`\n\nIf one of these numerical data types appears in a container data type\nsuch as an `ARRAY` or `STRUCT`, the `stringify_wide_numbers` argument is\napplied to the numerical data types in the container data type.",
		ExampleSQLs: []string{
			"With CoordinatesTable AS (\n    (SELECT 1 AS id, [10, 20] AS coordinates) UNION ALL\n    (SELECT 2 AS id, [30, 40] AS coordinates) UNION ALL\n    (SELECT 3 AS id, [50, 60] AS coordinates))\nSELECT TO_JSON(t) AS json_objects\nFROM CoordinatesTable AS t;\n\n/*--------------------------------*\n | json_objects                   |\n +--------------------------------+\n | {\"coordinates\":[10,20],\"id\":1} |\n | {\"coordinates\":[30,40],\"id\":2} |\n | {\"coordinates\":[50,60],\"id\":3} |\n *--------------------------------*/",
			"SELECT TO_JSON(9007199254740993, stringify_wide_numbers=>TRUE) as stringify_on;\n\n/*--------------------*\n | stringify_on       |\n +--------------------+\n | \"9007199254740993\" |\n *--------------------*/",
			"SELECT TO_JSON(9007199254740993, stringify_wide_numbers=>FALSE) as stringify_off;\nSELECT TO_JSON(9007199254740993) as stringify_off;\n\n/*------------------*\n | stringify_off    |\n +------------------+\n | 9007199254740993 |\n *------------------*/",
			"With T1 AS (\n  (SELECT 9007199254740993 AS id) UNION ALL\n  (SELECT 2 AS id))\nSELECT TO_JSON(t, stringify_wide_numbers=>TRUE) AS json_objects\nFROM T1 AS t;\n\n/*---------------------------*\n | json_objects              |\n +---------------------------+\n | {\"id\":\"9007199254740993\"} |\n | {\"id\":2}                  |\n *---------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions#to_json",
	},
	{
		Name:        "ACOS",
		Method:      "ACOS(X)",
		Description: "Computes the principal value of the inverse cosine of X. The return value is in\nthe range \\[0,π\\]. Generates an error if X is a value outside of the\nrange \\[-1, 1\\].X\n ACOS(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN`\n\n\n X < -1\n Error\n\n\n X > 1\n Error`ACOSH````\nACOSH(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#acos",
	},
	{
		Name:        "EXP",
		Method:      "EXP(X)",
		Description: "Computes _e_ to the power of X, also called the natural exponential function. If\nthe result underflows, this function returns a zero. Generates an error if the\nresult overflows.X\n EXP(X)\n\n\n\n\n 0.0\n 1.0\n\n\n `+inf` `+inf` `-inf`\n 0.0",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#exp",
	},
	{
		Name:        "CEIL",
		Method:      "CEIL(X)",
		Description: "Returns the smallest integral value that isn't less than X.X\n CEIL(X)\n\n\n\n\n 2.0\n 2.0\n\n\n 2.3\n 3.0\n\n\n 2.8\n 3.0\n\n\n 2.5\n 3.0\n\n\n -2.3\n -2.0\n\n\n -2.8\n -2.0\n\n\n -2.5\n -2.0\n\n\n 0\n 0\n\n\n `+inf` `+inf` `-inf` `-inf` `NaN` `NaN`",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#ceil",
	},
	{
		Name:        "CBRT",
		Method:      "CBRT(X)",
		Description: "Computes the cube root of `X`. `X` can be any data type\nthat [coerces to `FLOAT64`](/bigquery/docs/reference/standard-sql/conversion_rules#conversion_rules).\nSupports the `SAFE.` prefix.X\n CBRT(X)\n\n\n\n\n `+inf` `inf` `-inf` `-inf` `NaN` `NaN` `0` `0` `NULL` `NULL`",
		ExampleSQLs: []string{
			"SELECT CBRT(27) AS cube_root;\n\n/*--------------------*\n | cube_root          |\n +--------------------+\n | 3.0000000000000004 |\n *--------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cbrt",
	},
	{
		Name:        "ABS",
		Method:      "ABS(X)",
		Description: "Computes absolute value. Returns an error if the argument is an integer and the\noutput value can't be represented as the same type; this happens only for the\nlargest negative input value, which has no positive representation.X\n ABS(X)\n\n\n\n\n 25\n 25\n\n\n -25\n 25\n\n\n `+inf` `+inf` `-inf` `+inf`",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#abs",
	},
	{
		Name:        "COSINE_DISTANCE",
		Method:      "COSINE_DISTANCE(vector1, vector2)",
		Description: "Computes the [cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity#Cosine_distance) between two vectors.",
		ExampleSQLs: []string{
			"SELECT COSINE_DISTANCE([1.0, 2.0], [3.0, 4.0]) AS results;\n\n/*----------*\n | results  |\n +----------+\n | 0.016130 |\n *----------*/",
			"SELECT COSINE_DISTANCE(\n [(1, 1.0), (2, 2.0)],\n [(2, 4.0), (1, 3.0)]) AS results;\n\n /*----------*\n  | results  |\n  +----------+\n  | 0.016130 |\n  *----------*/",
			"SELECT COSINE_DISTANCE([1.0, 2.0], [3.0, 4.0]) AS results;",
			"SELECT COSINE_DISTANCE([2.0, 1.0], [4.0, 3.0]) AS results;",
			"SELECT COSINE_DISTANCE([(1, 1.0), (2, 2.0)], [(1, 3.0), (2, 4.0)]) AS results;",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cosine_distance",
	},
	{
		Name:        "GREATEST",
		Method:      "GREATEST(X1,...,XN)",
		Description: "Returns the greatest value among `X1,...,XN`. If any argument is `NULL`, returns\n`NULL`. Otherwise, in the case of floating-point arguments, if any argument is\n`NaN`, returns `NaN`. In all other cases, returns the value among `X1,...,XN`\nthat has the greatest value according to the ordering used by the `ORDER BY`\nclause. The arguments `X1, ..., XN` must be coercible to a common supertype, and\nthe supertype must support ordering.X1,...,XN\n GREATEST(X1,...,XN)\n\n\n\n\n 3,5,1\n 5This function supports specifying [collation](https://cloud.google.com/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#greatest",
	},
	{
		Name:        "RAND",
		Method:      "RAND()",
		Description: "Generates a pseudo-random value of type `FLOAT64` in\nthe range of \\[0, 1), inclusive of 0 and exclusive of 1.`RANGE_BUCKET````\nRANGE_BUCKET(point, boundaries_array)\n\n```",
		ExampleSQLs: []string{
			"WITH students AS\n(\n  SELECT 9 AS age UNION ALL\n  SELECT 20 AS age UNION ALL\n  SELECT 25 AS age UNION ALL\n  SELECT 31 AS age UNION ALL\n  SELECT 32 AS age UNION ALL\n  SELECT 33 AS age\n)\nSELECT RANGE_BUCKET(age, [10, 20, 30]) AS age_group, COUNT(*) AS count\nFROM students\nGROUP BY 1\n\n/*--------------+-------*\n | age_group    | count |\n +--------------+-------+\n | 0            | 1     |\n | 2            | 2     |\n | 3            | 3     |\n *--------------+-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#rand",
	},
	{
		Name:        "DIV",
		Method:      "DIV(X, Y)",
		Description: "Returns the result of integer division of X by Y. Division by zero returns\nan error. Division by -1 may overflow.X\n Y\n DIV(X, Y)\n\n\n\n\n 20\n 4\n 5\n\n\n 12\n -7\n -1\n\n\n 20\n 3\n 6\n\n\n 0\n 20\n 0\n\n\n 20\n 0\n Error",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#div",
	},
	{
		Name:        "RANGE_BUCKET",
		Method:      "RANGE_BUCKET(point, boundaries_array)",
		Description: "`RANGE_BUCKET` scans through a sorted array and returns the 0-based position\nof the point's upper bound. This can be useful if you need to group your data to\nbuild partitions, histograms, business-defined rules, and more.`RANGE_BUCKET` follows these rules:If the point exists in the array, returns the index of the next larger value.\n\n```\nRANGE_BUCKET(20, [0, 10, 20, 30, 40]) -- 3 is return value\nRANGE_BUCKET(20, [0, 10, 20, 20, 40, 40]) -- 4 is return value\n\n```\n\nIf the point doesn't exist in the array, but it falls between two values,\nreturns the index of the larger value.\n\n```\nRANGE_BUCKET(25, [0, 10, 20, 30, 40]) -- 3 is return value\n\n```\n\nIf the point is smaller than the first value in the array, returns 0.\n\n```\nRANGE_BUCKET(-10, [5, 10, 20, 30, 40]) -- 0 is return value\n\n```\n\nIf the point is greater than or equal to the last value in the array,\nreturns the length of the array.\n\n```\nRANGE_BUCKET(80, [0, 10, 20, 30, 40]) -- 5 is return value\n\n```\n\nIf the array is empty, returns 0.\n\n```\nRANGE_BUCKET(80, []) -- 0 is return value\n\n```\n\nIf the point is `NULL` or `NaN`, returns `NULL`.\n\n```\nRANGE_BUCKET(NULL, [0, 10, 20, 30, 40]) -- NULL is return value\n\n```\n\nThe data type for the point and array must be compatible.\n\n```\nRANGE_BUCKET('a', ['a', 'b', 'c', 'd']) -- 1 is return value\nRANGE_BUCKET(1.2, [1, 1.2, 1.4, 1.6]) -- 2 is return value\nRANGE_BUCKET(1.2, [1, 2, 4, 6]) -- execution failure\n\n```Execution failure occurs when:The array has a `NaN` or `NULL` value in it.\n\n```\nRANGE_BUCKET(80, [NULL, 10, 20, 30, 40]) -- execution failure\n\n```\n\nThe array isn't sorted in ascending order.\n\n```\nRANGE_BUCKET(30, [10, 30, 20, 40, 50]) -- execution failure\n\n```",
		ExampleSQLs: []string{
			"WITH students AS\n(\n  SELECT 9 AS age UNION ALL\n  SELECT 20 AS age UNION ALL\n  SELECT 25 AS age UNION ALL\n  SELECT 31 AS age UNION ALL\n  SELECT 32 AS age UNION ALL\n  SELECT 33 AS age\n)\nSELECT RANGE_BUCKET(age, [10, 20, 30]) AS age_group, COUNT(*) AS count\nFROM students\nGROUP BY 1\n\n/*--------------+-------*\n | age_group    | count |\n +--------------+-------+\n | 0            | 1     |\n | 2            | 2     |\n | 3            | 3     |\n *--------------+-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#range_bucket",
	},
	{
		Name:        "ABS",
		Method:      "ABS(X)",
		Description: "Computes absolute value. Returns an error if the argument is an integer and the\noutput value can't be represented as the same type; this happens only for the\nlargest negative input value, which has no positive representation.X\n ABS(X)\n\n\n\n\n 25\n 25\n\n\n -25\n 25\n\n\n `+inf` `+inf` `-inf` `+inf`",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#abs",
	},
	{
		Name:        "ACOS",
		Method:      "ACOS(X)",
		Description: "Computes the principal value of the inverse cosine of X. The return value is in\nthe range \\[0,π\\]. Generates an error if X is a value outside of the\nrange \\[-1, 1\\].X\n ACOS(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN`\n\n\n X < -1\n Error\n\n\n X > 1\n Error`ACOSH````\nACOSH(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#acos",
	},
	{
		Name:        "ACOSH",
		Method:      "ACOSH(X)",
		Description: "Computes the inverse hyperbolic cosine of X. Generates an error if X is a value\nless than 1.X\n ACOSH(X)\n\n\n\n\n `+inf` `+inf` `-inf` `NaN` `NaN` `NaN`\n\n\n X < 1\n Error`ASIN````\nASIN(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#acosh",
	},
	{
		Name:        "ASIN",
		Method:      "ASIN(X)",
		Description: "Computes the principal value of the inverse sine of X. The return value is in\nthe range \\[-π/2,π/2\\]. Generates an error if X is outside of\nthe range \\[-1, 1\\].X\n ASIN(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN`\n\n\n X < -1\n Error\n\n\n X > 1\n Error`ASINH````\nASINH(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#asin",
	},
	{
		Name:        "ASINH",
		Method:      "ASINH(X)",
		Description: "Computes the inverse hyperbolic sine of X. Doesn't fail.X\n ASINH(X)\n\n\n\n\n `+inf` `+inf` `-inf` `-inf` `NaN` `NaN``ATAN````\nATAN(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#asinh",
	},
	{
		Name:        "ATAN",
		Method:      "ATAN(X)",
		Description: "Computes the principal value of the inverse tangent of X. The return value is\nin the range \\[-π/2,π/2\\]. Doesn't fail.X\n ATAN(X)\n\n\n\n\n `+inf`\n π/2\n\n\n `-inf`\n -π/2\n\n\n `NaN` `NaN``ATAN2````\nATAN2(X, Y)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#atan",
	},
	{
		Name:        "ATAN2",
		Method:      "ATAN2(X, Y)",
		Description: "Calculates the principal value of the inverse tangent of X/Y using the signs of\nthe two arguments to determine the quadrant. The return value is in the range\n\\[-π,π\\].X\n Y\n ATAN2(X, Y)\n\n\n\n\n `NaN`\n Any value\n `NaN`\n\n\n Any value\n `NaN` `NaN`\n\n\n 0.0\n 0.0\n 0.0\n\n\n Positive Finite value\n `-inf`\n π\n\n\n Negative Finite value\n `-inf`\n -π\n\n\n Finite value\n `+inf`\n 0.0\n\n\n `+inf`\n Finite value\n π/2\n\n\n `-inf`\n Finite value\n -π/2\n\n\n `+inf` `-inf`\n ¾π\n\n\n `-inf` `-inf`\n -¾π\n\n\n `+inf` `+inf`\n π/4\n\n\n `-inf` `+inf`\n -π/4`ATANH````\nATANH(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#atan2",
	},
	{
		Name:        "ATANH",
		Method:      "ATANH(X)",
		Description: "Computes the inverse hyperbolic tangent of X. Generates an error if X is outside\nof the range (-1, 1).X\n ATANH(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN`\n\n\n X < -1\n Error\n\n\n X > 1\n Error`CBRT````\nCBRT(X)\n\n```",
		ExampleSQLs: []string{
			"SELECT CBRT(27) AS cube_root;\n\n/*--------------------*\n | cube_root          |\n +--------------------+\n | 3.0000000000000004 |\n *--------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#atanh",
	},
	{
		Name:        "CBRT",
		Method:      "CBRT(X)",
		Description: "Computes the cube root of `X`. `X` can be any data type\nthat [coerces to `FLOAT64`](/bigquery/docs/reference/standard-sql/conversion_rules#conversion_rules).\nSupports the `SAFE.` prefix.X\n CBRT(X)\n\n\n\n\n `+inf` `inf` `-inf` `-inf` `NaN` `NaN` `0` `0` `NULL` `NULL`",
		ExampleSQLs: []string{
			"SELECT CBRT(27) AS cube_root;\n\n/*--------------------*\n | cube_root          |\n +--------------------+\n | 3.0000000000000004 |\n *--------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cbrt",
	},
	{
		Name:        "CEIL",
		Method:      "CEIL(X)",
		Description: "Returns the smallest integral value that isn't less than X.X\n CEIL(X)\n\n\n\n\n 2.0\n 2.0\n\n\n 2.3\n 3.0\n\n\n 2.8\n 3.0\n\n\n 2.5\n 3.0\n\n\n -2.3\n -2.0\n\n\n -2.8\n -2.0\n\n\n -2.5\n -2.0\n\n\n 0\n 0\n\n\n `+inf` `+inf` `-inf` `-inf` `NaN` `NaN`",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#ceil",
	},
	{
		Name:        "CEILING",
		Method:      "CEILING(X)",
		Description: "Synonym of CEIL(X)`COS````\nCOS(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#ceiling",
	},
	{
		Name:        "COS",
		Method:      "COS(X)",
		Description: "Computes the cosine of X where X is specified in radians. Never fails.X\n COS(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN``COSH````\nCOSH(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cos",
	},
	{
		Name:        "COSH",
		Method:      "COSH(X)",
		Description: "Computes the hyperbolic cosine of X where X is specified in radians.\nGenerates an error if overflow occurs.X\n COSH(X)\n\n\n\n\n `+inf` `+inf` `-inf` `+inf` `NaN` `NaN``COSINE_DISTANCE````\nCOSINE_DISTANCE(vector1, vector2)\n\n```",
		ExampleSQLs: []string{
			"SELECT COSINE_DISTANCE([1.0, 2.0], [3.0, 4.0]) AS results;\n\n/*----------*\n | results  |\n +----------+\n | 0.016130 |\n *----------*/",
			"SELECT COSINE_DISTANCE(\n [(1, 1.0), (2, 2.0)],\n [(2, 4.0), (1, 3.0)]) AS results;\n\n /*----------*\n  | results  |\n  +----------+\n  | 0.016130 |\n  *----------*/",
			"SELECT COSINE_DISTANCE([1.0, 2.0], [3.0, 4.0]) AS results;",
			"SELECT COSINE_DISTANCE([2.0, 1.0], [4.0, 3.0]) AS results;",
			"SELECT COSINE_DISTANCE([(1, 1.0), (2, 2.0)], [(1, 3.0), (2, 4.0)]) AS results;",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cosh",
	},
	{
		Name:        "COSINE_DISTANCE",
		Method:      "COSINE_DISTANCE(vector1, vector2)",
		Description: "Computes the [cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity#Cosine_distance) between two vectors.",
		ExampleSQLs: []string{
			"SELECT COSINE_DISTANCE([1.0, 2.0], [3.0, 4.0]) AS results;\n\n/*----------*\n | results  |\n +----------+\n | 0.016130 |\n *----------*/",
			"SELECT COSINE_DISTANCE(\n [(1, 1.0), (2, 2.0)],\n [(2, 4.0), (1, 3.0)]) AS results;\n\n /*----------*\n  | results  |\n  +----------+\n  | 0.016130 |\n  *----------*/",
			"SELECT COSINE_DISTANCE([1.0, 2.0], [3.0, 4.0]) AS results;",
			"SELECT COSINE_DISTANCE([2.0, 1.0], [4.0, 3.0]) AS results;",
			"SELECT COSINE_DISTANCE([(1, 1.0), (2, 2.0)], [(1, 3.0), (2, 4.0)]) AS results;",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cosine_distance",
	},
	{
		Name:        "COT",
		Method:      "COT(X)",
		Description: "Computes the cotangent for the angle of `X`, where `X` is specified in radians.\n`X` can be any data type\nthat [coerces to `FLOAT64`](/bigquery/docs/reference/standard-sql/conversion_rules#conversion_rules).\nSupports the `SAFE.` prefix.X\n COT(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN` `0` `Error` `NULL` `NULL`",
		ExampleSQLs: []string{
			"SELECT COT(1) AS a, SAFE.COT(0) AS b;\n\n/*---------------------+------*\n | a                   | b    |\n +---------------------+------+\n | 0.64209261593433065 | NULL |\n *---------------------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#cot",
	},
	{
		Name:        "COTH",
		Method:      "COTH(X)",
		Description: "Computes the hyperbolic cotangent for the angle of `X`, where `X` is specified\nin radians. `X` can be any data type\nthat [coerces to `FLOAT64`](/bigquery/docs/reference/standard-sql/conversion_rules#conversion_rules).\nSupports the `SAFE.` prefix.X\n COTH(X)\n\n\n\n\n `+inf` `1` `-inf` `-1` `NaN` `NaN` `0` `Error` `NULL` `NULL`",
		ExampleSQLs: []string{
			"SELECT COTH(1) AS a, SAFE.COTH(0) AS b;\n\n/*----------------+------*\n | a              | b    |\n +----------------+------+\n | 1.313035285499 | NULL |\n *----------------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#coth",
	},
	{
		Name:        "CSC",
		Method:      "CSC(X)",
		Description: "Computes the cosecant of the input angle, which is in radians.\n`X` can be any data type\nthat [coerces to `FLOAT64`](/bigquery/docs/reference/standard-sql/conversion_rules#conversion_rules).\nSupports the `SAFE.` prefix.X\n CSC(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN` `0` `Error` `NULL` `NULL`",
		ExampleSQLs: []string{
			"SELECT CSC(100) AS a, CSC(-1) AS b, SAFE.CSC(0) AS c;\n\n/*----------------+-----------------+------*\n | a              | b               | c    |\n +----------------+-----------------+------+\n | -1.97485753142 | -1.188395105778 | NULL |\n *----------------+-----------------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#csc",
	},
	{
		Name:        "CSCH",
		Method:      "CSCH(X)",
		Description: "Computes the hyperbolic cosecant of the input angle, which is in radians.\n`X` can be any data type\nthat [coerces to `FLOAT64`](/bigquery/docs/reference/standard-sql/conversion_rules#conversion_rules).\nSupports the `SAFE.` prefix.X\n CSCH(X)\n\n\n\n\n `+inf` `0` `-inf` `0` `NaN` `NaN` `0` `Error` `NULL` `NULL`",
		ExampleSQLs: []string{
			"SELECT CSCH(0.5) AS a, CSCH(-2) AS b, SAFE.CSCH(0) AS c;\n\n/*----------------+----------------+------*\n | a              | b              | c    |\n +----------------+----------------+------+\n | 1.919034751334 | -0.27572056477 | NULL |\n *----------------+----------------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#csch",
	},
	{
		Name:        "DIV",
		Method:      "DIV(X, Y)",
		Description: "Returns the result of integer division of X by Y. Division by zero returns\nan error. Division by -1 may overflow.X\n Y\n DIV(X, Y)\n\n\n\n\n 20\n 4\n 5\n\n\n 12\n -7\n -1\n\n\n 20\n 3\n 6\n\n\n 0\n 20\n 0\n\n\n 20\n 0\n Error",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#div",
	},
	{
		Name:        "EXP",
		Method:      "EXP(X)",
		Description: "Computes _e_ to the power of X, also called the natural exponential function. If\nthe result underflows, this function returns a zero. Generates an error if the\nresult overflows.X\n EXP(X)\n\n\n\n\n 0.0\n 1.0\n\n\n `+inf` `+inf` `-inf`\n 0.0",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#exp",
	},
	{
		Name:        "EUCLIDEAN_DISTANCE",
		Method:      "EUCLIDEAN_DISTANCE(vector1, vector2)",
		Description: "Computes the [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) between two vectors.",
		ExampleSQLs: []string{
			"SELECT EUCLIDEAN_DISTANCE([1.0, 2.0], [3.0, 4.0]) AS results;\n\n/*----------*\n | results  |\n +----------+\n | 2.828    |\n *----------*/",
			"SELECT EUCLIDEAN_DISTANCE(\n [(1, 1.0), (2, 2.0)],\n [(2, 4.0), (1, 3.0)]) AS results;\n\n /*----------*\n  | results  |\n  +----------+\n  | 2.828    |\n  *----------*/",
			"SELECT EUCLIDEAN_DISTANCE([1.0, 2.0], [3.0, 4.0]);",
			"SELECT EUCLIDEAN_DISTANCE([2.0, 1.0], [4.0, 3.0]);",
			"SELECT EUCLIDEAN_DISTANCE([(1, 1.0), (2, 2.0)], [(1, 3.0), (2, 4.0)]) AS results;",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#euclidean_distance",
	},
	{
		Name:        "FLOOR",
		Method:      "FLOOR(X)",
		Description: "Returns the largest integral value that isn't greater than X.X\n FLOOR(X)\n\n\n\n\n 2.0\n 2.0\n\n\n 2.3\n 2.0\n\n\n 2.8\n 2.0\n\n\n 2.5\n 2.0\n\n\n -2.3\n -3.0\n\n\n -2.8\n -3.0\n\n\n -2.5\n -3.0\n\n\n 0\n 0\n\n\n `+inf` `+inf` `-inf` `-inf` `NaN` `NaN`",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#floor",
	},
	{
		Name:        "GREATEST",
		Method:      "GREATEST(X1,...,XN)",
		Description: "Returns the greatest value among `X1,...,XN`. If any argument is `NULL`, returns\n`NULL`. Otherwise, in the case of floating-point arguments, if any argument is\n`NaN`, returns `NaN`. In all other cases, returns the value among `X1,...,XN`\nthat has the greatest value according to the ordering used by the `ORDER BY`\nclause. The arguments `X1, ..., XN` must be coercible to a common supertype, and\nthe supertype must support ordering.X1,...,XN\n GREATEST(X1,...,XN)\n\n\n\n\n 3,5,1\n 5This function supports specifying [collation](https://cloud.google.com/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#greatest",
	},
	{
		Name:        "IEEE_DIVIDE",
		Method:      "IEEE_DIVIDE(X, Y)",
		Description: "Divides X by Y; this function never fails. Returns\n`FLOAT64`. Unlike the division operator (/),\nthis function doesn't generate errors for division by zero or overflow.X\n Y\n IEEE\\_DIVIDE(X, Y)\n\n\n\n\n 20.0\n 4.0\n 5.0\n\n\n 0.0\n 25.0\n 0.0\n\n\n 25.0\n 0.0\n `+inf`\n\n\n -25.0\n 0.0\n `-inf`\n\n\n 0.0\n 0.0\n `NaN`\n\n\n 0.0\n `NaN` `NaN` `NaN`\n 0.0\n `NaN` `+inf` `+inf` `NaN` `-inf` `-inf` `NaN``IS_INF````\nIS_INF(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#ieee_divide",
	},
	{
		Name:        "IS_INF",
		Method:      "IS_INF(X)",
		Description: "Returns `TRUE` if the value is positive or negative infinity.X\n IS\\_INF(X)\n\n\n\n\n `+inf` `TRUE` `-inf` `TRUE`\n\n\n 25\n `FALSE``IS_NAN````\nIS_NAN(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#is_inf",
	},
	{
		Name:        "IS_NAN",
		Method:      "IS_NAN(X)",
		Description: "Returns `TRUE` if the value is a `NaN` value.X\n IS\\_NAN(X)\n\n\n\n\n `NaN` `TRUE`\n\n\n 25\n `FALSE``LEAST````\nLEAST(X1,...,XN)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#is_nan",
	},
	{
		Name:        "LEAST",
		Method:      "LEAST(X1,...,XN)",
		Description: "Returns the least value among `X1,...,XN`. If any argument is `NULL`, returns\n`NULL`. Otherwise, in the case of floating-point arguments, if any argument is\n`NaN`, returns `NaN`. In all other cases, returns the value among `X1,...,XN`\nthat has the least value according to the ordering used by the `ORDER BY`\nclause. The arguments `X1, ..., XN` must be coercible to a common supertype, and\nthe supertype must support ordering.X1,...,XN\n LEAST(X1,...,XN)\n\n\n\n\n 3,5,1\n 1This function supports specifying [collation](https://cloud.google.com/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#least",
	},
	{
		Name:        "LN",
		Method:      "LN(X)",
		Description: "Computes the natural logarithm of X. Generates an error if X is less than or\nequal to zero.X\n LN(X)\n\n\n\n\n 1.0\n 0.0\n\n\n `+inf` `+inf` `X <= 0`\n Error",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#ln",
	},
	{
		Name:        "LOG",
		Method:      "LOG(X [, Y])",
		Description: "If only X is present, `LOG` is a synonym of `LN`. If Y is also present,\n`LOG` computes the logarithm of X to base Y.X\n Y\n LOG(X, Y)\n\n\n\n\n 100.0\n 10.0\n 2.0\n\n\n `-inf`\n Any value\n `NaN`\n\n\n Any value\n `+inf` `NaN` `+inf`\n 0.0 < Y < 1.0\n `-inf` `+inf`\n Y > 1.0\n `+inf`\n\n\n X <= 0\n Any value\n Error\n\n\n Any value\n Y <= 0\n Error\n\n\n Any value\n 1.0\n Error",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#log",
	},
	{
		Name:        "LOG10",
		Method:      "LOG10(X)",
		Description: "Similar to `LOG`, but computes logarithm to base 10.X\n LOG10(X)\n\n\n\n\n 100.0\n 2.0\n\n\n `-inf` `NaN` `+inf` `+inf`\n\n\n X <= 0\n Error",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#log10",
	},
	{
		Name:        "MOD",
		Method:      "MOD(X, Y)",
		Description: "Modulo function: returns the remainder of the division of X by Y. Returned\nvalue has the same sign as X. An error is generated if Y is 0.X\n Y\n MOD(X, Y)\n\n\n\n\n 25\n 12\n 1\n\n\n 25\n 0\n Error",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#mod",
	},
	{
		Name:        "POW",
		Method:      "POW(X, Y)",
		Description: "Returns the value of X raised to the power of Y. If the result underflows and\nisn't representable, then the function returns a value of zero.X\n Y\n POW(X, Y)\n\n\n\n\n 2.0\n 3.0\n 8.0\n\n\n 1.0\n Any value including `NaN`\n 1.0\n\n\n Any value including `NaN`\n 0\n 1.0\n\n\n -1.0\n `+inf`\n 1.0\n\n\n -1.0\n `-inf`\n 1.0\n\n\n ABS(X) < 1\n `-inf` `+inf`\n\n\n ABS(X) > 1\n `-inf`\n 0.0\n\n\n ABS(X) < 1\n `+inf`\n 0.0\n\n\n ABS(X) > 1\n `+inf` `+inf` `-inf`\n Y < 0\n 0.0\n\n\n `-inf`\n Y > 0\n `-inf` if Y is an odd integer, `+inf` otherwise\n\n\n `+inf`\n Y < 0\n 0\n\n\n `+inf`\n Y > 0\n `+inf`\n\n\n Finite value < 0\n Non-integer\n Error\n\n\n 0\n Finite value < 0\n Error",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#pow",
	},
	{
		Name:        "POWER",
		Method:      "POWER(X, Y)",
		Description: "Synonym of [`POW(X, Y)`](#pow).`RAND````\nRAND()\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#power",
	},
	{
		Name:        "RAND",
		Method:      "RAND()",
		Description: "Generates a pseudo-random value of type `FLOAT64` in\nthe range of \\[0, 1), inclusive of 0 and exclusive of 1.`RANGE_BUCKET````\nRANGE_BUCKET(point, boundaries_array)\n\n```",
		ExampleSQLs: []string{
			"WITH students AS\n(\n  SELECT 9 AS age UNION ALL\n  SELECT 20 AS age UNION ALL\n  SELECT 25 AS age UNION ALL\n  SELECT 31 AS age UNION ALL\n  SELECT 32 AS age UNION ALL\n  SELECT 33 AS age\n)\nSELECT RANGE_BUCKET(age, [10, 20, 30]) AS age_group, COUNT(*) AS count\nFROM students\nGROUP BY 1\n\n/*--------------+-------*\n | age_group    | count |\n +--------------+-------+\n | 0            | 1     |\n | 2            | 2     |\n | 3            | 3     |\n *--------------+-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#rand",
	},
	{
		Name:        "RANGE_BUCKET",
		Method:      "RANGE_BUCKET(point, boundaries_array)",
		Description: "`RANGE_BUCKET` scans through a sorted array and returns the 0-based position\nof the point's upper bound. This can be useful if you need to group your data to\nbuild partitions, histograms, business-defined rules, and more.`RANGE_BUCKET` follows these rules:If the point exists in the array, returns the index of the next larger value.\n\n```\nRANGE_BUCKET(20, [0, 10, 20, 30, 40]) -- 3 is return value\nRANGE_BUCKET(20, [0, 10, 20, 20, 40, 40]) -- 4 is return value\n\n```\n\nIf the point doesn't exist in the array, but it falls between two values,\nreturns the index of the larger value.\n\n```\nRANGE_BUCKET(25, [0, 10, 20, 30, 40]) -- 3 is return value\n\n```\n\nIf the point is smaller than the first value in the array, returns 0.\n\n```\nRANGE_BUCKET(-10, [5, 10, 20, 30, 40]) -- 0 is return value\n\n```\n\nIf the point is greater than or equal to the last value in the array,\nreturns the length of the array.\n\n```\nRANGE_BUCKET(80, [0, 10, 20, 30, 40]) -- 5 is return value\n\n```\n\nIf the array is empty, returns 0.\n\n```\nRANGE_BUCKET(80, []) -- 0 is return value\n\n```\n\nIf the point is `NULL` or `NaN`, returns `NULL`.\n\n```\nRANGE_BUCKET(NULL, [0, 10, 20, 30, 40]) -- NULL is return value\n\n```\n\nThe data type for the point and array must be compatible.\n\n```\nRANGE_BUCKET('a', ['a', 'b', 'c', 'd']) -- 1 is return value\nRANGE_BUCKET(1.2, [1, 1.2, 1.4, 1.6]) -- 2 is return value\nRANGE_BUCKET(1.2, [1, 2, 4, 6]) -- execution failure\n\n```Execution failure occurs when:The array has a `NaN` or `NULL` value in it.\n\n```\nRANGE_BUCKET(80, [NULL, 10, 20, 30, 40]) -- execution failure\n\n```\n\nThe array isn't sorted in ascending order.\n\n```\nRANGE_BUCKET(30, [10, 30, 20, 40, 50]) -- execution failure\n\n```",
		ExampleSQLs: []string{
			"WITH students AS\n(\n  SELECT 9 AS age UNION ALL\n  SELECT 20 AS age UNION ALL\n  SELECT 25 AS age UNION ALL\n  SELECT 31 AS age UNION ALL\n  SELECT 32 AS age UNION ALL\n  SELECT 33 AS age\n)\nSELECT RANGE_BUCKET(age, [10, 20, 30]) AS age_group, COUNT(*) AS count\nFROM students\nGROUP BY 1\n\n/*--------------+-------*\n | age_group    | count |\n +--------------+-------+\n | 0            | 1     |\n | 2            | 2     |\n | 3            | 3     |\n *--------------+-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#range_bucket",
	},
	{
		Name:        "ROUND",
		Method:      "ROUND(X [, N [, rounding_mode]])",
		Description: "If only X is present, rounds X to the nearest integer. If N is present,\nrounds X to N decimal places after the decimal point. If N is negative,\nrounds off digits to the left of the decimal point. Rounds halfway cases\naway from zero. Generates an error if overflow occurs.If X is a `NUMERIC` or `BIGNUMERIC` type, then you can\nexplicitly set `rounding_mode`\nto one of the following:[`\"ROUND_HALF_AWAY_FROM_ZERO\"`](https://en.wikipedia.org/wiki/Rounding#Rounding_half_away_from_zero): (Default) Rounds\nhalfway cases away from zero.\n[`\"ROUND_HALF_EVEN\"`](https://en.wikipedia.org/wiki/Rounding#Rounding_half_to_even): Rounds halfway cases\ntowards the nearest even digit.If you set the `rounding_mode` and X isn't a `NUMERIC` or `BIGNUMERIC` type,\nthen the function generates an error.Expression\n Return Value\n\n\n\n\n `ROUND(2.0)`\n 2.0\n\n\n `ROUND(2.3)`\n 2.0\n\n\n `ROUND(2.8)`\n 3.0\n\n\n `ROUND(2.5)`\n 3.0\n\n\n `ROUND(-2.3)`\n -2.0\n\n\n `ROUND(-2.8)`\n -3.0\n\n\n `ROUND(-2.5)`\n -3.0\n\n\n `ROUND(0)`\n 0\n\n\n `ROUND(+inf)` `+inf` `ROUND(-inf)` `-inf` `ROUND(NaN)` `NaN` `ROUND(123.7, -1)`\n 120.0\n\n\n `ROUND(1.235, 2)`\n 1.24\n\n\n `ROUND(NUMERIC \"2.25\", 1, \"ROUND_HALF_EVEN\")`\n 2.2\n\n\n `ROUND(NUMERIC \"2.35\", 1, \"ROUND_HALF_EVEN\")`\n 2.4\n\n\n `ROUND(NUMERIC \"2.251\", 1, \"ROUND_HALF_EVEN\")`\n 2.3\n\n\n `ROUND(NUMERIC \"-2.5\", 0, \"ROUND_HALF_EVEN\")`\n -2\n\n\n `ROUND(NUMERIC \"2.5\", 0, \"ROUND_HALF_AWAY_FROM_ZERO\")`\n 3\n\n\n `ROUND(NUMERIC \"-2.5\", 0, \"ROUND_HALF_AWAY_FROM_ZERO\")`\n -3",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#round",
	},
	{
		Name:        "SAFE_ADD",
		Method:      "SAFE_ADD(X, Y)",
		Description: "Equivalent to the addition operator ( `+`), but returns\n`NULL` if overflow occurs.X\n Y\n SAFE\\_ADD(X, Y)\n\n\n\n\n 5\n 4\n 9",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_add",
	},
	{
		Name:        "SAFE_DIVIDE",
		Method:      "SAFE_DIVIDE(X, Y)",
		Description: "Equivalent to the division operator ( `X / Y`), but returns\n`NULL` if an error occurs, such as a division by zero error.X\n Y\n SAFE\\_DIVIDE(X, Y)\n\n\n\n\n 20\n 4\n 5\n\n\n 0\n 20\n `0`\n\n\n 20\n 0\n `NULL`",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_divide",
	},
	{
		Name:        "SAFE_MULTIPLY",
		Method:      "SAFE_MULTIPLY(X, Y)",
		Description: "Equivalent to the multiplication operator ( `*`), but returns\n`NULL` if overflow occurs.X\n Y\n SAFE\\_MULTIPLY(X, Y)\n\n\n\n\n 20\n 4\n 80",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_multiply",
	},
	{
		Name:        "SAFE_NEGATE",
		Method:      "SAFE_NEGATE(X)",
		Description: "Equivalent to the unary minus operator ( `-`), but returns\n`NULL` if overflow occurs.X\n SAFE\\_NEGATE(X)\n\n\n\n\n +1\n -1\n\n\n -1\n +1\n\n\n 0\n 0",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_negate",
	},
	{
		Name:        "SAFE_SUBTRACT",
		Method:      "SAFE_SUBTRACT(X, Y)",
		Description: "Returns the result of Y subtracted from X.\nEquivalent to the subtraction operator ( `-`), but returns\n`NULL` if overflow occurs.X\n Y\n SAFE\\_SUBTRACT(X, Y)\n\n\n\n\n 5\n 4\n 1",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#safe_subtract",
	},
	{
		Name:        "SEC",
		Method:      "SEC(X)",
		Description: "Computes the secant for the angle of `X`, where `X` is specified in radians.\n`X` can be any data type\nthat [coerces to `FLOAT64`](/bigquery/docs/reference/standard-sql/conversion_rules#conversion_rules).X\n SEC(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN` `NULL` `NULL`",
		ExampleSQLs: []string{
			"SELECT SEC(100) AS a, SEC(-1) AS b;\n\n/*----------------+---------------*\n | a              | b             |\n +----------------+---------------+\n | 1.159663822905 | 1.85081571768 |\n *----------------+---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sec",
	},
	{
		Name:        "SECH",
		Method:      "SECH(X)",
		Description: "Computes the hyperbolic secant for the angle of `X`, where `X` is specified\nin radians. `X` can be any data type\nthat [coerces to `FLOAT64`](/bigquery/docs/reference/standard-sql/conversion_rules#conversion_rules).\nNever produces an error.X\n SECH(X)\n\n\n\n\n `+inf` `0` `-inf` `0` `NaN` `NaN` `NULL` `NULL`",
		ExampleSQLs: []string{
			"SELECT SECH(0.5) AS a, SECH(-2) AS b, SECH(100) AS c;\n\n/*----------------+----------------+---------------------*\n | a              | b              | c                   |\n +----------------+----------------+---------------------+\n | 0.88681888397  | 0.265802228834 | 7.4401519520417E-44 |\n *----------------+----------------+---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sech",
	},
	{
		Name:        "SIGN",
		Method:      "SIGN(X)",
		Description: "Returns `-1`, `0`, or `+1` for negative, zero and positive arguments\nrespectively. For floating point arguments, this function doesn't distinguish\nbetween positive and negative zero.X\n SIGN(X)\n\n\n\n\n 25\n +1\n\n\n 0\n 0\n\n\n -25\n -1\n\n\n NaN\n NaN",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sign",
	},
	{
		Name:        "SIN",
		Method:      "SIN(X)",
		Description: "Computes the sine of X where X is specified in radians. Never fails.X\n SIN(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN``SINH````\nSINH(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sin",
	},
	{
		Name:        "SINH",
		Method:      "SINH(X)",
		Description: "Computes the hyperbolic sine of X where X is specified in radians. Generates\nan error if overflow occurs.X\n SINH(X)\n\n\n\n\n `+inf` `+inf` `-inf` `-inf` `NaN` `NaN``SQRT````\nSQRT(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sinh",
	},
	{
		Name:        "SQRT",
		Method:      "SQRT(X)",
		Description: "Computes the square root of X. Generates an error if X is less than 0.X\n SQRT(X)\n\n\n\n\n `25.0` `5.0` `+inf` `+inf` `X < 0`\n Error",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#sqrt",
	},
	{
		Name:        "TAN",
		Method:      "TAN(X)",
		Description: "Computes the tangent of X where X is specified in radians. Generates an error if\noverflow occurs.X\n TAN(X)\n\n\n\n\n `+inf` `NaN` `-inf` `NaN` `NaN` `NaN``TANH````\nTANH(X)\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#tan",
	},
	{
		Name:        "TANH",
		Method:      "TANH(X)",
		Description: "Computes the hyperbolic tangent of X where X is specified in radians. Doesn't\nfail.X\n TANH(X)\n\n\n\n\n `+inf`\n 1.0\n\n\n `-inf`\n -1.0\n\n\n `NaN` `NaN``TRUNC````\nTRUNC(X [, N])\n\n```",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#tanh",
	},
	{
		Name:        "TRUNC",
		Method:      "TRUNC(X [, N])",
		Description: "If only X is present, `TRUNC` rounds X to the nearest integer whose absolute\nvalue isn't greater than the absolute value of X. If N is also present, `TRUNC`\nbehaves like `ROUND(X, N)`, but always rounds towards zero and never overflows.X\n TRUNC(X)\n\n\n\n\n 2.0\n 2.0\n\n\n 2.3\n 2.0\n\n\n 2.8\n 2.0\n\n\n 2.5\n 2.0\n\n\n -2.3\n -2.0\n\n\n -2.8\n -2.0\n\n\n -2.5\n -2.0\n\n\n 0\n 0\n\n\n `+inf` `+inf` `-inf` `-inf` `NaN` `NaN`",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions#trunc",
	},
	{
		Name:        "FIRST_VALUE",
		Method:      "FIRST_VALUE (value_expression [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n  [ window_frame_clause ]",
		Description: "Returns the value of the `value_expression` for the first row in the current\nwindow frame.This function includes `NULL` values in the calculation unless `IGNORE NULLS` is\npresent. If `IGNORE NULLS` is present, the function excludes `NULL` values from\nthe calculation.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 3:07:41', 'F30-34'\n  UNION ALL SELECT 'Carly Forte', TIMESTAMP '2016-10-18 3:08:58', 'F25-29'\n  UNION ALL SELECT 'Lauren Reasoner', TIMESTAMP '2016-10-18 3:10:14', 'F30-34')\nSELECT name,\n  FORMAT_TIMESTAMP('%X', finish_time) AS finish_time,\n  division,\n  FORMAT_TIMESTAMP('%X', fastest_time) AS fastest_time,\n  TIMESTAMP_DIFF(finish_time, fastest_time, SECOND) AS delta_in_seconds\nFROM (\n  SELECT name,\n  finish_time,\n  division,\n  FIRST_VALUE(finish_time)\n    OVER (PARTITION BY division ORDER BY finish_time ASC\n    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS fastest_time\n  FROM finishers);\n\n/*-----------------+-------------+----------+--------------+------------------*\n | name            | finish_time | division | fastest_time | delta_in_seconds |\n +-----------------+-------------+----------+--------------+------------------+\n | Carly Forte     | 03:08:58    | F25-29   | 03:08:58     | 0                |\n | Sophia Liu      | 02:51:45    | F30-34   | 02:51:45     | 0                |\n | Nikki Leith     | 02:59:01    | F30-34   | 02:51:45     | 436              |\n | Jen Edwards     | 03:06:36    | F30-34   | 02:51:45     | 891              |\n | Meghan Lederer  | 03:07:41    | F30-34   | 02:51:45     | 956              |\n | Lauren Reasoner | 03:10:14    | F30-34   | 02:51:45     | 1109             |\n | Lisa Stelzner   | 02:54:11    | F35-39   | 02:54:11     | 0                |\n | Lauren Matthews | 03:01:17    | F35-39   | 02:54:11     | 426              |\n | Desiree Berry   | 03:05:42    | F35-39   | 02:54:11     | 691              |\n | Suzy Slane      | 03:06:24    | F35-39   | 02:54:11     | 733              |\n *-----------------+-------------+----------+--------------+------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#first_value",
	},
	{
		Name:        "LAG",
		Method:      "LAG (value_expression[, offset [, default_expression]])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]",
		Description: "Returns the value of the `value_expression` on a preceding row. Changing the\n`offset` value changes which preceding row is returned; the default value is\n`1`, indicating the previous row in the window frame. An error occurs if\n`offset` is NULL or a negative value.The optional `default_expression` is used if there isn't a row in the window\nframe at the specified offset. This expression must be a constant expression and\nits type must be implicitly coercible to the type of `value_expression`. If left\nunspecified, `default_expression` defaults to NULL.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 3:07:41', 'F30-34'\n  UNION ALL SELECT 'Carly Forte', TIMESTAMP '2016-10-18 3:08:58', 'F25-29'\n  UNION ALL SELECT 'Lauren Reasoner', TIMESTAMP '2016-10-18 3:10:14', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  LAG(name)\n    OVER (PARTITION BY division ORDER BY finish_time ASC) AS preceding_runner\nFROM finishers;\n\n/*-----------------+-------------+----------+------------------*\n | name            | finish_time | division | preceding_runner |\n +-----------------+-------------+----------+------------------+\n | Carly Forte     | 03:08:58    | F25-29   | NULL             |\n | Sophia Liu      | 02:51:45    | F30-34   | NULL             |\n | Nikki Leith     | 02:59:01    | F30-34   | Sophia Liu       |\n | Jen Edwards     | 03:06:36    | F30-34   | Nikki Leith      |\n | Meghan Lederer  | 03:07:41    | F30-34   | Jen Edwards      |\n | Lauren Reasoner | 03:10:14    | F30-34   | Meghan Lederer   |\n | Lisa Stelzner   | 02:54:11    | F35-39   | NULL             |\n | Lauren Matthews | 03:01:17    | F35-39   | Lisa Stelzner    |\n | Desiree Berry   | 03:05:42    | F35-39   | Lauren Matthews  |\n | Suzy Slane      | 03:06:24    | F35-39   | Desiree Berry    |\n *-----------------+-------------+----------+------------------*/",
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 3:07:41', 'F30-34'\n  UNION ALL SELECT 'Carly Forte', TIMESTAMP '2016-10-18 3:08:58', 'F25-29'\n  UNION ALL SELECT 'Lauren Reasoner', TIMESTAMP '2016-10-18 3:10:14', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  LAG(name, 2)\n    OVER (PARTITION BY division ORDER BY finish_time ASC) AS two_runners_ahead\nFROM finishers;\n\n/*-----------------+-------------+----------+-------------------*\n | name            | finish_time | division | two_runners_ahead |\n +-----------------+-------------+----------+-------------------+\n | Carly Forte     | 03:08:58    | F25-29   | NULL              |\n | Sophia Liu      | 02:51:45    | F30-34   | NULL              |\n | Nikki Leith     | 02:59:01    | F30-34   | NULL              |\n | Jen Edwards     | 03:06:36    | F30-34   | Sophia Liu        |\n | Meghan Lederer  | 03:07:41    | F30-34   | Nikki Leith       |\n | Lauren Reasoner | 03:10:14    | F30-34   | Jen Edwards       |\n | Lisa Stelzner   | 02:54:11    | F35-39   | NULL              |\n | Lauren Matthews | 03:01:17    | F35-39   | NULL              |\n | Desiree Berry   | 03:05:42    | F35-39   | Lisa Stelzner     |\n | Suzy Slane      | 03:06:24    | F35-39   | Lauren Matthews   |\n *-----------------+-------------+----------+-------------------*/",
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 3:07:41', 'F30-34'\n  UNION ALL SELECT 'Carly Forte', TIMESTAMP '2016-10-18 3:08:58', 'F25-29'\n  UNION ALL SELECT 'Lauren Reasoner', TIMESTAMP '2016-10-18 3:10:14', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  LAG(name, 2, 'Nobody')\n    OVER (PARTITION BY division ORDER BY finish_time ASC) AS two_runners_ahead\nFROM finishers;\n\n/*-----------------+-------------+----------+-------------------*\n | name            | finish_time | division | two_runners_ahead |\n +-----------------+-------------+----------+-------------------+\n | Carly Forte     | 03:08:58    | F25-29   | Nobody            |\n | Sophia Liu      | 02:51:45    | F30-34   | Nobody            |\n | Nikki Leith     | 02:59:01    | F30-34   | Nobody            |\n | Jen Edwards     | 03:06:36    | F30-34   | Sophia Liu        |\n | Meghan Lederer  | 03:07:41    | F30-34   | Nikki Leith       |\n | Lauren Reasoner | 03:10:14    | F30-34   | Jen Edwards       |\n | Lisa Stelzner   | 02:54:11    | F35-39   | Nobody            |\n | Lauren Matthews | 03:01:17    | F35-39   | Nobody            |\n | Desiree Berry   | 03:05:42    | F35-39   | Lisa Stelzner     |\n | Suzy Slane      | 03:06:24    | F35-39   | Lauren Matthews   |\n *-----------------+-------------+----------+-------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#lag",
	},
	{
		Name:        "LAST_VALUE",
		Method:      "LAST_VALUE (value_expression [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n  [ window_frame_clause ]",
		Description: "Returns the value of the `value_expression` for the last row in the current\nwindow frame.This function includes `NULL` values in the calculation unless `IGNORE NULLS` is\npresent. If `IGNORE NULLS` is present, the function excludes `NULL` values from\nthe calculation.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 3:07:41', 'F30-34'\n  UNION ALL SELECT 'Carly Forte', TIMESTAMP '2016-10-18 3:08:58', 'F25-29'\n  UNION ALL SELECT 'Lauren Reasoner', TIMESTAMP '2016-10-18 3:10:14', 'F30-34')\nSELECT name,\n  FORMAT_TIMESTAMP('%X', finish_time) AS finish_time,\n  division,\n  FORMAT_TIMESTAMP('%X', slowest_time) AS slowest_time,\n  TIMESTAMP_DIFF(slowest_time, finish_time, SECOND) AS delta_in_seconds\nFROM (\n  SELECT name,\n  finish_time,\n  division,\n  LAST_VALUE(finish_time)\n    OVER (PARTITION BY division ORDER BY finish_time ASC\n    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS slowest_time\n  FROM finishers);\n\n/*-----------------+-------------+----------+--------------+------------------*\n | name            | finish_time | division | slowest_time | delta_in_seconds |\n +-----------------+-------------+----------+--------------+------------------+\n | Carly Forte     | 03:08:58    | F25-29   | 03:08:58     | 0                |\n | Sophia Liu      | 02:51:45    | F30-34   | 03:10:14     | 1109             |\n | Nikki Leith     | 02:59:01    | F30-34   | 03:10:14     | 673              |\n | Jen Edwards     | 03:06:36    | F30-34   | 03:10:14     | 218              |\n | Meghan Lederer  | 03:07:41    | F30-34   | 03:10:14     | 153              |\n | Lauren Reasoner | 03:10:14    | F30-34   | 03:10:14     | 0                |\n | Lisa Stelzner   | 02:54:11    | F35-39   | 03:06:24     | 733              |\n | Lauren Matthews | 03:01:17    | F35-39   | 03:06:24     | 307              |\n | Desiree Berry   | 03:05:42    | F35-39   | 03:06:24     | 42               |\n | Suzy Slane      | 03:06:24    | F35-39   | 03:06:24     | 0                |\n *-----------------+-------------+----------+--------------+------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#last_value",
	},
	{
		Name:        "LEAD",
		Method:      "LEAD (value_expression[, offset [, default_expression]])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]",
		Description: "Returns the value of the `value_expression` on a subsequent row. Changing the\n`offset` value changes which subsequent row is returned; the default value is\n`1`, indicating the next row in the window frame. An error occurs if `offset` is\nNULL or a negative value.The optional `default_expression` is used if there isn't a row in the window\nframe at the specified offset. This expression must be a constant expression and\nits type must be implicitly coercible to the type of `value_expression`. If left\nunspecified, `default_expression` defaults to NULL.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 3:07:41', 'F30-34'\n  UNION ALL SELECT 'Carly Forte', TIMESTAMP '2016-10-18 3:08:58', 'F25-29'\n  UNION ALL SELECT 'Lauren Reasoner', TIMESTAMP '2016-10-18 3:10:14', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  LEAD(name)\n    OVER (PARTITION BY division ORDER BY finish_time ASC) AS followed_by\nFROM finishers;\n\n/*-----------------+-------------+----------+-----------------*\n | name            | finish_time | division | followed_by     |\n +-----------------+-------------+----------+-----------------+\n | Carly Forte     | 03:08:58    | F25-29   | NULL            |\n | Sophia Liu      | 02:51:45    | F30-34   | Nikki Leith     |\n | Nikki Leith     | 02:59:01    | F30-34   | Jen Edwards     |\n | Jen Edwards     | 03:06:36    | F30-34   | Meghan Lederer  |\n | Meghan Lederer  | 03:07:41    | F30-34   | Lauren Reasoner |\n | Lauren Reasoner | 03:10:14    | F30-34   | NULL            |\n | Lisa Stelzner   | 02:54:11    | F35-39   | Lauren Matthews |\n | Lauren Matthews | 03:01:17    | F35-39   | Desiree Berry   |\n | Desiree Berry   | 03:05:42    | F35-39   | Suzy Slane      |\n | Suzy Slane      | 03:06:24    | F35-39   | NULL            |\n *-----------------+-------------+----------+-----------------*/",
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 3:07:41', 'F30-34'\n  UNION ALL SELECT 'Carly Forte', TIMESTAMP '2016-10-18 3:08:58', 'F25-29'\n  UNION ALL SELECT 'Lauren Reasoner', TIMESTAMP '2016-10-18 3:10:14', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  LEAD(name, 2)\n    OVER (PARTITION BY division ORDER BY finish_time ASC) AS two_runners_back\nFROM finishers;\n\n/*-----------------+-------------+----------+------------------*\n | name            | finish_time | division | two_runners_back |\n +-----------------+-------------+----------+------------------+\n | Carly Forte     | 03:08:58    | F25-29   | NULL             |\n | Sophia Liu      | 02:51:45    | F30-34   | Jen Edwards      |\n | Nikki Leith     | 02:59:01    | F30-34   | Meghan Lederer   |\n | Jen Edwards     | 03:06:36    | F30-34   | Lauren Reasoner  |\n | Meghan Lederer  | 03:07:41    | F30-34   | NULL             |\n | Lauren Reasoner | 03:10:14    | F30-34   | NULL             |\n | Lisa Stelzner   | 02:54:11    | F35-39   | Desiree Berry    |\n | Lauren Matthews | 03:01:17    | F35-39   | Suzy Slane       |\n | Desiree Berry   | 03:05:42    | F35-39   | NULL             |\n | Suzy Slane      | 03:06:24    | F35-39   | NULL             |\n *-----------------+-------------+----------+------------------*/",
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 3:07:41', 'F30-34'\n  UNION ALL SELECT 'Carly Forte', TIMESTAMP '2016-10-18 3:08:58', 'F25-29'\n  UNION ALL SELECT 'Lauren Reasoner', TIMESTAMP '2016-10-18 3:10:14', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  LEAD(name, 2, 'Nobody')\n    OVER (PARTITION BY division ORDER BY finish_time ASC) AS two_runners_back\nFROM finishers;\n\n/*-----------------+-------------+----------+------------------*\n | name            | finish_time | division | two_runners_back |\n +-----------------+-------------+----------+------------------+\n | Carly Forte     | 03:08:58    | F25-29   | Nobody           |\n | Sophia Liu      | 02:51:45    | F30-34   | Jen Edwards      |\n | Nikki Leith     | 02:59:01    | F30-34   | Meghan Lederer   |\n | Jen Edwards     | 03:06:36    | F30-34   | Lauren Reasoner  |\n | Meghan Lederer  | 03:07:41    | F30-34   | Nobody           |\n | Lauren Reasoner | 03:10:14    | F30-34   | Nobody           |\n | Lisa Stelzner   | 02:54:11    | F35-39   | Desiree Berry    |\n | Lauren Matthews | 03:01:17    | F35-39   | Suzy Slane       |\n | Desiree Berry   | 03:05:42    | F35-39   | Nobody           |\n | Suzy Slane      | 03:06:24    | F35-39   | Nobody           |\n *-----------------+-------------+----------+------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#lead",
	},
	{
		Name:        "NTH_VALUE",
		Method:      "NTH_VALUE (value_expression, constant_integer_expression [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]\n  [ window_frame_clause ]",
		Description: "Returns the value of `value_expression` at the Nth row of the current window\nframe, where Nth is defined by `constant_integer_expression`. Returns NULL if\nthere is no such row.This function includes `NULL` values in the calculation unless `IGNORE NULLS` is\npresent. If `IGNORE NULLS` is present, the function excludes `NULL` values from\nthe calculation.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 3:07:41', 'F30-34'\n  UNION ALL SELECT 'Carly Forte', TIMESTAMP '2016-10-18 3:08:58', 'F25-29'\n  UNION ALL SELECT 'Lauren Reasoner', TIMESTAMP '2016-10-18 3:10:14', 'F30-34')\nSELECT name,\n  FORMAT_TIMESTAMP('%X', finish_time) AS finish_time,\n  division,\n  FORMAT_TIMESTAMP('%X', fastest_time) AS fastest_time,\n  FORMAT_TIMESTAMP('%X', second_fastest) AS second_fastest\nFROM (\n  SELECT name,\n  finish_time,\n  division,finishers,\n  FIRST_VALUE(finish_time)\n    OVER w1 AS fastest_time,\n  NTH_VALUE(finish_time, 2)\n    OVER w1 as second_fastest\n  FROM finishers\n  WINDOW w1 AS (\n    PARTITION BY division ORDER BY finish_time ASC\n    ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING));\n\n/*-----------------+-------------+----------+--------------+----------------*\n | name            | finish_time | division | fastest_time | second_fastest |\n +-----------------+-------------+----------+--------------+----------------+\n | Carly Forte     | 03:08:58    | F25-29   | 03:08:58     | NULL           |\n | Sophia Liu      | 02:51:45    | F30-34   | 02:51:45     | 02:59:01       |\n | Nikki Leith     | 02:59:01    | F30-34   | 02:51:45     | 02:59:01       |\n | Jen Edwards     | 03:06:36    | F30-34   | 02:51:45     | 02:59:01       |\n | Meghan Lederer  | 03:07:41    | F30-34   | 02:51:45     | 02:59:01       |\n | Lauren Reasoner | 03:10:14    | F30-34   | 02:51:45     | 02:59:01       |\n | Lisa Stelzner   | 02:54:11    | F35-39   | 02:54:11     | 03:01:17       |\n | Lauren Matthews | 03:01:17    | F35-39   | 02:54:11     | 03:01:17       |\n | Desiree Berry   | 03:05:42    | F35-39   | 02:54:11     | 03:01:17       |\n | Suzy Slane      | 03:06:24    | F35-39   | 02:54:11     | 03:01:17       |\n *-----------------+-------------+----------+--------------+----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#nth_value",
	},
	{
		Name:        "PERCENTILE_CONT",
		Method:      "PERCENTILE_CONT (value_expression, percentile [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]",
		Description: "Computes the specified percentile value for the value\\_expression, with linear\ninterpolation.This function ignores NULL\nvalues if\n`RESPECT NULLS` is absent. If `RESPECT NULLS` is present:Interpolation between two `NULL` values returns `NULL`.\nInterpolation between a `NULL` value and a non- `NULL` value returns the\nnon- `NULL` value.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).`PERCENTILE_CONT` can be used with differential privacy. To learn more, see\n[Differentially private aggregate functions](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-dp-functions).",
		ExampleSQLs: []string{
			"SELECT\n  PERCENTILE_CONT(x, 0) OVER() AS min,\n  PERCENTILE_CONT(x, 0.01) OVER() AS percentile1,\n  PERCENTILE_CONT(x, 0.5) OVER() AS median,\n  PERCENTILE_CONT(x, 0.9) OVER() AS percentile90,\n  PERCENTILE_CONT(x, 1) OVER() AS max\nFROM UNNEST([0, 3, NULL, 1, 2]) AS x LIMIT 1;\n\n /*-----+-------------+--------+--------------+-----*\n  | min | percentile1 | median | percentile90 | max |\n  +-----+-------------+--------+--------------+-----+\n  | 0   | 0.03        | 1.5    | 2.7          | 3   |\n  *-----+-------------+--------+--------------+-----*/",
			"SELECT\n  PERCENTILE_CONT(x, 0 RESPECT NULLS) OVER() AS min,\n  PERCENTILE_CONT(x, 0.01 RESPECT NULLS) OVER() AS percentile1,\n  PERCENTILE_CONT(x, 0.5 RESPECT NULLS) OVER() AS median,\n  PERCENTILE_CONT(x, 0.9 RESPECT NULLS) OVER() AS percentile90,\n  PERCENTILE_CONT(x, 1 RESPECT NULLS) OVER() AS max\nFROM UNNEST([0, 3, NULL, 1, 2]) AS x LIMIT 1;\n\n/*------+-------------+--------+--------------+-----*\n | min  | percentile1 | median | percentile90 | max |\n +------+-------------+--------+--------------+-----+\n | NULL | 0           | 1      | 2.6          | 3   |\n *------+-------------+--------+--------------+-----*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#percentile_cont",
	},
	{
		Name:        "PERCENTILE_DISC",
		Method:      "PERCENTILE_DISC (value_expression, percentile [{RESPECT | IGNORE} NULLS])\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]",
		Description: "Computes the specified percentile value for a discrete `value_expression`. The\nreturned value is the first sorted value of `value_expression` with cumulative\ndistribution greater than or equal to the given `percentile` value.This function ignores `NULL`\nvalues unless\n`RESPECT NULLS` is present.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT\n  x,\n  PERCENTILE_DISC(x, 0) OVER() AS min,\n  PERCENTILE_DISC(x, 0.5) OVER() AS median,\n  PERCENTILE_DISC(x, 1) OVER() AS max\nFROM UNNEST(['c', NULL, 'b', 'a']) AS x;\n\n/*------+-----+--------+-----*\n | x    | min | median | max |\n +------+-----+--------+-----+\n | c    | a   | b      | c   |\n | NULL | a   | b      | c   |\n | b    | a   | b      | c   |\n | a    | a   | b      | c   |\n *------+-----+--------+-----*/",
			"SELECT\n  x,\n  PERCENTILE_DISC(x, 0 RESPECT NULLS) OVER() AS min,\n  PERCENTILE_DISC(x, 0.5 RESPECT NULLS) OVER() AS median,\n  PERCENTILE_DISC(x, 1 RESPECT NULLS) OVER() AS max\nFROM UNNEST(['c', NULL, 'b', 'a']) AS x;\n\n/*------+------+--------+-----*\n | x    | min  | median | max |\n +------+------+--------+-----+\n | c    | NULL | a      | c   |\n | NULL | NULL | a      | c   |\n | b    | NULL | a      | c   |\n | a    | NULL | a      | c   |\n *------+------+--------+-----*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions#percentile_disc",
	},
	{
		Name:        "CUME_DIST",
		Method:      "CUME_DIST()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]",
		Description: "Return the relative rank of a row defined as NP/NR. NP is defined to be the\nnumber of rows that either precede or are peers with the current row. NR is the\nnumber of rows in the partition.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 2:59:01', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  CUME_DIST() OVER (PARTITION BY division ORDER BY finish_time ASC) AS finish_rank\nFROM finishers;\n\n/*-----------------+------------------------+----------+-------------*\n | name            | finish_time            | division | finish_rank |\n +-----------------+------------------------+----------+-------------+\n | Sophia Liu      | 2016-10-18 09:51:45+00 | F30-34   | 0.25        |\n | Meghan Lederer  | 2016-10-18 09:59:01+00 | F30-34   | 0.75        |\n | Nikki Leith     | 2016-10-18 09:59:01+00 | F30-34   | 0.75        |\n | Jen Edwards     | 2016-10-18 10:06:36+00 | F30-34   | 1           |\n | Lisa Stelzner   | 2016-10-18 09:54:11+00 | F35-39   | 0.25        |\n | Lauren Matthews | 2016-10-18 10:01:17+00 | F35-39   | 0.5         |\n | Desiree Berry   | 2016-10-18 10:05:42+00 | F35-39   | 0.75        |\n | Suzy Slane      | 2016-10-18 10:06:24+00 | F35-39   | 1           |\n *-----------------+------------------------+----------+-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#cume_dist",
	},
	{
		Name:        "DENSE_RANK",
		Method:      "DENSE_RANK()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]",
		Description: "Returns the ordinal (1-based) rank of each row within the window partition.\nAll peer rows receive the same rank value, and the subsequent rank value is\nincremented by one.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH Numbers AS\n (SELECT 1 as x\n  UNION ALL SELECT 2\n  UNION ALL SELECT 2\n  UNION ALL SELECT 5\n  UNION ALL SELECT 8\n  UNION ALL SELECT 10\n  UNION ALL SELECT 10\n)\nSELECT x,\n  DENSE_RANK() OVER (ORDER BY x ASC) AS dense_rank\nFROM Numbers\n\n/*-------------------------*\n | x          | dense_rank |\n +-------------------------+\n | 1          | 1          |\n | 2          | 2          |\n | 2          | 2          |\n | 5          | 3          |\n | 8          | 4          |\n | 10         | 5          |\n | 10         | 5          |\n *-------------------------*/",
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 2:59:01', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  DENSE_RANK() OVER (PARTITION BY division ORDER BY finish_time ASC) AS finish_rank\nFROM finishers;\n\n/*-----------------+------------------------+----------+-------------*\n | name            | finish_time            | division | finish_rank |\n +-----------------+------------------------+----------+-------------+\n | Sophia Liu      | 2016-10-18 09:51:45+00 | F30-34   | 1           |\n | Meghan Lederer  | 2016-10-18 09:59:01+00 | F30-34   | 2           |\n | Nikki Leith     | 2016-10-18 09:59:01+00 | F30-34   | 2           |\n | Jen Edwards     | 2016-10-18 10:06:36+00 | F30-34   | 3           |\n | Lisa Stelzner   | 2016-10-18 09:54:11+00 | F35-39   | 1           |\n | Lauren Matthews | 2016-10-18 10:01:17+00 | F35-39   | 2           |\n | Desiree Berry   | 2016-10-18 10:05:42+00 | F35-39   | 3           |\n | Suzy Slane      | 2016-10-18 10:06:24+00 | F35-39   | 4           |\n *-----------------+------------------------+----------+-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#dense_rank",
	},
	{
		Name:        "NTILE",
		Method:      "NTILE(constant_integer_expression)\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]",
		Description: "This function divides the rows into `constant_integer_expression`\nbuckets based on row ordering and returns the 1-based bucket number that is\nassigned to each row. The number of rows in the buckets can differ by at most 1.\nThe remainder values (the remainder of number of rows divided by buckets) are\ndistributed one for each bucket, starting with bucket 1. If\n`constant_integer_expression` evaluates to NULL, 0 or negative, an\nerror is provided.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 2:59:01', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  NTILE(3) OVER (PARTITION BY division ORDER BY finish_time ASC) AS finish_rank\nFROM finishers;\n\n/*-----------------+------------------------+----------+-------------*\n | name            | finish_time            | division | finish_rank |\n +-----------------+------------------------+----------+-------------+\n | Sophia Liu      | 2016-10-18 09:51:45+00 | F30-34   | 1           |\n | Meghan Lederer  | 2016-10-18 09:59:01+00 | F30-34   | 1           |\n | Nikki Leith     | 2016-10-18 09:59:01+00 | F30-34   | 2           |\n | Jen Edwards     | 2016-10-18 10:06:36+00 | F30-34   | 3           |\n | Lisa Stelzner   | 2016-10-18 09:54:11+00 | F35-39   | 1           |\n | Lauren Matthews | 2016-10-18 10:01:17+00 | F35-39   | 1           |\n | Desiree Berry   | 2016-10-18 10:05:42+00 | F35-39   | 2           |\n | Suzy Slane      | 2016-10-18 10:06:24+00 | F35-39   | 3           |\n *-----------------+------------------------+----------+-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#ntile",
	},
	{
		Name:        "PERCENT_RANK",
		Method:      "PERCENT_RANK()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]",
		Description: "Return the percentile rank of a row defined as (RK-1)/(NR-1), where RK is\nthe `RANK` of the row and NR is the number of rows in the partition.\nReturns 0 if NR=1.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 2:59:01', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  PERCENT_RANK() OVER (PARTITION BY division ORDER BY finish_time ASC) AS finish_rank\nFROM finishers;\n\n/*-----------------+------------------------+----------+---------------------*\n | name            | finish_time            | division | finish_rank         |\n +-----------------+------------------------+----------+---------------------+\n | Sophia Liu      | 2016-10-18 09:51:45+00 | F30-34   | 0                   |\n | Meghan Lederer  | 2016-10-18 09:59:01+00 | F30-34   | 0.33333333333333331 |\n | Nikki Leith     | 2016-10-18 09:59:01+00 | F30-34   | 0.33333333333333331 |\n | Jen Edwards     | 2016-10-18 10:06:36+00 | F30-34   | 1                   |\n | Lisa Stelzner   | 2016-10-18 09:54:11+00 | F35-39   | 0                   |\n | Lauren Matthews | 2016-10-18 10:01:17+00 | F35-39   | 0.33333333333333331 |\n | Desiree Berry   | 2016-10-18 10:05:42+00 | F35-39   | 0.66666666666666663 |\n | Suzy Slane      | 2016-10-18 10:06:24+00 | F35-39   | 1                   |\n *-----------------+------------------------+----------+---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#percent_rank",
	},
	{
		Name:        "RANK",
		Method:      "RANK()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  ORDER BY expression [ { ASC | DESC }  ] [, ...]",
		Description: "Returns the ordinal (1-based) rank of each row within the ordered partition.\nAll peer rows receive the same rank value. The next row or set of peer rows\nreceives a rank value which increments by the number of peers with the previous\nrank value, instead of `DENSE_RANK`, which always increments by 1.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH Numbers AS\n (SELECT 1 as x\n  UNION ALL SELECT 2\n  UNION ALL SELECT 2\n  UNION ALL SELECT 5\n  UNION ALL SELECT 8\n  UNION ALL SELECT 10\n  UNION ALL SELECT 10\n)\nSELECT x,\n  RANK() OVER (ORDER BY x ASC) AS rank\nFROM Numbers\n\n/*-------------------------*\n | x          | rank       |\n +-------------------------+\n | 1          | 1          |\n | 2          | 2          |\n | 2          | 2          |\n | 5          | 4          |\n | 8          | 5          |\n | 10         | 6          |\n | 10         | 6          |\n *-------------------------*/",
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 2:59:01', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  RANK() OVER (PARTITION BY division ORDER BY finish_time ASC) AS finish_rank\nFROM finishers;\n\n/*-----------------+------------------------+----------+-------------*\n | name            | finish_time            | division | finish_rank |\n +-----------------+------------------------+----------+-------------+\n | Sophia Liu      | 2016-10-18 09:51:45+00 | F30-34   | 1           |\n | Meghan Lederer  | 2016-10-18 09:59:01+00 | F30-34   | 2           |\n | Nikki Leith     | 2016-10-18 09:59:01+00 | F30-34   | 2           |\n | Jen Edwards     | 2016-10-18 10:06:36+00 | F30-34   | 4           |\n | Lisa Stelzner   | 2016-10-18 09:54:11+00 | F35-39   | 1           |\n | Lauren Matthews | 2016-10-18 10:01:17+00 | F35-39   | 2           |\n | Desiree Berry   | 2016-10-18 10:05:42+00 | F35-39   | 3           |\n | Suzy Slane      | 2016-10-18 10:06:24+00 | F35-39   | 4           |\n *-----------------+------------------------+----------+-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#rank",
	},
	{
		Name:        "ROW_NUMBER",
		Method:      "ROW_NUMBER()\nOVER over_clause\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]",
		Description: "Doesn't require the `ORDER BY` clause. Returns the sequential\nrow ordinal (1-based) of each row for each ordered partition. If the\n`ORDER BY` clause is unspecified then the result is\nnon-deterministic.To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"WITH Numbers AS\n (SELECT 1 as x\n  UNION ALL SELECT 2\n  UNION ALL SELECT 2\n  UNION ALL SELECT 5\n  UNION ALL SELECT 8\n  UNION ALL SELECT 10\n  UNION ALL SELECT 10\n)\nSELECT x,\n  ROW_NUMBER() OVER (ORDER BY x) AS row_num\nFROM Numbers\n\n/*-------------------------*\n | x          | row_num    |\n +-------------------------+\n | 1          | 1          |\n | 2          | 2          |\n | 2          | 3          |\n | 5          | 4          |\n | 8          | 5          |\n | 10         | 6          |\n | 10         | 7          |\n *-------------------------*/",
			"WITH finishers AS\n (SELECT 'Sophia Liu' as name,\n  TIMESTAMP '2016-10-18 2:51:45' as finish_time,\n  'F30-34' as division\n  UNION ALL SELECT 'Lisa Stelzner', TIMESTAMP '2016-10-18 2:54:11', 'F35-39'\n  UNION ALL SELECT 'Nikki Leith', TIMESTAMP '2016-10-18 2:59:01', 'F30-34'\n  UNION ALL SELECT 'Lauren Matthews', TIMESTAMP '2016-10-18 3:01:17', 'F35-39'\n  UNION ALL SELECT 'Desiree Berry', TIMESTAMP '2016-10-18 3:05:42', 'F35-39'\n  UNION ALL SELECT 'Suzy Slane', TIMESTAMP '2016-10-18 3:06:24', 'F35-39'\n  UNION ALL SELECT 'Jen Edwards', TIMESTAMP '2016-10-18 3:06:36', 'F30-34'\n  UNION ALL SELECT 'Meghan Lederer', TIMESTAMP '2016-10-18 2:59:01', 'F30-34')\nSELECT name,\n  finish_time,\n  division,\n  ROW_NUMBER() OVER (PARTITION BY division ORDER BY finish_time ASC) AS finish_rank\nFROM finishers;\n\n/*-----------------+------------------------+----------+-------------*\n | name            | finish_time            | division | finish_rank |\n +-----------------+------------------------+----------+-------------+\n | Sophia Liu      | 2016-10-18 09:51:45+00 | F30-34   | 1           |\n | Meghan Lederer  | 2016-10-18 09:59:01+00 | F30-34   | 2           |\n | Nikki Leith     | 2016-10-18 09:59:01+00 | F30-34   | 3           |\n | Jen Edwards     | 2016-10-18 10:06:36+00 | F30-34   | 4           |\n | Lisa Stelzner   | 2016-10-18 09:54:11+00 | F35-39   | 1           |\n | Lauren Matthews | 2016-10-18 10:01:17+00 | F35-39   | 2           |\n | Desiree Berry   | 2016-10-18 10:05:42+00 | F35-39   | 3           |\n | Suzy Slane      | 2016-10-18 10:06:24+00 | F35-39   | 4           |\n *-----------------+------------------------+----------+-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions#row_number",
	},
	{
		Name:        "SEARCH",
		Method:      "SEARCH(\n  data_to_search, search_query\n  [, json_scope => { 'JSON_VALUES' | 'JSON_KEYS' | 'JSON_KEYS_AND_VALUES' } ]\n  [, analyzer => { 'LOG_ANALYZER' | 'NO_OP_ANALYZER' | 'PATTERN_ANALYZER'} ]\n  [, analyzer_options => analyzer_options_values ]\n)",
		Description: "The `SEARCH` function checks to see whether a BigQuery table or other\nsearch data contains a set of search terms (tokens). It returns `TRUE` if all\nsearch terms appear in the data, based on the [rules for search\\_query](#search_query_rules)\nand text analysis described in the [text analyzer](https://cloud.google.com/bigquery/docs/reference/standard-sql/text-analysis). Otherwise,\nthis function returns `FALSE`.",
		ExampleSQLs: []string{
			"LOG_ANALYZER`Hello World` happy daysHello Worldhappydaysdata_to_searchdata_to_searchdata_to_searchSEARCH('foo.bar', '`foo.`')FALSEfoo.bfoo.barSEARCH('foo..bar', '`foo.`')TRUEfoo..analyzer_options-- FALSE because backticks require an exact match, including capitalization\nSELECT\n  SEARCH( 'Hello-world', '`WORLD`',\n    analyzer=>'LOG_ANALYZER',\n    analyzer_options=>'''\n    {\n      \"token_filters\": [\n        {\n          \"normalizer\": {\"mode\": \"LOWER\"}\n        }\n      ]\n    }'''\n  ) AS results\n\\`foobar\\`ANDNOTORINNEAR",
			"analyzerLOG_ANALYZERPATTERN_ANALYZERLOG_ANALYZER\"foo baz.bar\"LOG_ANALYZERfoobazbardata_to_search-- FALSE because 'foo' and 'bar' aren't next to each other in\n-- 'foo baz.bar'.\nSEARCH('foo baz.bar', '\"foo bar\"')\n-- TRUE because 'foo' and 'baz' are next to each other in\n-- 'foo baz.bar'.\nSEARCH('foo baz.bar', '\"foo baz\"')",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/search_functions#search",
	},
	{
		Name:        "VECTOR_SEARCH",
		Method:      "VECTOR_SEARCH(\n  {TABLE base_table | base_table_query_statement},\n  column_to_search,\n  TABLE query_table\n  [, query_column_to_search => query_column_to_search_value]\n  [, top_k => top_k_value ]\n  [, distance_type => distance_type_value ]\n  [, options => options_value ]\n)",
		Description: "The `VECTOR_SEARCH` function lets you search embeddings to find semantically\nsimilar entities.Embeddings are high-dimensional numerical vectors that represent a given entity,\nlike a piece of text or an audio file. Machine learning (ML) models use\nembeddings to encode semantics about such entities to make it easier to\nreason about and compare them. For example, a common operation in clustering,\nclassification, and recommendation models is to measure the distance between\nvectors in an [embedding space](https://en.wikipedia.org/wiki/Latent_space) to\nfind items that are most semantically similar.",
		ExampleSQLs: []string{
			"CREATE OR REPLACE TABLE mydataset.table1\n(\n  id INT64,\n  my_embedding ARRAY<FLOAT64>\n);\n\nINSERT mydataset.table1 (id, my_embedding)\nVALUES(1, [1.0, 2.0]),\n(2, [2.0, 4.0]),\n(3, [1.5, 7.0]),\n(4, [1.0, 3.2]),\n(5, [5.0, 5.4]),\n(6, [3.7, 1.8]),\n(7, [4.4, 2.9]);",
			"CREATE OR REPLACE TABLE mydataset.table2\n(\n  query_id STRING,\n  embedding ARRAY<FLOAT64>\n);\n\nINSERT mydataset.table2 (query_id, embedding)\nVALUES('dog', [1.0, 2.0]),\n('cat', [3.0, 5.2]);",
			"SELECT *\nFROM\n  VECTOR_SEARCH(\n    TABLE mydataset.table1,\n    'my_embedding',\n    (SELECT query_id, embedding FROM mydataset.table2),\n    'embedding',\n    top_k => 2);\n\n/*----------------+-----------------+---------+----------------------------------------*\n | query.query_id | query.embedding | base.id | base.my_embedding | distance           |\n +----------------+-----------------+---------+-------------------+--------------------+\n | dog            | 1.0             | 1       | 1.0               | 0                  |\n |                | 2.0             |         | 2.0               |                    |\n +----------------+-----------------+---------+-------------------+--------------------+\n | dog            | 1.0             | 4       | 1.0               | 1.2000000000000002 |\n |                | 2.0             |         | 3.2               |                    |\n +----------------+-----------------+---------+-------------------+--------------------+\n | cat            | 3.0             | 2       | 2.0               | 1.5620499351813311 |\n |                | 5.2             |         | 4.0               |                    |\n +----------------+-----------------+---------+-------------------+--------------------+\n | cat            | 3.0             | 5       | 5.0               | 2.0099751242241779 |\n |                | 5.2             |         | 5.4               |                    |\n *----------------+-----------------+---------+-------------------+--------------------*/",
			"SELECT *\nFROM\n  VECTOR_SEARCH(\n    (SELECT * FROM mydataset.table1 WHERE id != 4),\n    'my_embedding',\n    (SELECT query_id, embedding FROM mydataset.table2),\n    'embedding',\n    top_k => 2,\n    options => '{\"use_brute_force\":true}');\n\n/*----------------+-----------------+---------+----------------------------------------*\n | query.query_id | query.embedding | base.id | base.my_embedding | distance           |\n +----------------+-----------------+---------+-------------------+--------------------+\n | dog            | 1.0             | 1       | 1.0               | 0                  |\n |                | 2.0             |         | 2.0               |                    |\n +----------------+-----------------+---------+-------------------+--------------------+\n | dog            | 1.0             | 2       | 2.0               | 2.23606797749979   |\n |                | 2.0             |         | 4.0               |                    |\n +----------------+-----------------+---------+-------------------+--------------------+\n | cat            | 3.0             | 2       | 2.0               | 1.5620499351813311 |\n |                | 5.2             |         | 4.0               |                    |\n +----------------+-----------------+---------+-------------------+--------------------+\n | cat            | 3.0             | 5       | 5.0               | 2.0099751242241779 |\n |                | 5.2             |         | 5.4               |                    |\n *----------------+-----------------+---------+-------------------+--------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/search_functions#vector_search",
	},
	{
		Name:        "SESSION_USER",
		Method:      "SESSION_USER()",
		Description: "For first-party users, returns the email address of the user that's running the\nquery.\nFor third-party users, returns the\n[principal identifier](https://cloud.google.com/iam/docs/principal-identifiers)\nof the user that's running the query.\nFor more information about identities, see\n[Principals](https://cloud.google.com/docs/authentication#principal).",
		ExampleSQLs: []string{
			"SELECT SESSION_USER() as user;\n\n/*----------------------*\n | user                 |\n +----------------------+\n | jdoe@example.com     |\n *----------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/security_functions#session_user",
	},
	{
		Name:        "CORR",
		Method:      "CORR(\n  X1, X2\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the [Pearson coefficient](https://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient)\nof correlation of a set of number pairs. For each number pair, the first number\nis the dependent variable and the second number is the independent variable.\nThe return result is between `-1` and `1`. A result of `0` indicates no\ncorrelation.All numeric types are supported. If the\ninput is `NUMERIC` or `BIGNUMERIC` then the internal aggregation is\nstable with the final output converted to a `FLOAT64`.\nOtherwise the input is converted to a `FLOAT64`\nbefore aggregation, resulting in a potentially unstable result.This function ignores any input pairs that contain one or more `NULL` values. If\nthere are fewer than two input pairs without `NULL` values, this function\nreturns `NULL`.`NaN` is produced if:Any input value is `NaN`\nAny input value is positive infinity or negative infinity.\nThe variance of `X1` or `X2` is `0`.\nThe covariance of `X1` and `X2` is `0`.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT CORR(y, x) AS results\nFROM\n  UNNEST(\n    [\n      STRUCT(1.0 AS y, 5.0 AS x),\n      (3.0, 9.0),\n      (4.0, 7.0)]);\n\n/*--------------------*\n | results            |\n +--------------------+\n | 0.6546536707079772 |\n *--------------------*/",
			"SELECT CORR(y, x) AS results\nFROM\n  UNNEST(\n    [\n      STRUCT(1.0 AS y, 5.0 AS x),\n      (3.0, 9.0),\n      (4.0, NULL)]);\n\n/*---------*\n | results |\n +---------+\n | 1       |\n *---------*/",
			"SELECT CORR(y, x) AS results\nFROM UNNEST([STRUCT(1.0 AS y, NULL AS x),(9.0, 3.0)])\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT CORR(y, x) AS results\nFROM UNNEST([STRUCT(1.0 AS y, NULL AS x),(9.0, NULL)])\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT CORR(y, x) AS results\nFROM\n  UNNEST(\n    [\n      STRUCT(1.0 AS y, 5.0 AS x),\n      (3.0, 9.0),\n      (4.0, 7.0),\n      (5.0, 1.0),\n      (7.0, CAST('Infinity' as FLOAT64))])\n\n/*---------*\n | results |\n +---------+\n | NaN     |\n *---------*/",
			"SELECT CORR(x, y) AS results\nFROM\n  (\n    SELECT 0 AS x, 0 AS y\n    UNION ALL\n    SELECT 0 AS x, 0 AS y\n  )\n\n/*---------*\n | results |\n +---------+\n | NaN     |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#corr",
	},
	{
		Name:        "COVAR_POP",
		Method:      "COVAR_POP(\n  X1, X2\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the population [covariance](https://en.wikipedia.org/wiki/Covariance) of\na set of number pairs. The first number is the dependent variable; the second\nnumber is the independent variable. The return result is between `-Inf` and\n`+Inf`.All numeric types are supported. If the\ninput is `NUMERIC` or `BIGNUMERIC` then the internal aggregation is\nstable with the final output converted to a `FLOAT64`.\nOtherwise the input is converted to a `FLOAT64`\nbefore aggregation, resulting in a potentially unstable result.This function ignores any input pairs that contain one or more `NULL` values. If\nthere is no input pair without `NULL` values, this function returns `NULL`.\nIf there is exactly one input pair without `NULL` values, this function returns\n`0`.`NaN` is produced if:Any input value is `NaN`\nAny input value is positive infinity or negative infinity.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).This function can be used with the\n[`AGGREGATION_THRESHOLD` clause](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause).To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT COVAR_POP(y, x) AS results\nFROM\n  UNNEST(\n    [\n      STRUCT(1.0 AS y, 1.0 AS x),\n      (2.0, 6.0),\n      (9.0, 3.0),\n      (2.0, 6.0),\n      (9.0, 3.0)])\n\n/*---------------------*\n | results             |\n +---------------------+\n | -1.6800000000000002 |\n *---------------------*/",
			"SELECT COVAR_POP(y, x) AS results\nFROM UNNEST([STRUCT(1.0 AS y, NULL AS x),(9.0, 3.0)])\n\n/*---------*\n | results |\n +---------+\n | 0       |\n *---------*/",
			"SELECT COVAR_POP(y, x) AS results\nFROM UNNEST([STRUCT(1.0 AS y, NULL AS x),(9.0, NULL)])\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT COVAR_POP(y, x) AS results\nFROM\n  UNNEST(\n    [\n      STRUCT(1.0 AS y, 1.0 AS x),\n      (2.0, 6.0),\n      (9.0, 3.0),\n      (2.0, 6.0),\n      (NULL, 3.0)])\n\n/*---------*\n | results |\n +---------+\n | -1      |\n *---------*/",
			"SELECT COVAR_POP(y, x) AS results\nFROM\n  UNNEST(\n    [\n      STRUCT(1.0 AS y, 1.0 AS x),\n      (2.0, 6.0),\n      (9.0, 3.0),\n      (2.0, 6.0),\n      (CAST('Infinity' as FLOAT64), 3.0)])\n\n/*---------*\n | results |\n +---------+\n | NaN     |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#covar_pop",
	},
	{
		Name:        "COVAR_SAMP",
		Method:      "COVAR_SAMP(\n  X1, X2\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the sample [covariance](https://en.wikipedia.org/wiki/Covariance) of a\nset of number pairs. The first number is the dependent variable; the second\nnumber is the independent variable. The return result is between `-Inf` and\n`+Inf`.All numeric types are supported. If the\ninput is `NUMERIC` or `BIGNUMERIC` then the internal aggregation is\nstable with the final output converted to a `FLOAT64`.\nOtherwise the input is converted to a `FLOAT64`\nbefore aggregation, resulting in a potentially unstable result.This function ignores any input pairs that contain one or more `NULL` values. If\nthere are fewer than two input pairs without `NULL` values, this function\nreturns `NULL`.`NaN` is produced if:Any input value is `NaN`\nAny input value is positive infinity or negative infinity.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).This function can be used with the\n[`AGGREGATION_THRESHOLD` clause](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause).To learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT COVAR_SAMP(y, x) AS results\nFROM\n  UNNEST(\n    [\n      STRUCT(1.0 AS y, 1.0 AS x),\n      (2.0, 6.0),\n      (9.0, 3.0),\n      (2.0, 6.0),\n      (9.0, 3.0)])\n\n/*---------*\n | results |\n +---------+\n | -2.1    |\n *---------*/",
			"SELECT COVAR_SAMP(y, x) AS results\nFROM\n  UNNEST(\n    [\n      STRUCT(1.0 AS y, 1.0 AS x),\n      (2.0, 6.0),\n      (9.0, 3.0),\n      (2.0, 6.0),\n      (NULL, 3.0)])\n\n/*----------------------*\n | results              |\n +----------------------+\n | --1.3333333333333333 |\n *----------------------*/",
			"SELECT COVAR_SAMP(y, x) AS results\nFROM UNNEST([STRUCT(1.0 AS y, NULL AS x),(9.0, 3.0)])\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT COVAR_SAMP(y, x) AS results\nFROM UNNEST([STRUCT(1.0 AS y, NULL AS x),(9.0, NULL)])\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT COVAR_SAMP(y, x) AS results\nFROM\n  UNNEST(\n    [\n      STRUCT(1.0 AS y, 1.0 AS x),\n      (2.0, 6.0),\n      (9.0, 3.0),\n      (2.0, 6.0),\n      (CAST('Infinity' as FLOAT64), 3.0)])\n\n/*---------*\n | results |\n +---------+\n | NaN     |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#covar_samp",
	},
	{
		Name:        "STDDEV",
		Method:      "STDDEV(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "An alias of [STDDEV\\_SAMP](#stddev_samp).`STDDEV_POP````\nSTDDEV_POP(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]\n\n```",
		ExampleSQLs: []string{
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([10, 14, 18]) AS x\n\n/*-------------------*\n | results           |\n +-------------------+\n | 3.265986323710904 |\n *-------------------*/",
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([10, 14, NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | 2       |\n *---------*/",
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([10, NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | 0       |\n *---------*/",
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([10, 14, CAST('Infinity' as FLOAT64)]) AS x\n\n/*---------*\n | results |\n +---------+\n | NaN     |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#stddev",
	},
	{
		Name:        "STDDEV_POP",
		Method:      "STDDEV_POP(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the population (biased) standard deviation of the values. The return\nresult is between `0` and `+Inf`.All numeric types are supported. If the\ninput is `NUMERIC` or `BIGNUMERIC` then the internal aggregation is\nstable with the final output converted to a `FLOAT64`.\nOtherwise the input is converted to a `FLOAT64`\nbefore aggregation, resulting in a potentially unstable result.This function ignores any `NULL` inputs. If all inputs are ignored, this\nfunction returns `NULL`. If this function receives a single non- `NULL` input,\nit returns `0`.`NaN` is produced if:Any input value is `NaN`\nAny input value is positive infinity or negative infinity.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).This function can be used with the\n[`AGGREGATION_THRESHOLD` clause](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause).If this function is used with the `OVER` clause, it's part of a\nwindow function call. In a window function call,\naggregate function clauses can't be used.\nTo learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([10, 14, 18]) AS x\n\n/*-------------------*\n | results           |\n +-------------------+\n | 3.265986323710904 |\n *-------------------*/",
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([10, 14, NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | 2       |\n *---------*/",
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([10, NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | 0       |\n *---------*/",
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT STDDEV_POP(x) AS results FROM UNNEST([10, 14, CAST('Infinity' as FLOAT64)]) AS x\n\n/*---------*\n | results |\n +---------+\n | NaN     |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#stddev_pop",
	},
	{
		Name:        "STDDEV_SAMP",
		Method:      "STDDEV_SAMP(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the sample (unbiased) standard deviation of the values. The return\nresult is between `0` and `+Inf`.All numeric types are supported. If the\ninput is `NUMERIC` or `BIGNUMERIC` then the internal aggregation is\nstable with the final output converted to a `FLOAT64`.\nOtherwise the input is converted to a `FLOAT64`\nbefore aggregation, resulting in a potentially unstable result.This function ignores any `NULL` inputs. If there are fewer than two non- `NULL`\ninputs, this function returns `NULL`.`NaN` is produced if:Any input value is `NaN`\nAny input value is positive infinity or negative infinity.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).This function can be used with the\n[`AGGREGATION_THRESHOLD` clause](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause).If this function is used with the `OVER` clause, it's part of a\nwindow function call. In a window function call,\naggregate function clauses can't be used.\nTo learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT STDDEV_SAMP(x) AS results FROM UNNEST([10, 14, 18]) AS x\n\n/*---------*\n | results |\n +---------+\n | 4       |\n *---------*/",
			"SELECT STDDEV_SAMP(x) AS results FROM UNNEST([10, 14, NULL]) AS x\n\n/*--------------------*\n | results            |\n +--------------------+\n | 2.8284271247461903 |\n *--------------------*/",
			"SELECT STDDEV_SAMP(x) AS results FROM UNNEST([10, NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT STDDEV_SAMP(x) AS results FROM UNNEST([NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT STDDEV_SAMP(x) AS results FROM UNNEST([10, 14, CAST('Infinity' as FLOAT64)]) AS x\n\n/*---------*\n | results |\n +---------+\n | NaN     |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#stddev_samp",
	},
	{
		Name:        "VAR_POP",
		Method:      "VAR_POP(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the population (biased) variance of the values. The return result is\nbetween `0` and `+Inf`.All numeric types are supported. If the\ninput is `NUMERIC` or `BIGNUMERIC` then the internal aggregation is\nstable with the final output converted to a `FLOAT64`.\nOtherwise the input is converted to a `FLOAT64`\nbefore aggregation, resulting in a potentially unstable result.This function ignores any `NULL` inputs. If all inputs are ignored, this\nfunction returns `NULL`. If this function receives a single non- `NULL` input,\nit returns `0`.`NaN` is produced if:Any input value is `NaN`\nAny input value is positive infinity or negative infinity.If this function is used with the `OVER` clause, it's part of a\nwindow function call. In a window function call,\naggregate function clauses can't be used.\nTo learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT VAR_POP(x) AS results FROM UNNEST([10, 14, 18]) AS x\n\n/*--------------------*\n | results            |\n +--------------------+\n | 10.666666666666666 |\n *--------------------*/",
			"SELECT VAR_POP(x) AS results FROM UNNEST([10, 14, NULL]) AS x\n\n/*----------*\n | results |\n +---------+\n | 4       |\n *---------*/",
			"SELECT VAR_POP(x) AS results FROM UNNEST([10, NULL]) AS x\n\n/*----------*\n | results |\n +---------+\n | 0       |\n *---------*/",
			"SELECT VAR_POP(x) AS results FROM UNNEST([NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT VAR_POP(x) AS results FROM UNNEST([10, 14, CAST('Infinity' as FLOAT64)]) AS x\n\n/*---------*\n | results |\n +---------+\n | NaN     |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#var_pop",
	},
	{
		Name:        "VAR_SAMP",
		Method:      "VAR_SAMP(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "Returns the sample (unbiased) variance of the values. The return result is\nbetween `0` and `+Inf`.All numeric types are supported. If the\ninput is `NUMERIC` or `BIGNUMERIC` then the internal aggregation is\nstable with the final output converted to a `FLOAT64`.\nOtherwise the input is converted to a `FLOAT64`\nbefore aggregation, resulting in a potentially unstable result.This function ignores any `NULL` inputs. If there are fewer than two non- `NULL`\ninputs, this function returns `NULL`.`NaN` is produced if:Any input value is `NaN`\nAny input value is positive infinity or negative infinity.To learn more about the optional aggregate clauses that you can pass\ninto this function, see\n[Aggregate function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate-function-calls).This function can be used with the\n[`AGGREGATION_THRESHOLD` clause](/bigquery/docs/reference/standard-sql/query-syntax#agg_threshold_clause).If this function is used with the `OVER` clause, it's part of a\nwindow function call. In a window function call,\naggregate function clauses can't be used.\nTo learn more about the `OVER` clause and how to use it, see\n[Window function calls](https://cloud.google.com/bigquery/docs/reference/standard-sql/window-function-calls).",
		ExampleSQLs: []string{
			"SELECT VAR_SAMP(x) AS results FROM UNNEST([10, 14, 18]) AS x\n\n/*---------*\n | results |\n +---------+\n | 16      |\n *---------*/",
			"SELECT VAR_SAMP(x) AS results FROM UNNEST([10, 14, NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | 8       |\n *---------*/",
			"SELECT VAR_SAMP(x) AS results FROM UNNEST([10, NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT VAR_SAMP(x) AS results FROM UNNEST([NULL]) AS x\n\n/*---------*\n | results |\n +---------+\n | NULL    |\n *---------*/",
			"SELECT VAR_SAMP(x) AS results FROM UNNEST([10, 14, CAST('Infinity' as FLOAT64)]) AS x\n\n/*---------*\n | results |\n +---------+\n | NaN     |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#var_samp",
	},
	{
		Name:        "VARIANCE",
		Method:      "VARIANCE(\n  [ DISTINCT ]\n  expression\n)\n[ OVER over_clause ]\n\nover_clause:\n  { named_window | ( [ window_specification ] ) }\n\nwindow_specification:\n  [ named_window ]\n  [ PARTITION BY partition_expression [, ...] ]\n  [ ORDER BY expression [ { ASC | DESC }  ] [, ...] ]\n  [ window_frame_clause ]",
		Description: "An alias of [VAR\\_SAMP](#var_samp).",
		ExampleSQLs: []string{},
		URL:         "https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions#variance",
	},
	{
		Name:        "ASCII",
		Method:      "ASCII(value)",
		Description: "Returns the ASCII code for the first character or byte in `value`. Returns\n`0` if `value` is empty or the ASCII code is `0` for the first character\nor byte.",
		ExampleSQLs: []string{
			"SELECT ASCII('abcd') as A, ASCII('a') as B, ASCII('') as C, ASCII(NULL) as D;\n\n/*-------+-------+-------+-------*\n | A     | B     | C     | D     |\n +-------+-------+-------+-------+\n | 97    | 97    | 0     | NULL  |\n *-------+-------+-------+-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#ascii",
	},
	{
		Name:        "BYTE_LENGTH",
		Method:      "BYTE_LENGTH(value)",
		Description: "Gets the number of `BYTES` in a `STRING` or `BYTES` value,\nregardless of whether the value is a `STRING` or `BYTES` type.",
		ExampleSQLs: []string{
			"SELECT BYTE_LENGTH('абвгд') AS string_example;\n\n/*----------------*\n | string_example |\n +----------------+\n | 10             |\n *----------------*/",
			"SELECT BYTE_LENGTH(b'абвгд') AS bytes_example;\n\n/*----------------*\n | bytes_example  |\n +----------------+\n | 10             |\n *----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#byte_length",
	},
	{
		Name:        "CHAR_LENGTH",
		Method:      "CHAR_LENGTH(value)",
		Description: "Gets the number of characters in a `STRING` value.",
		ExampleSQLs: []string{
			"SELECT CHAR_LENGTH('абвгд') AS char_length;\n\n/*-------------*\n | char_length |\n +-------------+\n | 5           |\n *------------ */",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#char_length",
	},
	{
		Name:        "CHARACTER_LENGTH",
		Method:      "CHARACTER_LENGTH(value)",
		Description: "Synonym for [CHAR\\_LENGTH](#char_length).",
		ExampleSQLs: []string{
			"SELECT\n  'абвгд' AS characters,\n  CHARACTER_LENGTH('абвгд') AS char_length_example\n\n/*------------+---------------------*\n | characters | char_length_example |\n +------------+---------------------+\n | абвгд      |                   5 |\n *------------+---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#character_length",
	},
	{
		Name:        "CHR",
		Method:      "CHR(value)",
		Description: "Takes a Unicode [code point](https://en.wikipedia.org/wiki/Code_point) and returns\nthe character that matches the code point. Each valid code point should fall\nwithin the range of \\[0, 0xD7FF\\] and \\[0xE000, 0x10FFFF\\]. Returns an empty string\nif the code point is `0`. If an invalid Unicode code point is specified, an\nerror is returned.To work with an array of Unicode code points, see\n[`CODE_POINTS_TO_STRING`](#code_points_to_string)",
		ExampleSQLs: []string{
			"SELECT CHR(65) AS A, CHR(255) AS B, CHR(513) AS C, CHR(1024)  AS D;\n\n/*-------+-------+-------+-------*\n | A     | B     | C     | D     |\n +-------+-------+-------+-------+\n | A     | ÿ     | ȁ     | Ѐ     |\n *-------+-------+-------+-------*/",
			"SELECT CHR(97) AS A, CHR(0xF9B5) AS B, CHR(0) AS C, CHR(NULL) AS D;\n\n/*-------+-------+-------+-------*\n | A     | B     | C     | D     |\n +-------+-------+-------+-------+\n | a     | 例    |       | NULL  |\n *-------+-------+-------+-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#chr",
	},
	{
		Name:        "CODE_POINTS_TO_BYTES",
		Method:      "CODE_POINTS_TO_BYTES(ascii_code_points)",
		Description: "Takes an array of extended ASCII\n[code points](https://en.wikipedia.org/wiki/Code_point)\nas `ARRAY<INT64>` and returns `BYTES`.To convert from `BYTES` to an array of code points, see\n[TO\\_CODE\\_POINTS](#to_code_points).",
		ExampleSQLs: []string{
			"SELECT CODE_POINTS_TO_BYTES([65, 98, 67, 100]) AS bytes;\n\n-- Note that the result of CODE_POINTS_TO_BYTES is of type BYTES, displayed as a base64-encoded string.\n-- In BYTES format, b'AbCd' is the result.\n/*----------*\n | bytes    |\n +----------+\n | QWJDZA== |\n *----------*/",
			"SELECT CODE_POINTS_TO_BYTES(ARRAY_AGG(\n  (SELECT\n      CASE\n        WHEN chr BETWEEN b'a' and b'z'\n          THEN TO_CODE_POINTS(b'a')[offset(0)] +\n            MOD(code+13-TO_CODE_POINTS(b'a')[offset(0)],26)\n        WHEN chr BETWEEN b'A' and b'Z'\n          THEN TO_CODE_POINTS(b'A')[offset(0)] +\n            MOD(code+13-TO_CODE_POINTS(b'A')[offset(0)],26)\n        ELSE code\n      END\n   FROM\n     (SELECT code, CODE_POINTS_TO_BYTES([code]) chr)\n  ) ORDER BY OFFSET)) AS encoded_string\nFROM UNNEST(TO_CODE_POINTS(b'Test String!')) code WITH OFFSET;\n\n-- Note that the result of CODE_POINTS_TO_BYTES is of type BYTES, displayed as a base64-encoded string.\n-- In BYTES format, b'Grfg Fgevat!' is the result.\n/*------------------*\n | encoded_string   |\n +------------------+\n | R3JmZyBGZ2V2YXQh |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#code_points_to_bytes",
	},
	{
		Name:        "CODE_POINTS_TO_STRING",
		Method:      "CODE_POINTS_TO_STRING(unicode_code_points)",
		Description: "Takes an array of Unicode [code points](https://en.wikipedia.org/wiki/Code_point)\nas `ARRAY<INT64>` and returns a `STRING`.To convert from a string to an array of code points, see\n[TO\\_CODE\\_POINTS](#to_code_points).",
		ExampleSQLs: []string{
			"SELECT CODE_POINTS_TO_STRING([65, 255, 513, 1024]) AS string;\n\n/*--------*\n | string |\n +--------+\n | AÿȁЀ   |\n *--------*/",
			"SELECT CODE_POINTS_TO_STRING([97, 0, 0xF9B5]) AS string;\n\n/*--------*\n | string |\n +--------+\n | a例    |\n *--------*/",
			"SELECT CODE_POINTS_TO_STRING([65, 255, NULL, 1024]) AS string;\n\n/*--------*\n | string |\n +--------+\n | NULL   |\n *--------*/",
			"WITH Words AS (\n  SELECT word\n  FROM UNNEST(['foo', 'bar', 'baz', 'giraffe', 'llama']) AS word\n)\nSELECT\n  CODE_POINTS_TO_STRING([code_point]) AS letter,\n  COUNT(*) AS letter_count\nFROM Words,\n  UNNEST(TO_CODE_POINTS(word)) AS code_point\nGROUP BY 1\nORDER BY 2 DESC;\n\n/*--------+--------------*\n | letter | letter_count |\n +--------+--------------+\n | a      | 5            |\n | f      | 3            |\n | r      | 2            |\n | b      | 2            |\n | l      | 2            |\n | o      | 2            |\n | g      | 1            |\n | z      | 1            |\n | e      | 1            |\n | m      | 1            |\n | i      | 1            |\n *--------+--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#code_points_to_string",
	},
	{
		Name:        "COLLATE",
		Method:      "COLLATE(value, collate_specification)",
		Description: "```\nWITH Words AS (\n  SELECT\n    'a' AS char1,\n    'Z' AS char2\n)\nSELECT ( Words.char1 < Words.char2 ) AS a_less_than_Z\nFROM Words;\n\n/*----------------*\n | a_less_than_Z  |\n +----------------+\n | FALSE          |\n *----------------*/\n\n````CONCAT````\nCONCAT(value1[, ...])\n\n```",
		ExampleSQLs: []string{
			"SELECT CONCAT('T.P.', ' ', 'Bar') as author;\n\n/*---------------------*\n | author              |\n +---------------------+\n | T.P. Bar            |\n *---------------------*/",
			"SELECT CONCAT('Summer', ' ', 1923) as release_date;\n\n/*---------------------*\n | release_date        |\n +---------------------+\n | Summer 1923         |\n *---------------------*/",
			"With Employees AS\n  (SELECT\n    'John' AS first_name,\n    'Doe' AS last_name\n  UNION ALL\n  SELECT\n    'Jane' AS first_name,\n    'Smith' AS last_name\n  UNION ALL\n  SELECT\n    'Joe' AS first_name,\n    'Jackson' AS last_name)\n\nSELECT\n  CONCAT(first_name, ' ', last_name)\n  AS full_name\nFROM Employees;\n\n/*---------------------*\n | full_name           |\n +---------------------+\n | John Doe            |\n | Jane Smith          |\n | Joe Jackson         |\n *---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#collate",
	},
	{
		Name:        "CONCAT",
		Method:      "CONCAT(value1[, ...])",
		Description: "Concatenates one or more values into a single result. All values must be\n`BYTES` or data types that can be cast to `STRING`.The function returns `NULL` if any input argument is `NULL`.",
		ExampleSQLs: []string{
			"SELECT CONCAT('T.P.', ' ', 'Bar') as author;\n\n/*---------------------*\n | author              |\n +---------------------+\n | T.P. Bar            |\n *---------------------*/",
			"SELECT CONCAT('Summer', ' ', 1923) as release_date;\n\n/*---------------------*\n | release_date        |\n +---------------------+\n | Summer 1923         |\n *---------------------*/",
			"With Employees AS\n  (SELECT\n    'John' AS first_name,\n    'Doe' AS last_name\n  UNION ALL\n  SELECT\n    'Jane' AS first_name,\n    'Smith' AS last_name\n  UNION ALL\n  SELECT\n    'Joe' AS first_name,\n    'Jackson' AS last_name)\n\nSELECT\n  CONCAT(first_name, ' ', last_name)\n  AS full_name\nFROM Employees;\n\n/*---------------------*\n | full_name           |\n +---------------------+\n | John Doe            |\n | Jane Smith          |\n | Joe Jackson         |\n *---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#concat",
	},
	{
		Name:        "CONTAINS_SUBSTR",
		Method:      "CONTAINS_SUBSTR(\n  expression,\n  search_value_literal\n  [, json_scope => json_scope_value ]\n)",
		Description: "Performs a normalized, case-insensitive search to see if a value exists as a\nsubstring in an expression. Returns `TRUE` if the value exists, otherwise\nreturns `FALSE`.Before values are compared, they are [normalized and case folded with `NFKC`\\\nnormalization](#normalize_and_casefold). Wildcard searches aren't\nsupported.",
		ExampleSQLs: []string{
			"SELECT CONTAINS_SUBSTR('the blue house', 'Blue house') AS result;\n\n/*--------*\n | result |\n +--------+\n | true   |\n *--------*/",
			"SELECT CONTAINS_SUBSTR('the blue house', CONCAT('Blue ', 'house')) AS result;\n\n/*--------*\n | result |\n +--------+\n | true   |\n *--------*/",
			"SELECT CONTAINS_SUBSTR('the red house', 'blue') AS result;\n\n/*--------*\n | result |\n +--------+\n | false  |\n *--------*/",
			"SELECT '\\u2168 day' AS a, 'IX' AS b, CONTAINS_SUBSTR('\\u2168', 'IX') AS result;\n\n/*----------------------*\n | a      | b  | result |\n +----------------------+\n | Ⅸ day | IX | true   |\n *----------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#contains_substr",
	},
	{
		Name:        "EDIT_DISTANCE",
		Method:      "EDIT_DISTANCE(\n  value1,\n  value2,\n  [ max_distance => max_distance_value ]\n)",
		Description: "Computes the [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) between two `STRING` or\n`BYTES` values.",
		ExampleSQLs: []string{
			"SELECT EDIT_DISTANCE('a', 'b') AS results;\n\n/*---------*\n | results |\n +---------+\n | 1       |\n *---------*/",
			"SELECT EDIT_DISTANCE('aa', 'b') AS results;\n\n/*---------*\n | results |\n +---------+\n | 2       |\n *---------*/",
			"SELECT EDIT_DISTANCE('aa', 'ba') AS results;\n\n/*---------*\n | results |\n +---------+\n | 1       |\n *---------*/",
			"SELECT EDIT_DISTANCE('abcdefg', 'a', max_distance => 2) AS results;\n\n/*---------*\n | results |\n +---------+\n | 2       |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#edit_distance",
	},
	{
		Name:        "ENDS_WITH",
		Method:      "ENDS_WITH(value, suffix)",
		Description: "Takes two `STRING` or `BYTES` values. Returns `TRUE` if `suffix`\nis a suffix of `value`.This function supports specifying [collation](https://cloud.google.com/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{
			"SELECT ENDS_WITH('apple', 'e') as example\n\n/*---------*\n | example |\n +---------+\n |    True |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#ends_with",
	},
	{
		Name:        "FORMAT",
		Method:      "FORMAT(format_string_expression, data_type_expression[, ...])",
		Description: "`FORMAT` formats a data type expression as a string.`format_string_expression`: Can contain zero or more\n[format specifiers](#format_specifiers). Each format specifier is introduced\nby the `%` symbol, and must map to one or more of the remaining arguments.\nIn general, this is a one-to-one mapping, except when the `*` specifier is\npresent. For example, `%.*i` maps to two arguments—a length argument\nand a signed integer argument. If the number of arguments related to the\nformat specifiers isn't the same as the number of arguments, an error occurs.\n`data_type_expression`: The value to format as a string. This can be any\nGoogleSQL data type.",
		ExampleSQLs: []string{
			"SELECT FORMAT('date: %s!', FORMAT_DATE('%B %d, %Y', date '2015-01-02'));",
			"date: January 02, 2015!",
			"%[flags][width][.precision]specifier",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#format",
	},
	{
		Name:        "FROM_BASE32",
		Method:      "FROM_BASE32(string_expr)",
		Description: "Converts the base32-encoded input `string_expr` into `BYTES` format. To convert\n`BYTES` to a base32-encoded `STRING`, use [TO\\_BASE32](#to_base32).",
		ExampleSQLs: []string{
			"SELECT FROM_BASE32('MFRGGZDF74======') AS byte_data;\n\n-- Note that the result of FROM_BASE32 is of type BYTES, displayed as a base64-encoded string.\n/*-----------*\n | byte_data |\n +-----------+\n | YWJjZGX/  |\n *-----------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#from_base32",
	},
	{
		Name:        "FROM_BASE64",
		Method:      "FROM_BASE64(string_expr)",
		Description: "Converts the base64-encoded input `string_expr` into\n`BYTES` format. To convert\n`BYTES` to a base64-encoded `STRING`,\nuse [TO\\_BASE64](#to_base64).There are several base64 encodings in common use that vary in exactly which\nalphabet of 65 ASCII characters are used to encode the 64 digits and padding.\nSee [RFC 4648](https://tools.ietf.org/html/rfc4648#section-4) for details. This\nfunction expects the alphabet `[A-Za-z0-9+/=]`.",
		ExampleSQLs: []string{
			"SELECT FROM_BASE64('/+A=') AS byte_data;\n\n-- Note that the result of FROM_BASE64 is of type BYTES, displayed as a base64-encoded string.\n/*-----------*\n | byte_data |\n +-----------+\n | /+A=      |\n *-----------*/",
			"SELECT FROM_BASE64(REPLACE(REPLACE('_-A=', '-', '+'), '_', '/')) AS binary;\n\n-- Note that the result of FROM_BASE64 is of type BYTES, displayed as a base64-encoded string.\n/*--------*\n | binary |\n +--------+\n | /+A=   |\n *--------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#from_base64",
	},
	{
		Name:        "FROM_HEX",
		Method:      "FROM_HEX(string)",
		Description: "Converts a hexadecimal-encoded `STRING` into `BYTES` format. Returns an error\nif the input `STRING` contains characters outside the range\n`(0..9, A..F, a..f)`. The lettercase of the characters doesn't matter. If the\ninput `STRING` has an odd number of characters, the function acts as if the\ninput has an additional leading `0`. To convert `BYTES` to a hexadecimal-encoded\n`STRING`, use [TO\\_HEX](#to_hex).",
		ExampleSQLs: []string{
			"WITH Input AS (\n  SELECT '00010203aaeeefff' AS hex_str UNION ALL\n  SELECT '0AF' UNION ALL\n  SELECT '666f6f626172'\n)\nSELECT hex_str, FROM_HEX(hex_str) AS bytes_str\nFROM Input;\n\n-- Note that the result of FROM_HEX is of type BYTES, displayed as a base64-encoded string.\n/*------------------+--------------*\n | hex_str          | bytes_str    |\n +------------------+--------------+\n | 0AF              | AAECA6ru7/8= |\n | 00010203aaeeefff | AK8=         |\n | 666f6f626172     | Zm9vYmFy     |\n *------------------+--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#from_hex",
	},
	{
		Name:        "INITCAP",
		Method:      "INITCAP(value[, delimiters])",
		Description: "Takes a `STRING` and returns it with the first character in each word in\nuppercase and all other characters in lowercase. Non-alphabetic characters\nremain the same.`delimiters` is an optional string argument that's used to override the default\nset of characters used to separate words. If `delimiters` isn't specified, it\ndefaults to the following characters:\n\n`<whitespace> [ ] ( ) { } / | \\ < > ! ? @ \" ^ # $ & ~ _ , . : ; * % + -`If `value` or `delimiters` is `NULL`, the function returns `NULL`.",
		ExampleSQLs: []string{
			"SELECT\n  'Hello World-everyone!' AS value,\n  INITCAP('Hello World-everyone!') AS initcap_value\n\n/*-------------------------------+-------------------------------*\n | value                         | initcap_value                 |\n +-------------------------------+-------------------------------+\n | Hello World-everyone!         | Hello World-Everyone!         |\n *-------------------------------+-------------------------------*/",
			"SELECT\n  'Apples1oranges2pears' as value,\n  '12' AS delimiters,\n  INITCAP('Apples1oranges2pears' , '12') AS initcap_value\n\n/*----------------------+------------+----------------------*\n | value                | delimiters | initcap_value        |\n +----------------------+------------+----------------------+\n | Apples1oranges2pears | 12         | Apples1Oranges2Pears |\n *----------------------+------------+----------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#initcap",
	},
	{
		Name:        "INSTR",
		Method:      "INSTR(value, subvalue[, position[, occurrence]])",
		Description: "Returns the lowest 1-based position of `subvalue` in `value`.\n`value` and `subvalue` must be the same type, either\n`STRING` or `BYTES`.If `position` is specified, the search starts at this position in\n`value`, otherwise it starts at `1`, which is the beginning of\n`value`. If `position` is negative, the function searches backwards\nfrom the end of `value`, with `-1` indicating the last character.\n`position` is of type `INT64` and can't be `0`.If `occurrence` is specified, the search returns the position of a specific\ninstance of `subvalue` in `value`. If not specified, `occurrence`\ndefaults to `1` and returns the position of the first occurrence.\nFor `occurrence` \\> `1`, the function includes overlapping occurrences.\n`occurrence` is of type `INT64` and must be positive.This function supports specifying [collation](https://cloud.google.com/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).Returns `0` if:No match is found.\nIf `occurrence` is greater than the number of matches found.\nIf `position` is greater than the length of `value`.Returns `NULL` if:Any input argument is `NULL`.Returns an error if:`position` is `0`.\n`occurrence` is `0` or negative.",
		ExampleSQLs: []string{
			"SELECT\n  'banana' AS value, 'an' AS subvalue, 1 AS position, 1 AS occurrence,\n  INSTR('banana', 'an', 1, 1) AS instr;\n\n/*--------------+--------------+----------+------------+-------*\n | value        | subvalue     | position | occurrence | instr |\n +--------------+--------------+----------+------------+-------+\n | banana       | an           | 1        | 1          | 2     |\n *--------------+--------------+----------+------------+-------*/",
			"SELECT\n  'banana' AS value, 'an' AS subvalue, 1 AS position, 2 AS occurrence,\n  INSTR('banana', 'an', 1, 2) AS instr;\n\n/*--------------+--------------+----------+------------+-------*\n | value        | subvalue     | position | occurrence | instr |\n +--------------+--------------+----------+------------+-------+\n | banana       | an           | 1        | 2          | 4     |\n *--------------+--------------+----------+------------+-------*/",
			"SELECT\n  'banana' AS value, 'an' AS subvalue, 1 AS position, 3 AS occurrence,\n  INSTR('banana', 'an', 1, 3) AS instr;\n\n/*--------------+--------------+----------+------------+-------*\n | value        | subvalue     | position | occurrence | instr |\n +--------------+--------------+----------+------------+-------+\n | banana       | an           | 1        | 3          | 0     |\n *--------------+--------------+----------+------------+-------*/",
			"SELECT\n  'banana' AS value, 'an' AS subvalue, 3 AS position, 1 AS occurrence,\n  INSTR('banana', 'an', 3, 1) AS instr;\n\n/*--------------+--------------+----------+------------+-------*\n | value        | subvalue     | position | occurrence | instr |\n +--------------+--------------+----------+------------+-------+\n | banana       | an           | 3        | 1          | 4     |\n *--------------+--------------+----------+------------+-------*/",
			"SELECT\n  'banana' AS value, 'an' AS subvalue, -1 AS position, 1 AS occurrence,\n  INSTR('banana', 'an', -1, 1) AS instr;\n\n/*--------------+--------------+----------+------------+-------*\n | value        | subvalue     | position | occurrence | instr |\n +--------------+--------------+----------+------------+-------+\n | banana       | an           | -1       | 1          | 4     |\n *--------------+--------------+----------+------------+-------*/",
			"SELECT\n  'banana' AS value, 'an' AS subvalue, -3 AS position, 1 AS occurrence,\n  INSTR('banana', 'an', -3, 1) AS instr;\n\n/*--------------+--------------+----------+------------+-------*\n | value        | subvalue     | position | occurrence | instr |\n +--------------+--------------+----------+------------+-------+\n | banana       | an           | -3       | 1          | 4     |\n *--------------+--------------+----------+------------+-------*/",
			"SELECT\n  'banana' AS value, 'ann' AS subvalue, 1 AS position, 1 AS occurrence,\n  INSTR('banana', 'ann', 1, 1) AS instr;\n\n/*--------------+--------------+----------+------------+-------*\n | value        | subvalue     | position | occurrence | instr |\n +--------------+--------------+----------+------------+-------+\n | banana       | ann          | 1        | 1          | 0     |\n *--------------+--------------+----------+------------+-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#instr",
	},
	{
		Name:        "LEFT",
		Method:      "LEFT(value, length)",
		Description: "Returns a `STRING` or `BYTES` value that consists of the specified\nnumber of leftmost characters or bytes from `value`. The `length` is an\n`INT64` that specifies the length of the returned\nvalue. If `value` is of type `BYTES`, `length` is the number of leftmost bytes\nto return. If `value` is `STRING`, `length` is the number of leftmost characters\nto return.If `length` is 0, an empty `STRING` or `BYTES` value will be\nreturned. If `length` is negative, an error will be returned. If `length`\nexceeds the number of characters or bytes from `value`, the original `value`\nwill be returned.",
		ExampleSQLs: []string{
			"SELECT LEFT('banana', 3) AS results\n\n/*---------*\n | results |\n  +--------+\n | ban     |\n *---------*/",
			"SELECT LEFT(b'\\xab\\xcd\\xef\\xaa\\xbb', 3) AS results\n\n-- Note that the result of LEFT is of type BYTES, displayed as a base64-encoded string.\n/*---------*\n | results |\n +---------+\n | q83v    |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#left",
	},
	{
		Name:        "LENGTH",
		Method:      "LENGTH(value)",
		Description: "Returns the length of the `STRING` or `BYTES` value. The returned\nvalue is in characters for `STRING` arguments and in bytes for the `BYTES`\nargument.",
		ExampleSQLs: []string{
			"SELECT\n  LENGTH('абвгд') AS string_example,\n  LENGTH(CAST('абвгд' AS BYTES)) AS bytes_example;\n\n/*----------------+---------------*\n | string_example | bytes_example |\n +----------------+---------------+\n | 5              | 10            |\n *----------------+---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#length",
	},
	{
		Name:        "LOWER",
		Method:      "LOWER(value)",
		Description: "For `STRING` arguments, returns the original string with all alphabetic\ncharacters in lowercase. Mapping between lowercase and uppercase is done\naccording to the\n[Unicode Character Database](http://unicode.org/ucd/)\nwithout taking into account language-specific mappings.For `BYTES` arguments, the argument is treated as ASCII text, with all bytes\ngreater than 127 left intact.",
		ExampleSQLs: []string{
			"SELECT\n  LOWER('FOO BAR BAZ') AS example\nFROM items;\n\n/*-------------*\n | example     |\n +-------------+\n | foo bar baz |\n *-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#lower",
	},
	{
		Name:        "LPAD",
		Method:      "LPAD(original_value, return_length[, pattern])",
		Description: "Returns a `STRING` or `BYTES` value that consists of `original_value` prepended\nwith `pattern`. The `return_length` is an `INT64` that\nspecifies the length of the returned value. If `original_value` is of type\n`BYTES`, `return_length` is the number of bytes. If `original_value` is\nof type `STRING`, `return_length` is the number of characters.The default value of `pattern` is a blank space.Both `original_value` and `pattern` must be the same data type.If `return_length` is less than or equal to the `original_value` length, this\nfunction returns the `original_value` value, truncated to the value of\n`return_length`. For example, `LPAD('hello world', 7);` returns `'hello w'`.If `original_value`, `return_length`, or `pattern` is `NULL`, this function\nreturns `NULL`.This function returns an error if:`return_length` is negative\n`pattern` is empty",
		ExampleSQLs: []string{
			"SELECT FORMAT('%T', LPAD('c', 5)) AS results\n\n/*---------*\n | results |\n +---------+\n | \"    c\" |\n *---------*/",
			"SELECT LPAD('b', 5, 'a') AS results\n\n/*---------*\n | results |\n +---------+\n | aaaab   |\n *---------*/",
			"SELECT LPAD('abc', 10, 'ghd') AS results\n\n/*------------*\n | results    |\n +------------+\n | ghdghdgabc |\n *------------*/",
			"SELECT LPAD('abc', 2, 'd') AS results\n\n/*---------*\n | results |\n +---------+\n | ab      |\n *---------*/",
			"SELECT FORMAT('%T', LPAD(b'abc', 10, b'ghd')) AS results\n\n/*---------------*\n | results       |\n +---------------+\n | b\"ghdghdgabc\" |\n *---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#lpad",
	},
	{
		Name:        "LTRIM",
		Method:      "LTRIM(value1[, value2])",
		Description: "Identical to [TRIM](#trim), but only removes leading characters.",
		ExampleSQLs: []string{
			"SELECT CONCAT('#', LTRIM('   apple   '), '#') AS example\n\n/*-------------*\n | example     |\n +-------------+\n | #apple #    |\n *-------------*/",
			"SELECT LTRIM('***apple***', '*') AS example\n\n/*-----------*\n | example   |\n +-----------+\n | apple***  |\n *-----------*/",
			"SELECT LTRIM('xxxapplexxx', 'xyz') AS example\n\n/*-----------*\n | example   |\n +-----------+\n | applexxx  |\n *-----------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#ltrim",
	},
	{
		Name:        "NORMALIZE",
		Method:      "NORMALIZE(value[, normalization_mode])",
		Description: "Takes a string value and returns it as a normalized string. If you don't\nprovide a normalization mode, `NFC` is used.[Normalization](https://en.wikipedia.org/wiki/Unicode_equivalence#Normalization) is used to ensure that\ntwo strings are equivalent. Normalization is often used in situations in which\ntwo strings render the same on the screen but have different Unicode code\npoints.`NORMALIZE` supports four optional normalization modes:Value\nName\nDescription\n\n`NFC`\nNormalization Form Canonical Composition\nDecomposes and recomposes characters by canonical equivalence.\n\n`NFKC`\nNormalization Form Compatibility Composition\nDecomposes characters by compatibility, then recomposes them by canonical equivalence.\n\n`NFD`\nNormalization Form Canonical Decomposition\nDecomposes characters by canonical equivalence, and multiple combining characters are arranged in a specific order.\n\n`NFKD`\nNormalization Form Compatibility Decomposition\nDecomposes characters by compatibility, and multiple combining characters are arranged in a specific order.",
		ExampleSQLs: []string{
			"SELECT\n  NORMALIZE('\\u00ea') as a,\n  NORMALIZE('\\u0065\\u0302') as b,\n  NORMALIZE('\\u00ea') = NORMALIZE('\\u0065\\u0302') as normalized;\n\n/*---+---+------------*\n | a | b | normalized |\n +---+---+------------+\n | ê | ê | TRUE       |\n *---+---+------------*/",
			"SELECT NORMALIZE('Raha\\u2004Mahan', NFKC) AS normalized_name\n\n/*-----------------*\n | normalized_name |\n +-----------------+\n | Raha Mahan      |\n *-----------------*/",
			"SELECT NORMALIZE('Raha\\u2005Mahan', NFKC) AS normalized_name\n\n/*-----------------*\n | normalized_name |\n +-----------------+\n | Raha Mahan      |\n *-----------------*/",
			"SELECT NORMALIZE('Raha\\u2006Mahan', NFKC) AS normalized_name\n\n/*-----------------*\n | normalized_name |\n +-----------------+\n | Raha Mahan      |\n *-----------------*/",
			"SELECT NORMALIZE('Raha Mahan', NFKC) AS normalized_name\n\n/*-----------------*\n | normalized_name |\n +-----------------+\n | Raha Mahan      |\n *-----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#normalize",
	},
	{
		Name:        "NORMALIZE_AND_CASEFOLD",
		Method:      "NORMALIZE_AND_CASEFOLD(value[, normalization_mode])",
		Description: "Takes a string value and returns it as a normalized string. If you don't\nprovide a normalization mode, `NFC` is used.[Normalization](https://en.wikipedia.org/wiki/Unicode_equivalence#Normalization) is used to ensure that\ntwo strings are equivalent. Normalization is often used in situations in which\ntwo strings render the same on the screen but have different Unicode code\npoints.[Case folding](https://en.wikipedia.org/wiki/Letter_case#Case_folding) is used for the caseless\ncomparison of strings. If you need to compare strings and case shouldn't be\nconsidered, use `NORMALIZE_AND_CASEFOLD`, otherwise use\n[`NORMALIZE`](#normalize).`NORMALIZE_AND_CASEFOLD` supports four optional normalization modes:Value\nName\nDescription\n\n`NFC`\nNormalization Form Canonical Composition\nDecomposes and recomposes characters by canonical equivalence.\n\n`NFKC`\nNormalization Form Compatibility Composition\nDecomposes characters by compatibility, then recomposes them by canonical equivalence.\n\n`NFD`\nNormalization Form Canonical Decomposition\nDecomposes characters by canonical equivalence, and multiple combining characters are arranged in a specific order.\n\n`NFKD`\nNormalization Form Compatibility Decomposition\nDecomposes characters by compatibility, and multiple combining characters are arranged in a specific order.",
		ExampleSQLs: []string{
			"SELECT\n  NORMALIZE('The red barn') = NORMALIZE('The Red Barn') AS normalized,\n  NORMALIZE_AND_CASEFOLD('The red barn')\n    = NORMALIZE_AND_CASEFOLD('The Red Barn') AS normalized_with_case_folding;\n\n/*------------+------------------------------*\n | normalized | normalized_with_case_folding |\n +------------+------------------------------+\n | FALSE      | TRUE                         |\n *------------+------------------------------*/",
			"SELECT\n  '\\u2168' AS a,\n  'IX' AS b,\n  NORMALIZE_AND_CASEFOLD('\\u2168', NFD)=NORMALIZE_AND_CASEFOLD('IX', NFD) AS nfd,\n  NORMALIZE_AND_CASEFOLD('\\u2168', NFC)=NORMALIZE_AND_CASEFOLD('IX', NFC) AS nfc,\n  NORMALIZE_AND_CASEFOLD('\\u2168', NFKD)=NORMALIZE_AND_CASEFOLD('IX', NFKD) AS nkfd,\n  NORMALIZE_AND_CASEFOLD('\\u2168', NFKC)=NORMALIZE_AND_CASEFOLD('IX', NFKC) AS nkfc;\n\n/*---+----+-------+-------+------+------*\n | a | b  | nfd   | nfc   | nkfd | nkfc |\n +---+----+-------+-------+------+------+\n | Ⅸ | IX | false | false | true | true |\n *---+----+-------+-------+------+------*/",
			"SELECT\n  '\\u0041\\u030A' AS a,\n  '\\u00C5' AS b,\n  NORMALIZE_AND_CASEFOLD('\\u0041\\u030A', NFD)=NORMALIZE_AND_CASEFOLD('\\u00C5', NFD) AS nfd,\n  NORMALIZE_AND_CASEFOLD('\\u0041\\u030A', NFC)=NORMALIZE_AND_CASEFOLD('\\u00C5', NFC) AS nfc,\n  NORMALIZE_AND_CASEFOLD('\\u0041\\u030A', NFKD)=NORMALIZE_AND_CASEFOLD('\\u00C5', NFKD) AS nkfd,\n  NORMALIZE_AND_CASEFOLD('\\u0041\\u030A', NFKC)=NORMALIZE_AND_CASEFOLD('\\u00C5', NFKC) AS nkfc;\n\n/*---+----+-------+-------+------+------*\n | a | b  | nfd   | nfc   | nkfd | nkfc |\n +---+----+-------+-------+------+------+\n | Å | Å  | true  | true  | true | true |\n *---+----+-------+-------+------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#normalize_and_casefold",
	},
	{
		Name:        "OCTET_LENGTH",
		Method:      "OCTET_LENGTH(value)",
		Description: "```\nREGEXP_CONTAINS(value, regexp)\n\n```",
		ExampleSQLs: []string{
			"SELECT\n  'foo@example.com' AS email,\n  REGEXP_CONTAINS('foo@example.com', r'@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+') AS is_valid\n\n/*-----------------+----------*\n | email           | is_valid |\n +-----------------+----------+\n | foo@example.com | TRUE     |\n *-----------------+----------*/\n ```\n\n ```googlesql\nSELECT\n  'www.example.net' AS email,\n  REGEXP_CONTAINS('www.example.net', r'@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+') AS is_valid\n\n/*-----------------+----------*\n | email           | is_valid |\n +-----------------+----------+\n | www.example.net | FALSE    |\n *-----------------+----------*/\n ```\n\nThe following queries check to see if an email is valid. They\nperform a full match, using `^` and `$`. Due to regular expression operator\nprecedence, it's good practice to use parentheses around everything between `^`\nand `$`.\n\n```googlesql\nSELECT\n  'a@foo.com' AS email,\n  REGEXP_CONTAINS('a@foo.com', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('a@foo.com', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | a@foo.com      | true                | true                |\n *----------------+---------------------+---------------------*/",
			"SELECT\n  'a@foo.computer' AS email,\n  REGEXP_CONTAINS('a@foo.computer', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('a@foo.computer', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | a@foo.computer | false               | true                |\n *----------------+---------------------+---------------------*/",
			"SELECT\n  'b@bar.org' AS email,\n  REGEXP_CONTAINS('b@bar.org', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('b@bar.org', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | b@bar.org      | true                | true                |\n *----------------+---------------------+---------------------*/",
			"SELECT\n  '!b@bar.org' AS email,\n  REGEXP_CONTAINS('!b@bar.org', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('!b@bar.org', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | !b@bar.org     | false               | true                |\n *----------------+---------------------+---------------------*/",
			"SELECT\n  'c@buz.net' AS email,\n  REGEXP_CONTAINS('c@buz.net', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('c@buz.net', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | c@buz.net      | false               | false               |\n *----------------+---------------------+---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#octet_length",
	},
	{
		Name:        "REGEXP_CONTAINS",
		Method:      "REGEXP_CONTAINS(value, regexp)",
		Description: "Returns `TRUE` if `value` is a partial match for the regular expression,\n`regexp`.If the `regexp` argument is invalid, the function returns an error.You can search for a full match by using `^` (beginning of text) and `$` (end of\ntext). Due to regular expression operator precedence, it's good practice to use\nparentheses around everything between `^` and `$`.",
		ExampleSQLs: []string{
			"SELECT\n  'foo@example.com' AS email,\n  REGEXP_CONTAINS('foo@example.com', r'@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+') AS is_valid\n\n/*-----------------+----------*\n | email           | is_valid |\n +-----------------+----------+\n | foo@example.com | TRUE     |\n *-----------------+----------*/\n ```\n\n ```googlesql\nSELECT\n  'www.example.net' AS email,\n  REGEXP_CONTAINS('www.example.net', r'@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+') AS is_valid\n\n/*-----------------+----------*\n | email           | is_valid |\n +-----------------+----------+\n | www.example.net | FALSE    |\n *-----------------+----------*/\n ```\n\nThe following queries check to see if an email is valid. They\nperform a full match, using `^` and `$`. Due to regular expression operator\nprecedence, it's good practice to use parentheses around everything between `^`\nand `$`.\n\n```googlesql\nSELECT\n  'a@foo.com' AS email,\n  REGEXP_CONTAINS('a@foo.com', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('a@foo.com', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | a@foo.com      | true                | true                |\n *----------------+---------------------+---------------------*/",
			"SELECT\n  'a@foo.computer' AS email,\n  REGEXP_CONTAINS('a@foo.computer', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('a@foo.computer', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | a@foo.computer | false               | true                |\n *----------------+---------------------+---------------------*/",
			"SELECT\n  'b@bar.org' AS email,\n  REGEXP_CONTAINS('b@bar.org', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('b@bar.org', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | b@bar.org      | true                | true                |\n *----------------+---------------------+---------------------*/",
			"SELECT\n  '!b@bar.org' AS email,\n  REGEXP_CONTAINS('!b@bar.org', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('!b@bar.org', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | !b@bar.org     | false               | true                |\n *----------------+---------------------+---------------------*/",
			"SELECT\n  'c@buz.net' AS email,\n  REGEXP_CONTAINS('c@buz.net', r'^([\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org)$') AS valid_email_address,\n  REGEXP_CONTAINS('c@buz.net', r'^[\\w.+-]+@foo\\.com|[\\w.+-]+@bar\\.org$') AS without_parentheses;\n\n/*----------------+---------------------+---------------------*\n | email          | valid_email_address | without_parentheses |\n +----------------+---------------------+---------------------+\n | c@buz.net      | false               | false               |\n *----------------+---------------------+---------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_contains",
	},
	{
		Name:        "REGEXP_EXTRACT",
		Method:      "REGEXP_EXTRACT(value, regexp[, position[, occurrence]])",
		Description: "Returns the substring in `value` that matches the\n[re2 regular expression](https://github.com/google/re2/wiki/Syntax), `regexp`.\nReturns `NULL` if there is no match.If the regular expression contains a capturing group ( `(...)`), and there is a\nmatch for that capturing group, that match is returned. If there\nare multiple matches for a capturing group, the first match is returned.If `position` is specified, the search starts at this\nposition in `value`, otherwise it starts at the beginning of `value`. The\n`position` must be a positive integer and can't be 0. If `position` is greater\nthan the length of `value`, `NULL` is returned.If `occurrence` is specified, the search returns a specific occurrence of the\n`regexp` in `value`, otherwise returns the first match. If `occurrence` is\ngreater than the number of matches found, `NULL` is returned. For\n`occurrence` \\> 1, the function searches for additional occurrences beginning\nwith the character following the previous occurrence.Returns an error if:The regular expression is invalid\nThe regular expression has more than one capturing group\nThe `position` isn't a positive integer\nThe `occurrence` isn't a positive integer",
		ExampleSQLs: []string{
			"SELECT REGEXP_EXTRACT('foo@example.com', r'^[a-zA-Z0-9_.+-]+') AS user_name\n\n/*-----------*\n | user_name |\n +-----------+\n | foo       |\n *-----------*/",
			"SELECT REGEXP_EXTRACT('foo@example.com', r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.([a-zA-Z0-9-.]+$)')\n\n/*------------------*\n | top_level_domain |\n +------------------+\n | com              |\n *------------------*/",
			"SELECT\n  REGEXP_EXTRACT('ab', '.b') AS result_a,\n  REGEXP_EXTRACT('ab', '(.)b') AS result_b,\n  REGEXP_EXTRACT('xyztb', '(.)+b') AS result_c,\n  REGEXP_EXTRACT('ab', '(z)?b') AS result_d\n\n/*-------------------------------------------*\n | result_a | result_b | result_c | result_d |\n +-------------------------------------------+\n | ab       | a        | t        | NULL     |\n *-------------------------------------------*/",
			"WITH example AS\n(SELECT 'Hello Helloo and Hellooo' AS value, 'H?ello+' AS regex, 1 as position,\n1 AS occurrence UNION ALL\nSELECT 'Hello Helloo and Hellooo', 'H?ello+', 1, 2 UNION ALL\nSELECT 'Hello Helloo and Hellooo', 'H?ello+', 1, 3 UNION ALL\nSELECT 'Hello Helloo and Hellooo', 'H?ello+', 1, 4 UNION ALL\nSELECT 'Hello Helloo and Hellooo', 'H?ello+', 2, 1 UNION ALL\nSELECT 'Hello Helloo and Hellooo', 'H?ello+', 3, 1 UNION ALL\nSELECT 'Hello Helloo and Hellooo', 'H?ello+', 3, 2 UNION ALL\nSELECT 'Hello Helloo and Hellooo', 'H?ello+', 3, 3 UNION ALL\nSELECT 'Hello Helloo and Hellooo', 'H?ello+', 20, 1 UNION ALL\nSELECT 'cats&dogs&rabbits' ,'\\\\w+&', 1, 2 UNION ALL\nSELECT 'cats&dogs&rabbits', '\\\\w+&', 2, 3\n)\nSELECT value, regex, position, occurrence, REGEXP_EXTRACT(value, regex,\nposition, occurrence) AS regexp_value FROM example;\n\n/*--------------------------+---------+----------+------------+--------------*\n | value                    | regex   | position | occurrence | regexp_value |\n +--------------------------+---------+----------+------------+--------------+\n | Hello Helloo and Hellooo | H?ello+ | 1        | 1          | Hello        |\n | Hello Helloo and Hellooo | H?ello+ | 1        | 2          | Helloo       |\n | Hello Helloo and Hellooo | H?ello+ | 1        | 3          | Hellooo      |\n | Hello Helloo and Hellooo | H?ello+ | 1        | 4          | NULL         |\n | Hello Helloo and Hellooo | H?ello+ | 2        | 1          | ello         |\n | Hello Helloo and Hellooo | H?ello+ | 3        | 1          | Helloo       |\n | Hello Helloo and Hellooo | H?ello+ | 3        | 2          | Hellooo      |\n | Hello Helloo and Hellooo | H?ello+ | 3        | 3          | NULL         |\n | Hello Helloo and Hellooo | H?ello+ | 20       | 1          | NULL         |\n | cats&dogs&rabbits        | \\w+&    | 1        | 2          | dogs&        |\n | cats&dogs&rabbits        | \\w+&    | 2        | 3          | NULL         |\n *--------------------------+---------+----------+------------+--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_extract",
	},
	{
		Name:        "REGEXP_EXTRACT_ALL",
		Method:      "REGEXP_EXTRACT_ALL(value, regexp)",
		Description: "Returns an array of all substrings of `value` that match the\n[re2 regular expression](https://github.com/google/re2/wiki/Syntax), `regexp`. Returns an empty array\nif there is no match.If the regular expression contains a capturing group ( `(...)`), and there is a\nmatch for that capturing group, that match is added to the results.The `REGEXP_EXTRACT_ALL` function only returns non-overlapping matches. For\nexample, using this function to extract `ana` from `banana` returns only one\nsubstring, not two.Returns an error if:The regular expression is invalid\nThe regular expression has more than one capturing group",
		ExampleSQLs: []string{
			"SELECT REGEXP_EXTRACT_ALL('Try `func(x)` or `func(y)`', '`(.+?)`') AS example\n\n/*--------------------*\n | example            |\n +--------------------+\n | [func(x), func(y)] |\n *--------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_extract_all",
	},
	{
		Name:        "REGEXP_INSTR",
		Method:      "REGEXP_INSTR(source_value, regexp [, position[, occurrence, [occurrence_position]]])",
		Description: "Returns the lowest 1-based position of a regular expression, `regexp`, in\n`source_value`. `source_value` and `regexp` must be the same type, either\n`STRING` or `BYTES`.If `position` is specified, the search starts at this position in\n`source_value`, otherwise it starts at `1`, which is the beginning of\n`source_value`. `position` is of type `INT64` and must be positive.If `occurrence` is specified, the search returns the position of a specific\ninstance of `regexp` in `source_value`. If not specified, `occurrence` defaults\nto `1` and returns the position of the first occurrence. For `occurrence` \\> 1,\nthe function searches for the next, non-overlapping occurrence.\n`occurrence` is of type `INT64` and must be positive.You can optionally use `occurrence_position` to specify where a position\nin relation to an `occurrence` starts. Your choices are:`0`: Returns the start position of `occurrence`.\n`1`: Returns the end position of `occurrence` \\+ `1`. If the\nend of the occurrence is at the end of `source_value`,\n`LENGTH(source_value) + 1` is returned.Returns `0` if:No match is found.\nIf `occurrence` is greater than the number of matches found.\nIf `position` is greater than the length of `source_value`.\nThe regular expression is empty.Returns `NULL` if:`position` is `NULL`.\n`occurrence` is `NULL`.Returns an error if:",
		ExampleSQLs: []string{
			"SELECT\n  REGEXP_INSTR('ab@cd-ef',  '@[^-]*') AS instr_a,\n  REGEXP_INSTR('ab@d-ef',   '@[^-]*') AS instr_b,\n  REGEXP_INSTR('abc@cd-ef', '@[^-]*') AS instr_c,\n  REGEXP_INSTR('abc-ef',    '@[^-]*') AS instr_d,\n\n/*---------------------------------------*\n | instr_a | instr_b | instr_c | instr_d |\n +---------------------------------------+\n | 3       | 3       | 4       | 0       |\n *---------------------------------------*/",
			"SELECT\n  REGEXP_INSTR('a@cd-ef b@cd-ef', '@[^-]*', 1) AS instr_a,\n  REGEXP_INSTR('a@cd-ef b@cd-ef', '@[^-]*', 2) AS instr_b,\n  REGEXP_INSTR('a@cd-ef b@cd-ef', '@[^-]*', 3) AS instr_c,\n  REGEXP_INSTR('a@cd-ef b@cd-ef', '@[^-]*', 4) AS instr_d,\n\n/*---------------------------------------*\n | instr_a | instr_b | instr_c | instr_d |\n +---------------------------------------+\n | 2       | 2       | 10      | 10      |\n *---------------------------------------*/",
			"SELECT\n  REGEXP_INSTR('a@cd-ef b@cd-ef c@cd-ef', '@[^-]*', 1, 1) AS instr_a,\n  REGEXP_INSTR('a@cd-ef b@cd-ef c@cd-ef', '@[^-]*', 1, 2) AS instr_b,\n  REGEXP_INSTR('a@cd-ef b@cd-ef c@cd-ef', '@[^-]*', 1, 3) AS instr_c\n\n/*-----------------------------*\n | instr_a | instr_b | instr_c |\n +-----------------------------+\n | 2       | 10      | 18      |\n *-----------------------------*/",
			"SELECT\n  REGEXP_INSTR('a@cd-ef', '@[^-]*', 1, 1, 0) AS instr_a,\n  REGEXP_INSTR('a@cd-ef', '@[^-]*', 1, 1, 1) AS instr_b\n\n/*-------------------*\n | instr_a | instr_b |\n +-------------------+\n | 2       | 5       |\n *-------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_instr",
	},
	{
		Name:        "REGEXP_REPLACE",
		Method:      "REGEXP_REPLACE(value, regexp, replacement)",
		Description: "Returns a `STRING` where all substrings of `value` that\nmatch regular expression `regexp` are replaced with `replacement`.You can use backslashed-escaped digits (\\\\1 to \\\\9) within the `replacement`\nargument to insert text matching the corresponding parenthesized group in the\n`regexp` pattern. Use \\\\0 to refer to the entire matching text.To add a backslash in your regular expression, you must first escape it. For\nexample, `SELECT REGEXP_REPLACE('abc', 'b(.)', 'X\\\\1');` returns `aXc`. You can\nalso use [raw strings](https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#string_and_bytes_literals) to remove one layer of\nescaping, for example `SELECT REGEXP_REPLACE('abc', 'b(.)', r'X\\1');`.The `REGEXP_REPLACE` function only replaces non-overlapping matches. For\nexample, replacing `ana` within `banana` results in only one replacement, not\ntwo.If the `regexp` argument isn't a valid regular expression, this function\nreturns an error.",
		ExampleSQLs: []string{
			"SELECT REGEXP_REPLACE('# Heading', r'^# ([a-zA-Z0-9\\s]+$)', '<h1>\\\\1</h1>') AS html\n\n/*--------------------------*\n | html                     |\n +--------------------------+\n | <h1>Heading</h1>         |\n *--------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_replace",
	},
	{
		Name:        "REGEXP_SUBSTR",
		Method:      "REGEXP_SUBSTR(value, regexp[, position[, occurrence]])",
		Description: "Synonym for [REGEXP\\_EXTRACT](#regexp_extract).",
		ExampleSQLs: []string{
			"WITH example AS\n(SELECT 'Hello World Helloo' AS value, 'H?ello+' AS regex, 1 AS position, 1 AS\noccurrence\n)\nSELECT value, regex, position, occurrence, REGEXP_SUBSTR(value, regex,\nposition, occurrence) AS regexp_value FROM example;\n\n/*--------------------+---------+----------+------------+--------------*\n | value              | regex   | position | occurrence | regexp_value |\n +--------------------+---------+----------+------------+--------------+\n | Hello World Helloo | H?ello+ | 1        | 1          | Hello        |\n *--------------------+---------+----------+------------+--------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#regexp_substr",
	},
	{
		Name:        "REPEAT",
		Method:      "REPEAT(original_value, repetitions)",
		Description: "Returns a `STRING` or `BYTES` value that consists of `original_value`, repeated.\nThe `repetitions` parameter specifies the number of times to repeat\n`original_value`. Returns `NULL` if either `original_value` or `repetitions`\nare `NULL`.This function returns an error if the `repetitions` value is negative.",
		ExampleSQLs: []string{
			"SELECT REPEAT('abc', 3) AS results\n\n/*-----------*\n | results   |\n |-----------|\n | abcabcabc |\n *-----------*/",
			"SELECT REPEAT('abc', NULL) AS results\n\n/*---------*\n | results |\n |---------|\n | NULL    |\n *---------*/",
			"SELECT REPEAT(NULL, 3) AS results\n\n/*---------*\n | results |\n |---------|\n | NULL    |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#repeat",
	},
	{
		Name:        "REPLACE",
		Method:      "REPLACE(original_value, from_pattern, to_pattern)",
		Description: "Replaces all occurrences of `from_pattern` with `to_pattern` in\n`original_value`. If `from_pattern` is empty, no replacement is made.This function supports specifying [collation](https://cloud.google.com/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{
			"WITH desserts AS\n  (SELECT 'apple pie' as dessert\n  UNION ALL\n  SELECT 'blackberry pie' as dessert\n  UNION ALL\n  SELECT 'cherry pie' as dessert)\n\nSELECT\n  REPLACE (dessert, 'pie', 'cobbler') as example\nFROM desserts;\n\n/*--------------------*\n | example            |\n +--------------------+\n | apple cobbler      |\n | blackberry cobbler |\n | cherry cobbler     |\n *--------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#replace",
	},
	{
		Name:        "REVERSE",
		Method:      "REVERSE(value)",
		Description: "Returns the reverse of the input `STRING` or `BYTES`.",
		ExampleSQLs: []string{
			"SELECT REVERSE('abc') AS results\n\n/*---------*\n | results |\n +---------+\n | cba     |\n *---------*/",
			"SELECT FORMAT('%T', REVERSE(b'1a3')) AS results\n\n/*---------*\n | results |\n +---------+\n | b\"3a1\"  |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#reverse",
	},
	{
		Name:        "RIGHT",
		Method:      "RIGHT(value, length)",
		Description: "Returns a `STRING` or `BYTES` value that consists of the specified\nnumber of rightmost characters or bytes from `value`. The `length` is an\n`INT64` that specifies the length of the returned\nvalue. If `value` is `BYTES`, `length` is the number of rightmost bytes to\nreturn. If `value` is `STRING`, `length` is the number of rightmost characters\nto return.If `length` is 0, an empty `STRING` or `BYTES` value will be\nreturned. If `length` is negative, an error will be returned. If `length`\nexceeds the number of characters or bytes from `value`, the original `value`\nwill be returned.",
		ExampleSQLs: []string{
			"SELECT 'apple' AS example, RIGHT('apple', 3) AS right_example\n\n/*---------+---------------*\n | example | right_example |\n +---------+---------------+\n | apple   | ple           |\n *---------+---------------*/",
			"SELECT b'apple' AS example, RIGHT(b'apple', 3) AS right_example\n\n-- Note that the result of RIGHT is of type BYTES, displayed as a base64-encoded string.\n/*----------+---------------*\n | example  | right_example |\n +----------+---------------+\n | YXBwbGU= | cGxl          |\n *----------+---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#right",
	},
	{
		Name:        "RPAD",
		Method:      "RPAD(original_value, return_length[, pattern])",
		Description: "Returns a `STRING` or `BYTES` value that consists of `original_value` appended\nwith `pattern`. The `return_length` parameter is an\n`INT64` that specifies the length of the\nreturned value. If `original_value` is `BYTES`,\n`return_length` is the number of bytes. If `original_value` is `STRING`,\n`return_length` is the number of characters.The default value of `pattern` is a blank space.Both `original_value` and `pattern` must be the same data type.If `return_length` is less than or equal to the `original_value` length, this\nfunction returns the `original_value` value, truncated to the value of\n`return_length`. For example, `RPAD('hello world', 7);` returns `'hello w'`.If `original_value`, `return_length`, or `pattern` is `NULL`, this function\nreturns `NULL`.This function returns an error if:`return_length` is negative\n`pattern` is empty",
		ExampleSQLs: []string{
			"SELECT FORMAT('%T', RPAD('c', 5)) AS results\n\n/*---------*\n | results |\n +---------+\n | \"c    \" |\n *---------*/",
			"SELECT RPAD('b', 5, 'a') AS results\n\n/*---------*\n | results |\n +---------+\n | baaaa   |\n *---------*/",
			"SELECT RPAD('abc', 10, 'ghd') AS results\n\n/*------------*\n | results    |\n +------------+\n | abcghdghdg |\n *------------*/",
			"SELECT RPAD('abc', 2, 'd') AS results\n\n/*---------*\n | results |\n +---------+\n | ab      |\n *---------*/",
			"SELECT FORMAT('%T', RPAD(b'abc', 10, b'ghd')) AS results\n\n/*---------------*\n | results       |\n +---------------+\n | b\"abcghdghdg\" |\n *---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#rpad",
	},
	{
		Name:        "RTRIM",
		Method:      "RTRIM(value1[, value2])",
		Description: "Identical to [TRIM](#trim), but only removes trailing characters.",
		ExampleSQLs: []string{
			"SELECT RTRIM('***apple***', '*') AS example\n\n/*-----------*\n | example   |\n +-----------+\n | ***apple  |\n *-----------*/",
			"SELECT RTRIM('applexxz', 'xyz') AS example\n\n/*---------*\n | example |\n +---------+\n | apple   |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#rtrim",
	},
	{
		Name:        "SAFE_CONVERT_BYTES_TO_STRING",
		Method:      "SAFE_CONVERT_BYTES_TO_STRING(value)",
		Description: "Converts a sequence of `BYTES` to a `STRING`. Any invalid UTF-8 characters are\nreplaced with the Unicode replacement character, `U+FFFD`.",
		ExampleSQLs: []string{
			"SELECT SAFE_CONVERT_BYTES_TO_STRING(b'\\xc2') as safe_convert;",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#safe_convert_bytes_to_string",
	},
	{
		Name:        "SOUNDEX",
		Method:      "SOUNDEX(value)",
		Description: "Returns a `STRING` that represents the\n[Soundex](https://en.wikipedia.org/wiki/Soundex) code for `value`.SOUNDEX produces a phonetic representation of a string. It indexes words by\nsound, as pronounced in English. It's typically used to help determine whether\ntwo strings, such as the family names _Levine_ and _Lavine_, or the words _to_\nand _too_, have similar English-language pronunciation.The result of the SOUNDEX consists of a letter followed by 3 digits. Non-latin\ncharacters are ignored. If the remaining string is empty after removing\nnon-Latin characters, an empty `STRING` is returned.",
		ExampleSQLs: []string{
			"SELECT 'Ashcraft' AS value, SOUNDEX('Ashcraft') AS soundex\n\n/*----------------------+---------*\n | value                | soundex |\n +----------------------+---------+\n | Ashcraft             | A261    |\n *----------------------+---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#soundex",
	},
	{
		Name:        "SPLIT",
		Method:      "SPLIT(value[, delimiter])",
		Description: "Splits a `STRING` or `BYTES` value, using a delimiter. The `delimiter` argument\nmust be a literal character or sequence of characters. You can't split with a\nregular expression.For `STRING`, the default delimiter is the comma `,`.For `BYTES`, you must specify a delimiter.Splitting on an empty delimiter produces an array of UTF-8 characters for\n`STRING` values, and an array of `BYTES` for `BYTES` values.Splitting an empty `STRING` returns an\n`ARRAY` with a single empty\n`STRING`.This function supports specifying [collation](https://cloud.google.com/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{
			"WITH letters AS\n  (SELECT '' as letter_group\n  UNION ALL\n  SELECT 'a' as letter_group\n  UNION ALL\n  SELECT 'b c d' as letter_group)\n\nSELECT SPLIT(letter_group, ' ') as example\nFROM letters;\n\n/*----------------------*\n | example              |\n +----------------------+\n | []                   |\n | [a]                  |\n | [b, c, d]            |\n *----------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#split",
	},
	{
		Name:        "STARTS_WITH",
		Method:      "STARTS_WITH(value, prefix)",
		Description: "Takes two `STRING` or `BYTES` values. Returns `TRUE` if `prefix` is a\nprefix of `value`.This function supports specifying [collation](https://cloud.google.com/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{
			"SELECT STARTS_WITH('bar', 'b') AS example\n\n/*---------*\n | example |\n +---------+\n |    True |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#starts_with",
	},
	{
		Name:        "STRPOS",
		Method:      "STRPOS(value, subvalue)",
		Description: "Takes two `STRING` or `BYTES` values. Returns the 1-based position of the first\noccurrence of `subvalue` inside `value`. Returns `0` if `subvalue` isn't found.This function supports specifying [collation](https://cloud.google.com/bigquery/docs/reference/standard-sql/collation-concepts#collate_about).",
		ExampleSQLs: []string{
			"SELECT STRPOS('foo@example.com', '@') AS example\n\n/*---------*\n | example |\n +---------+\n |       4 |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#strpos",
	},
	{
		Name:        "SUBSTR",
		Method:      "SUBSTR(value, position[, length])",
		Description: "Gets a portion (substring) of the supplied `STRING` or `BYTES` value.The `position` argument is an integer specifying the starting position of the\nsubstring.If `position` is `1`, the substring starts from the first character or byte.\nIf `position` is `0` or less than `-LENGTH(value)`, `position` is set to `1`,\nand the substring starts from the first character or byte.\nIf `position` is greater than the length of `value`, the function produces\nan empty substring.\nIf `position` is negative, the function counts from the end of `value`,\nwith `-1` indicating the last character or byte.The `length` argument specifies the maximum number of characters or bytes to\nreturn.If `length` isn't specified, the function produces a substring that starts\nat the specified position and ends at the last character or byte of `value`.\nIf `length` is `0`, the function produces an empty substring.\nIf `length` is negative, the function produces an error.\nThe returned substring may be shorter than `length`, for example, when\n`length` exceeds the length of `value`, or when the starting position of the\nsubstring plus `length` is greater than the length of `value`.",
		ExampleSQLs: []string{
			"SELECT SUBSTR('apple', 2) AS example\n\n/*---------*\n | example |\n +---------+\n | pple    |\n *---------*/",
			"SELECT SUBSTR('apple', 2, 2) AS example\n\n/*---------*\n | example |\n +---------+\n | pp      |\n *---------*/",
			"SELECT SUBSTR('apple', -2) AS example\n\n/*---------*\n | example |\n +---------+\n | le      |\n *---------*/",
			"SELECT SUBSTR('apple', 1, 123) AS example\n\n/*---------*\n | example |\n +---------+\n | apple   |\n *---------*/",
			"SELECT SUBSTR('apple', 123) AS example\n\n/*---------*\n | example |\n +---------+\n |         |\n *---------*/",
			"SELECT SUBSTR('apple', 123, 5) AS example\n\n/*---------*\n | example |\n +---------+\n |         |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#substr",
	},
	{
		Name:        "SUBSTRING",
		Method:      "SUBSTRING(value, position[, length])",
		Description: "```\nTO_BASE32(bytes_expr)\n\n```",
		ExampleSQLs: []string{
			"SELECT TO_BASE32(b'abcde\\xFF') AS base32_string;\n\n/*------------------*\n | base32_string    |\n +------------------+\n | MFRGGZDF74====== |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#substring",
	},
	{
		Name:        "TO_BASE32",
		Method:      "TO_BASE32(bytes_expr)",
		Description: "Converts a sequence of `BYTES` into a base32-encoded `STRING`. To convert a\nbase32-encoded `STRING` into `BYTES`, use [FROM\\_BASE32](#from_base32).",
		ExampleSQLs: []string{
			"SELECT TO_BASE32(b'abcde\\xFF') AS base32_string;\n\n/*------------------*\n | base32_string    |\n +------------------+\n | MFRGGZDF74====== |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#to_base32",
	},
	{
		Name:        "TO_BASE64",
		Method:      "TO_BASE64(bytes_expr)",
		Description: "Converts a sequence of `BYTES` into a base64-encoded `STRING`. To convert a\nbase64-encoded `STRING` into `BYTES`, use [FROM\\_BASE64](#from_base64).There are several base64 encodings in common use that vary in exactly which\nalphabet of 65 ASCII characters are used to encode the 64 digits and padding.\nSee [RFC 4648](https://tools.ietf.org/html/rfc4648#section-4) for details. This\nfunction adds padding and uses the alphabet `[A-Za-z0-9+/=]`.",
		ExampleSQLs: []string{
			"SELECT TO_BASE64(b'\\377\\340') AS base64_string;\n\n/*---------------*\n | base64_string |\n +---------------+\n | /+A=          |\n *---------------*/",
			"SELECT REPLACE(REPLACE(TO_BASE64(b'\\377\\340'), '+', '-'), '/', '_') as websafe_base64;\n\n/*----------------*\n | websafe_base64 |\n +----------------+\n | _-A=           |\n *----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#to_base64",
	},
	{
		Name:        "TO_CODE_POINTS",
		Method:      "TO_CODE_POINTS(value)",
		Description: "Takes a `STRING` or `BYTES` value and returns an array of `INT64` values that\nrepresent code points or extended ASCII character values.If `value` is a `STRING`, each element in the returned array represents a\n[code point](https://en.wikipedia.org/wiki/Code_point). Each code point falls\nwithin the range of \\[0, 0xD7FF\\] and \\[0xE000, 0x10FFFF\\].\nIf `value` is `BYTES`, each element in the array is an extended ASCII\ncharacter value in the range of \\[0, 255\\].To convert from an array of code points to a `STRING` or `BYTES`, see\n[CODE\\_POINTS\\_TO\\_STRING](#code_points_to_string) or\n[CODE\\_POINTS\\_TO\\_BYTES](#code_points_to_bytes).",
		ExampleSQLs: []string{
			"SELECT\n  'foo' AS word,\n  TO_CODE_POINTS('foo') AS code_points\n\n/*---------+------------------------------------*\n | word    | code_points                        |\n +---------+------------------------------------+\n | foo     | [102, 111, 111]                    |\n *---------+------------------------------------*/",
			"SELECT\n  'bar' AS word,\n  TO_CODE_POINTS('bar') AS code_points\n\n/*---------+------------------------------------*\n | word    | code_points                        |\n +---------+------------------------------------+\n | bar     | [98, 97, 114]                      |\n *---------+------------------------------------*/",
			"SELECT\n  'baz' AS word,\n  TO_CODE_POINTS('baz') AS code_points\n\n/*---------+------------------------------------*\n | word    | code_points                        |\n +---------+------------------------------------+\n | baz     | [98, 97, 122]                      |\n *---------+------------------------------------*/",
			"SELECT\n  'giraffe' AS word,\n  TO_CODE_POINTS('giraffe') AS code_points\n\n/*---------+------------------------------------*\n | word    | code_points                        |\n +---------+------------------------------------+\n | giraffe | [103, 105, 114, 97, 102, 102, 101] |\n *---------+------------------------------------*/",
			"SELECT\n  'llama' AS word,\n  TO_CODE_POINTS('llama') AS code_points\n\n/*---------+------------------------------------*\n | word    | code_points                        |\n +---------+------------------------------------+\n | llama   | [108, 108, 97, 109, 97]            |\n *---------+------------------------------------*/",
			"SELECT\n  b'\\x66\\x6f\\x6f' AS bytes_value,\n  TO_CODE_POINTS(b'\\x66\\x6f\\x6f') AS bytes_value_as_integer\n\n/*------------------+------------------------*\n | bytes_value      | bytes_value_as_integer |\n +------------------+------------------------+\n | foo              | [102, 111, 111]        |\n *------------------+------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#to_code_points",
	},
	{
		Name:        "TO_HEX",
		Method:      "TO_HEX(bytes)",
		Description: "Converts a sequence of `BYTES` into a hexadecimal `STRING`. Converts each byte\nin the `STRING` as two hexadecimal characters in the range\n`(0..9, a..f)`. To convert a hexadecimal-encoded\n`STRING` to `BYTES`, use [FROM\\_HEX](#from_hex).",
		ExampleSQLs: []string{
			"SELECT\n  b'\\x00\\x01\\x02\\x03\\xAA\\xEE\\xEF\\xFF' AS byte_string,\n  TO_HEX(b'\\x00\\x01\\x02\\x03\\xAA\\xEE\\xEF\\xFF') AS hex_string\n\n/*----------------------------------+------------------*\n | byte_string                      | hex_string       |\n +----------------------------------+------------------+\n | \\x00\\x01\\x02\\x03\\xaa\\xee\\xef\\xff | 00010203aaeeefff |\n *----------------------------------+------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#to_hex",
	},
	{
		Name:        "TRANSLATE",
		Method:      "TRANSLATE(expression, source_characters, target_characters)",
		Description: "In `expression`, replaces each character in `source_characters` with the\ncorresponding character in `target_characters`. All inputs must be the same\ntype, either `STRING` or `BYTES`.Each character in `expression` is translated at most once.\nA character in `expression` that isn't present in `source_characters` is left\nunchanged in `expression`.\nA character in `source_characters` without a corresponding character in\n`target_characters` is omitted from the result.\nA duplicate character in `source_characters` results in an error.",
		ExampleSQLs: []string{
			"SELECT TRANSLATE('This is a cookie', 'sco', 'zku') AS translate\n\n/*------------------*\n | translate        |\n +------------------+\n | Thiz iz a kuukie |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#translate",
	},
	{
		Name:        "TRIM",
		Method:      "TRIM(value_to_trim[, set_of_characters_to_remove])",
		Description: "Takes a `STRING` or `BYTES` value to trim.If the value to trim is a `STRING`, removes from this value all leading and\ntrailing Unicode code points in `set_of_characters_to_remove`.\nThe set of code points is optional. If it isn't specified, all\nwhitespace characters are removed from the beginning and end of the\nvalue to trim.If the value to trim is `BYTES`, removes from this value all leading and\ntrailing bytes in `set_of_characters_to_remove`. The set of bytes is required.",
		ExampleSQLs: []string{
			"SELECT CONCAT('#', TRIM( '   apple   '), '#') AS example\n\n/*----------*\n | example  |\n +----------+\n | #apple#  |\n *----------*/",
			"SELECT TRIM('***apple***', '*') AS example\n\n/*---------*\n | example |\n +---------+\n | apple   |\n *---------*/",
			"SELECT TRIM('xzxapplexxy', 'xyz') as example\n\n/*---------*\n | example |\n +---------+\n | apple   |\n *---------*/",
			"SELECT\n  TRIM('abaW̊', 'Y̊') AS a,\n  TRIM('W̊aba', 'Y̊') AS b,\n  TRIM('abaŪ̊', 'Y̊') AS c,\n  TRIM('Ū̊aba', 'Y̊') AS d\n\n/*------+------+------+------*\n | a    | b    | c    | d    |\n +------+------+------+------+\n | abaW | W̊aba | abaŪ | Ūaba |\n *------+------+------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#trim",
	},
	{
		Name:        "UNICODE",
		Method:      "UNICODE(value)",
		Description: "Returns the Unicode [code point](https://en.wikipedia.org/wiki/Code_point) for the first character in\n`value`. Returns `0` if `value` is empty, or if the resulting Unicode code\npoint is `0`.",
		ExampleSQLs: []string{
			"SELECT UNICODE('âbcd') as A, UNICODE('â') as B, UNICODE('') as C, UNICODE(NULL) as D;\n\n/*-------+-------+-------+-------*\n | A     | B     | C     | D     |\n +-------+-------+-------+-------+\n | 226   | 226   | 0     | NULL  |\n *-------+-------+-------+-------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#unicode",
	},
	{
		Name:        "UPPER",
		Method:      "UPPER(value)",
		Description: "For `STRING` arguments, returns the original string with all alphabetic\ncharacters in uppercase. Mapping between uppercase and lowercase is done\naccording to the\n[Unicode Character Database](http://unicode.org/ucd/)\nwithout taking into account language-specific mappings.For `BYTES` arguments, the argument is treated as ASCII text, with all bytes\ngreater than 127 left intact.",
		ExampleSQLs: []string{
			"SELECT UPPER('foo') AS example\n\n/*---------*\n | example |\n +---------+\n | FOO     |\n *---------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions#upper",
	},
	{
		Name:        "CURRENT_TIME",
		Method:      "CURRENT_TIME([time_zone])",
		Description: "Returns the current time as a `TIME` object. Parentheses are optional when\ncalled with no arguments.This function supports an optional `time_zone` parameter.\nSee [Time zone definitions](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timezone_definitions) for information\non how to specify a time zone.The current time value is set at the start of the query statement that contains\nthis function. All invocations of `CURRENT_TIME()` within a query statement\nyield the same value.",
		ExampleSQLs: []string{
			"SELECT CURRENT_TIME() as now;\n\n/*----------------------------*\n | now                        |\n +----------------------------+\n | 15:31:38.776361            |\n *----------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#current_time",
	},
	{
		Name:        "EXTRACT",
		Method:      "EXTRACT(part FROM time_expression)",
		Description: "Returns a value that corresponds to the specified `part` from\na supplied `time_expression`.Allowed `part` values are:`MICROSECOND`\n`MILLISECOND`\n`SECOND`\n`MINUTE`\n`HOUR`Returned values truncate lower order time periods. For example, when extracting\nseconds, `EXTRACT` truncates the millisecond and microsecond values.",
		ExampleSQLs: []string{
			"SELECT EXTRACT(HOUR FROM TIME \"15:30:00\") as hour;\n\n/*------------------*\n | hour             |\n +------------------+\n | 15               |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#extract",
	},
	{
		Name:        "FORMAT_TIME",
		Method:      "FORMAT_TIME(format_string, time_expr)",
		Description: "Formats a `TIME` value according to the specified format string.",
		ExampleSQLs: []string{
			"SELECT FORMAT_TIME(\"%R\", TIME \"15:30:00\") as formatted_time;\n\n/*----------------*\n | formatted_time |\n +----------------+\n | 15:30          |\n *----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#format_time",
	},
	{
		Name:        "PARSE_TIME",
		Method:      "PARSE_TIME(format_string, time_string)",
		Description: "Converts a `STRING` value to a `TIME` value.",
		ExampleSQLs: []string{
			"SELECT PARSE_TIME(\"%H\", \"15\") as parsed_time;\n\n/*-------------*\n | parsed_time |\n +-------------+\n | 15:00:00    |\n *-------------*/",
			"SELECT PARSE_TIME('%I:%M:%S %p', '2:23:38 pm') AS parsed_time;\n\n/*-------------*\n | parsed_time |\n +-------------+\n | 14:23:38    |\n *-------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#parse_time",
	},
	{
		Name:        "TIME",
		Method:      "1. TIME(hour, minute, second)\n2. TIME(timestamp, [time_zone])\n3. TIME(datetime)",
		Description: "Constructs a `TIME` object using `INT64`\nvalues representing the hour, minute, and second.\nConstructs a `TIME` object using a `TIMESTAMP` object. It supports an\noptional\nparameter to [specify a time zone](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timezone_definitions). If no\ntime zone is specified, the default time zone, UTC, is\nused.\nConstructs a `TIME` object using a\n`DATETIME` object.",
		ExampleSQLs: []string{
			"SELECT\n  TIME(15, 30, 00) as time_hms,\n  TIME(TIMESTAMP \"2008-12-25 15:30:00+08\", \"America/Los_Angeles\") as time_tstz;\n\n/*----------+-----------*\n | time_hms | time_tstz |\n +----------+-----------+\n | 15:30:00 | 23:30:00  |\n *----------+-----------*/",
			"SELECT TIME(DATETIME \"2008-12-25 15:30:00.000000\") AS time_dt;\n\n/*----------*\n | time_dt  |\n +----------+\n | 15:30:00 |\n *----------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time",
	},
	{
		Name:        "TIME_ADD",
		Method:      "TIME_ADD(time_expression, INTERVAL int64_expression part)",
		Description: "Adds `int64_expression` units of `part` to the `TIME` object.`TIME_ADD` supports the following values for `part`:`MICROSECOND`\n`MILLISECOND`\n`SECOND`\n`MINUTE`\n`HOUR`This function automatically adjusts when values fall outside of the 00:00:00 to\n24:00:00 boundary. For example, if you add an hour to `23:30:00`, the returned\nvalue is `00:30:00`.",
		ExampleSQLs: []string{
			"SELECT\n  TIME \"15:30:00\" as original_time,\n  TIME_ADD(TIME \"15:30:00\", INTERVAL 10 MINUTE) as later;\n\n/*-----------------------------+------------------------*\n | original_time               | later                  |\n +-----------------------------+------------------------+\n | 15:30:00                    | 15:40:00               |\n *-----------------------------+------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time_add",
	},
	{
		Name:        "TIME_DIFF",
		Method:      "TIME_DIFF(end_time, start_time, granularity)",
		Description: "Gets the number of unit boundaries between two `TIME` values ( `end_time` -\n`start_time`) at a particular time granularity.",
		ExampleSQLs: []string{
			"SELECT\n  TIME \"15:30:00\" as first_time,\n  TIME \"14:35:00\" as second_time,\n  TIME_DIFF(TIME \"15:30:00\", TIME \"14:35:00\", MINUTE) as difference;\n\n/*----------------------------+------------------------+------------------------*\n | first_time                 | second_time            | difference             |\n +----------------------------+------------------------+------------------------+\n | 15:30:00                   | 14:35:00               | 55                     |\n *----------------------------+------------------------+------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time_diff",
	},
	{
		Name:        "TIME_SUB",
		Method:      "TIME_SUB(time_expression, INTERVAL int64_expression part)",
		Description: "Subtracts `int64_expression` units of `part` from the `TIME` object.`TIME_SUB` supports the following values for `part`:`MICROSECOND`\n`MILLISECOND`\n`SECOND`\n`MINUTE`\n`HOUR`This function automatically adjusts when values fall outside of the 00:00:00 to\n24:00:00 boundary. For example, if you subtract an hour from `00:30:00`, the\nreturned value is `23:30:00`.",
		ExampleSQLs: []string{
			"SELECT\n  TIME \"15:30:00\" as original_date,\n  TIME_SUB(TIME \"15:30:00\", INTERVAL 10 MINUTE) as earlier;\n\n/*-----------------------------+------------------------*\n | original_date               | earlier                |\n +-----------------------------+------------------------+\n | 15:30:00                    | 15:20:00               |\n *-----------------------------+------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time_sub",
	},
	{
		Name:        "TIME_TRUNC",
		Method:      "TIME_TRUNC(time_value, time_granularity)",
		Description: "Truncates a `TIME` value at a particular granularity.",
		ExampleSQLs: []string{
			"SELECT\n  TIME \"15:30:00\" as original,\n  TIME_TRUNC(TIME \"15:30:00\", HOUR) as truncated;\n\n/*----------------------------+------------------------*\n | original                   | truncated              |\n +----------------------------+------------------------+\n | 15:30:00                   | 15:00:00               |\n *----------------------------+------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions#time_trunc",
	},
	{
		Name:        "CURRENT_TIMESTAMP",
		Method:      "CURRENT_TIMESTAMP()",
		Description: "Returns the current date and time as a timestamp object. The timestamp is\ncontinuous, non-ambiguous, has exactly 60 seconds per minute and doesn't repeat\nvalues over the leap second. Parentheses are optional.This function handles leap seconds by smearing them across a window of 20 hours\naround the inserted leap second.The current timestamp value is set at the start of the query statement that\ncontains this function. All invocations of `CURRENT_TIMESTAMP()` within a query\nstatement yield the same value.",
		ExampleSQLs: []string{
			"SELECT CURRENT_TIMESTAMP() AS now;\n\n/*--------------------------------*\n | now                            |\n +--------------------------------+\n | 2020-06-02 23:57:12.120174 UTC |\n *--------------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#current_timestamp",
	},
	{
		Name:        "EXTRACT",
		Method:      "EXTRACT(part FROM timestamp_expression [AT TIME ZONE time_zone])",
		Description: "Returns a value that corresponds to the specified `part` from\na supplied `timestamp_expression`. This function supports an optional\n`time_zone` parameter. See\n[Time zone definitions](#timezone_definitions) for information\non how to specify a time zone.Allowed `part` values are:`MICROSECOND`\n`MILLISECOND`\n`SECOND`\n`MINUTE`\n`HOUR`\n`DAYOFWEEK`: Returns values in the range \\[1,7\\] with Sunday as the first day of\nof the week.\n`DAY`\n`DAYOFYEAR`\n`WEEK`: Returns the week number of the date in the range \\[0, 53\\]. Weeks begin\nwith Sunday, and dates prior to the first Sunday of the year are in week 0.\n`WEEK(<WEEKDAY>)`: Returns the week number of `timestamp_expression` in the\nrange \\[0, 53\\]. Weeks begin on `WEEKDAY`. `datetime` s prior to the first\n`WEEKDAY` of the year are in week 0. Valid values for `WEEKDAY` are `SUNDAY`,\n`MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, and `SATURDAY`.\n`ISOWEEK`: Returns the [ISO 8601 week](https://en.wikipedia.org/wiki/ISO_week_date)\nnumber of the `datetime_expression`. `ISOWEEK` s begin on Monday. Return values\nare in the range \\[1, 53\\]. The first `ISOWEEK` of each ISO year begins on the\nMonday before the first Thursday of the Gregorian calendar year.\n`MONTH`\n`QUARTER`\n`YEAR`\n`ISOYEAR`: Returns the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\nweek-numbering year, which is the Gregorian calendar year containing the\nThursday of the week to which `date_expression` belongs.\n`DATE`\n`DATETIME`\n`TIME`Returned values truncate lower order time periods. For example, when extracting\nseconds, `EXTRACT` truncates the millisecond and microsecond values.",
		ExampleSQLs: []string{
			"SELECT\n  EXTRACT(\n    DAY\n    FROM TIMESTAMP('2008-12-25 05:30:00+00') AT TIME ZONE 'UTC')\n    AS the_day_utc,\n  EXTRACT(\n    DAY\n    FROM TIMESTAMP('2008-12-25 05:30:00+00') AT TIME ZONE 'America/Los_Angeles')\n    AS the_day_california\n\n/*-------------+--------------------*\n | the_day_utc | the_day_california |\n +-------------+--------------------+\n | 25          | 24                 |\n *-------------+--------------------*/",
			"SELECT\n  EXTRACT(ISOYEAR FROM TIMESTAMP(\"2005-01-03 12:34:56+00\")) AS isoyear,\n  EXTRACT(ISOWEEK FROM TIMESTAMP(\"2005-01-03 12:34:56+00\")) AS isoweek,\n  EXTRACT(YEAR FROM TIMESTAMP(\"2005-01-03 12:34:56+00\")) AS year,\n  EXTRACT(WEEK FROM TIMESTAMP(\"2005-01-03 12:34:56+00\")) AS week\n\n-- Display of results may differ, depending upon the environment and\n-- time zone where this query was executed.\n/*---------+---------+------+------*\n | isoyear | isoweek | year | week |\n +---------+---------+------+------+\n | 2005    | 1       | 2005 | 1    |\n *---------+---------+------+------*/",
			"SELECT\n  TIMESTAMP(\"2007-12-31 12:00:00+00\") AS timestamp_value,\n  EXTRACT(ISOYEAR FROM TIMESTAMP(\"2007-12-31 12:00:00+00\")) AS isoyear,\n  EXTRACT(ISOWEEK FROM TIMESTAMP(\"2007-12-31 12:00:00+00\")) AS isoweek,\n  EXTRACT(YEAR FROM TIMESTAMP(\"2007-12-31 12:00:00+00\")) AS year,\n  EXTRACT(WEEK FROM TIMESTAMP(\"2007-12-31 12:00:00+00\")) AS week\n\n-- Display of results may differ, depending upon the environment and time zone\n-- where this query was executed.\n/*---------+---------+------+------*\n | isoyear | isoweek | year | week |\n +---------+---------+------+------+\n | 2008    | 1       | 2007 | 52    |\n *---------+---------+------+------*/",
			"SELECT\n  TIMESTAMP(\"2009-01-01 12:00:00+00\") AS timestamp_value,\n  EXTRACT(ISOYEAR FROM TIMESTAMP(\"2009-01-01 12:00:00+00\")) AS isoyear,\n  EXTRACT(ISOWEEK FROM TIMESTAMP(\"2009-01-01 12:00:00+00\")) AS isoweek,\n  EXTRACT(YEAR FROM TIMESTAMP(\"2009-01-01 12:00:00+00\")) AS year,\n  EXTRACT(WEEK FROM TIMESTAMP(\"2009-01-01 12:00:00+00\")) AS week\n\n-- Display of results may differ, depending upon the environment and time zone\n-- where this query was executed.\n/*---------+---------+------+------*\n | isoyear | isoweek | year | week |\n +---------+---------+------+------+\n | 2009    | 1       | 2009 | 0    |\n *---------+---------+------+------*/",
			"SELECT\n  TIMESTAMP(\"2009-12-31 12:00:00+00\") AS timestamp_value,\n  EXTRACT(ISOYEAR FROM TIMESTAMP(\"2009-12-31 12:00:00+00\")) AS isoyear,\n  EXTRACT(ISOWEEK FROM TIMESTAMP(\"2009-12-31 12:00:00+00\")) AS isoweek,\n  EXTRACT(YEAR FROM TIMESTAMP(\"2009-12-31 12:00:00+00\")) AS year,\n  EXTRACT(WEEK FROM TIMESTAMP(\"2009-12-31 12:00:00+00\")) AS week\n\n-- Display of results may differ, depending upon the environment and time zone\n-- where this query was executed.\n/*---------+---------+------+------*\n | isoyear | isoweek | year | week |\n +---------+---------+------+------+\n | 2009    | 53      | 2009 | 52   |\n *---------+---------+------+------*/",
			"SELECT\n  TIMESTAMP(\"2017-01-02 12:00:00+00\") AS timestamp_value,\n  EXTRACT(ISOYEAR FROM TIMESTAMP(\"2017-01-02 12:00:00+00\")) AS isoyear,\n  EXTRACT(ISOWEEK FROM TIMESTAMP(\"2017-01-02 12:00:00+00\")) AS isoweek,\n  EXTRACT(YEAR FROM TIMESTAMP(\"2017-01-02 12:00:00+00\")) AS year,\n  EXTRACT(WEEK FROM TIMESTAMP(\"2017-01-02 12:00:00+00\")) AS week\n\n-- Display of results may differ, depending upon the environment and time zone\n-- where this query was executed.\n/*---------+---------+------+------*\n | isoyear | isoweek | year | week |\n +---------+---------+------+------+\n | 2017    | 1       | 2017 | 1    |\n *---------+---------+------+------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#extract",
	},
	{
		Name:        "FORMAT_TIMESTAMP",
		Method:      "FORMAT_TIMESTAMP(format_string, timestamp_expr[, time_zone])",
		Description: "Formats a `TIMESTAMP` value according to the specified format string.",
		ExampleSQLs: []string{
			"SELECT FORMAT_TIMESTAMP(\"%c\", TIMESTAMP \"2050-12-25 15:30:55+00\", \"UTC\")\n  AS formatted;\n\n/*--------------------------*\n | formatted                |\n +--------------------------+\n | Sun Dec 25 15:30:55 2050 |\n *--------------------------*/",
			"SELECT FORMAT_TIMESTAMP(\"%b-%d-%Y\", TIMESTAMP \"2050-12-25 15:30:55+00\")\n  AS formatted;\n\n/*-------------*\n | formatted   |\n +-------------+\n | Dec-25-2050 |\n *-------------*/",
			"SELECT FORMAT_TIMESTAMP(\"%b %Y\", TIMESTAMP \"2050-12-25 15:30:55+00\")\n  AS formatted;\n\n/*-------------*\n | formatted   |\n +-------------+\n | Dec 2050    |\n *-------------*/",
			"SELECT FORMAT_TIMESTAMP(\"%Y-%m-%dT%H:%M:%SZ\", TIMESTAMP \"2050-12-25 15:30:55\", \"UTC\")\n  AS formatted;\n\n/*+---------------------*\n |      formatted       |\n +----------------------+\n | 2050-12-25T15:30:55Z |\n *----------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#format_timestamp",
	},
	{
		Name:        "PARSE_TIMESTAMP",
		Method:      "PARSE_TIMESTAMP(format_string, timestamp_string[, time_zone])",
		Description: "Converts a `STRING` value to a `TIMESTAMP` value.",
		ExampleSQLs: []string{
			"SELECT PARSE_TIMESTAMP(\"%c\", \"Thu Dec 25 07:30:00 2008\") AS parsed;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------*\n | parsed                  |\n +-------------------------+\n | 2008-12-25 07:30:00 UTC |\n *-------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#parse_timestamp",
	},
	{
		Name:        "STRING",
		Method:      "STRING(timestamp_expression[, time_zone])",
		Description: "Converts a timestamp to a string. Supports an optional\nparameter to specify a time zone. See\n[Time zone definitions](#timezone_definitions) for information\non how to specify a time zone.",
		ExampleSQLs: []string{
			"SELECT STRING(TIMESTAMP \"2008-12-25 15:30:00+00\", \"UTC\") AS string;\n\n/*-------------------------------*\n | string                        |\n +-------------------------------+\n | 2008-12-25 15:30:00+00        |\n *-------------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#string",
	},
	{
		Name:        "TIMESTAMP",
		Method:      "TIMESTAMP(string_expression[, time_zone])\nTIMESTAMP(date_expression[, time_zone])\nTIMESTAMP(datetime_expression[, time_zone])",
		Description: "`string_expression[, time_zone]`: Converts a string to a\ntimestamp. `string_expression` must include a\ntimestamp literal.\nIf `string_expression` includes a time zone in the timestamp literal,\ndon't include an explicit `time_zone`\nargument.\n`date_expression[, time_zone]`: Converts a date to a timestamp.\nThe value returned is the earliest timestamp that falls within\nthe given date.\n`datetime_expression[, time_zone]`: Converts a\ndatetime to a timestamp.This function supports an optional\nparameter to [specify a time zone](#timezone_definitions). If\nno time zone is specified, the default time zone, UTC,\nis used.",
		ExampleSQLs: []string{
			"SELECT TIMESTAMP(\"2008-12-25 15:30:00+00\") AS timestamp_str;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------*\n | timestamp_str           |\n +-------------------------+\n | 2008-12-25 15:30:00 UTC |\n *-------------------------*/",
			"SELECT TIMESTAMP(\"2008-12-25 15:30:00\", \"America/Los_Angeles\") AS timestamp_str;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------*\n | timestamp_str           |\n +-------------------------+\n | 2008-12-25 23:30:00 UTC |\n *-------------------------*/",
			"SELECT TIMESTAMP(\"2008-12-25 15:30:00 UTC\") AS timestamp_str;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------*\n | timestamp_str           |\n +-------------------------+\n | 2008-12-25 15:30:00 UTC |\n *-------------------------*/",
			"SELECT TIMESTAMP(DATETIME \"2008-12-25 15:30:00\") AS timestamp_datetime;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------*\n | timestamp_datetime      |\n +-------------------------+\n | 2008-12-25 15:30:00 UTC |\n *-------------------------*/",
			"SELECT TIMESTAMP(DATE \"2008-12-25\") AS timestamp_date;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------*\n | timestamp_date          |\n +-------------------------+\n | 2008-12-25 00:00:00 UTC |\n *-------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp",
	},
	{
		Name:        "TIMESTAMP_ADD",
		Method:      "TIMESTAMP_ADD(timestamp_expression, INTERVAL int64_expression date_part)",
		Description: "Adds `int64_expression` units of `date_part` to the timestamp, independent of\nany time zone.`TIMESTAMP_ADD` supports the following values for `date_part`:`MICROSECOND`\n`MILLISECOND`\n`SECOND`\n`MINUTE`\n`HOUR`. Equivalent to 60 `MINUTE` parts.\n`DAY`. Equivalent to 24 `HOUR` parts.",
		ExampleSQLs: []string{
			"SELECT\n  TIMESTAMP(\"2008-12-25 15:30:00+00\") AS original,\n  TIMESTAMP_ADD(TIMESTAMP \"2008-12-25 15:30:00+00\", INTERVAL 10 MINUTE) AS later;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------+-------------------------*\n | original                | later                   |\n +-------------------------+-------------------------+\n | 2008-12-25 15:30:00 UTC | 2008-12-25 15:40:00 UTC |\n *-------------------------+-------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_add",
	},
	{
		Name:        "TIMESTAMP_DIFF",
		Method:      "TIMESTAMP_DIFF(end_timestamp, start_timestamp, granularity)",
		Description: "Gets the number of unit boundaries between two `TIMESTAMP` values\n( `end_timestamp` \\- `start_timestamp`) at a particular time granularity.",
		ExampleSQLs: []string{
			"SELECT\n  TIMESTAMP(\"2010-07-07 10:20:00+00\") AS later_timestamp,\n  TIMESTAMP(\"2008-12-25 15:30:00+00\") AS earlier_timestamp,\n  TIMESTAMP_DIFF(TIMESTAMP \"2010-07-07 10:20:00+00\", TIMESTAMP \"2008-12-25 15:30:00+00\", HOUR) AS hours;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------+-------------------------+-------*\n | later_timestamp         | earlier_timestamp       | hours |\n +-------------------------+-------------------------+-------+\n | 2010-07-07 10:20:00 UTC | 2008-12-25 15:30:00 UTC | 13410 |\n *-------------------------+-------------------------+-------*/",
			"SELECT TIMESTAMP_DIFF(TIMESTAMP \"2018-08-14\", TIMESTAMP \"2018-10-14\", DAY) AS negative_diff;\n\n/*---------------*\n | negative_diff |\n +---------------+\n | -61           |\n *---------------*/",
			"SELECT TIMESTAMP_DIFF(\"2001-02-01 01:00:00\", \"2001-02-01 00:00:01\", HOUR) AS diff;\n\n/*---------------*\n | diff          |\n +---------------+\n | 0             |\n *---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_diff",
	},
	{
		Name:        "TIMESTAMP_MICROS",
		Method:      "TIMESTAMP_MICROS(int64_expression)",
		Description: "Interprets `int64_expression` as the number of microseconds since 1970-01-01\n00:00:00 UTC and returns a timestamp.",
		ExampleSQLs: []string{
			"SELECT TIMESTAMP_MICROS(1230219000000000) AS timestamp_value;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------*\n | timestamp_value         |\n +-------------------------+\n | 2008-12-25 15:30:00 UTC |\n *-------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_micros",
	},
	{
		Name:        "TIMESTAMP_MILLIS",
		Method:      "TIMESTAMP_MILLIS(int64_expression)",
		Description: "Interprets `int64_expression` as the number of milliseconds since 1970-01-01\n00:00:00 UTC and returns a timestamp.",
		ExampleSQLs: []string{
			"SELECT TIMESTAMP_MILLIS(1230219000000) AS timestamp_value;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------*\n | timestamp_value         |\n +-------------------------+\n | 2008-12-25 15:30:00 UTC |\n *-------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_millis",
	},
	{
		Name:        "TIMESTAMP_SECONDS",
		Method:      "TIMESTAMP_SECONDS(int64_expression)",
		Description: "Interprets `int64_expression` as the number of seconds since 1970-01-01 00:00:00\nUTC and returns a timestamp.",
		ExampleSQLs: []string{
			"SELECT TIMESTAMP_SECONDS(1230219000) AS timestamp_value;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------*\n | timestamp_value         |\n +-------------------------+\n | 2008-12-25 15:30:00 UTC |\n *-------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_seconds",
	},
	{
		Name:        "TIMESTAMP_SUB",
		Method:      "TIMESTAMP_SUB(timestamp_expression, INTERVAL int64_expression date_part)",
		Description: "Subtracts `int64_expression` units of `date_part` from the timestamp,\nindependent of any time zone.`TIMESTAMP_SUB` supports the following values for `date_part`:`MICROSECOND`\n`MILLISECOND`\n`SECOND`\n`MINUTE`\n`HOUR`. Equivalent to 60 `MINUTE` parts.\n`DAY`. Equivalent to 24 `HOUR` parts.",
		ExampleSQLs: []string{
			"SELECT\n  TIMESTAMP(\"2008-12-25 15:30:00+00\") AS original,\n  TIMESTAMP_SUB(TIMESTAMP \"2008-12-25 15:30:00+00\", INTERVAL 10 MINUTE) AS earlier;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------+-------------------------*\n | original                | earlier                 |\n +-------------------------+-------------------------+\n | 2008-12-25 15:30:00 UTC | 2008-12-25 15:20:00 UTC |\n *-------------------------+-------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_sub",
	},
	{
		Name:        "TIMESTAMP_TRUNC",
		Method:      "TIMESTAMP_TRUNC(timestamp_value, timestamp_granularity[, time_zone])",
		Description: "Truncates a `TIMESTAMP` or `DATETIME` value at a particular granularity.",
		ExampleSQLs: []string{
			"SELECT\n  TIMESTAMP_TRUNC(TIMESTAMP \"2008-12-25 15:30:00+00\", DAY, \"UTC\") AS utc,\n  TIMESTAMP_TRUNC(TIMESTAMP \"2008-12-25 15:30:00+00\", DAY, \"America/Los_Angeles\") AS la;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------+-------------------------*\n | utc                     | la                      |\n +-------------------------+-------------------------+\n | 2008-12-25 00:00:00 UTC | 2008-12-25 08:00:00 UTC |\n *-------------------------+-------------------------*/",
			"SELECT\n  timestamp_value AS timestamp_value,\n  TIMESTAMP_TRUNC(timestamp_value, WEEK(MONDAY), \"UTC\") AS utc_truncated,\n  TIMESTAMP_TRUNC(timestamp_value, WEEK(MONDAY), \"Pacific/Auckland\") AS nzdt_truncated\nFROM (SELECT TIMESTAMP(\"2017-11-06 00:00:00+12\") AS timestamp_value);\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------+-------------------------+-------------------------*\n | timestamp_value         | utc_truncated           | nzdt_truncated          |\n +-------------------------+-------------------------+-------------------------+\n | 2017-11-05 12:00:00 UTC | 2017-10-30 00:00:00 UTC | 2017-11-05 11:00:00 UTC |\n *-------------------------+-------------------------+-------------------------*/",
			"SELECT\n  TIMESTAMP_TRUNC(\"2015-06-15 00:00:00+00\", ISOYEAR) AS isoyear_boundary,\n  EXTRACT(ISOYEAR FROM TIMESTAMP \"2015-06-15 00:00:00+00\") AS isoyear_number;\n\n-- Display of results may differ, depending upon the environment and time zone where this query was executed.\n/*-------------------------+----------------*\n | isoyear_boundary        | isoyear_number |\n +-------------------------+----------------+\n | 2014-12-29 00:00:00 UTC | 2015           |\n *-------------------------+----------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#timestamp_trunc",
	},
	{
		Name:        "UNIX_MICROS",
		Method:      "UNIX_MICROS(timestamp_expression)",
		Description: "Returns the number of microseconds since `1970-01-01 00:00:00 UTC`.",
		ExampleSQLs: []string{
			"SELECT UNIX_MICROS(TIMESTAMP \"2008-12-25 15:30:00+00\") AS micros;\n\n/*------------------*\n | micros           |\n +------------------+\n | 1230219000000000 |\n *------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#unix_micros",
	},
	{
		Name:        "UNIX_MILLIS",
		Method:      "UNIX_MILLIS(timestamp_expression)",
		Description: "Returns the number of milliseconds since `1970-01-01 00:00:00 UTC`. Truncates\nhigher levels of precision by rounding down to the beginning of the millisecond.",
		ExampleSQLs: []string{
			"SELECT UNIX_MILLIS(TIMESTAMP \"2008-12-25 15:30:00+00\") AS millis;\n\n/*---------------*\n | millis        |\n +---------------+\n | 1230219000000 |\n *---------------*/",
			"SELECT UNIX_MILLIS(TIMESTAMP \"1970-01-01 00:00:00.0018+00\") AS millis;\n\n/*---------------*\n | millis        |\n +---------------+\n | 1             |\n *---------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#unix_millis",
	},
	{
		Name:        "UNIX_SECONDS",
		Method:      "UNIX_SECONDS(timestamp_expression)",
		Description: "Returns the number of seconds since `1970-01-01 00:00:00 UTC`. Truncates higher\nlevels of precision by rounding down to the beginning of the second.",
		ExampleSQLs: []string{
			"SELECT UNIX_SECONDS(TIMESTAMP \"2008-12-25 15:30:00+00\") AS seconds;\n\n/*------------*\n | seconds    |\n +------------+\n | 1230219000 |\n *------------*/",
			"SELECT UNIX_SECONDS(TIMESTAMP \"1970-01-01 00:00:01.8+00\") AS seconds;\n\n/*------------*\n | seconds    |\n +------------+\n | 1          |\n *------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions#unix_seconds",
	},
	{
		Name:        "GENERATE_UUID",
		Method:      "GENERATE_UUID()",
		Description: "Returns a random universally unique identifier (UUID) as a `STRING`.\nThe returned `STRING` consists of 32 hexadecimal\ndigits in five groups separated by hyphens in the form 8-4-4-4-12. The\nhexadecimal digits represent 122 random bits and 6 fixed bits, in compliance\nwith [RFC 4122 section 4.4](https://tools.ietf.org/html/rfc4122#section-4.4).\nThe returned `STRING` is lowercase.",
		ExampleSQLs: []string{
			"SELECT GENERATE_UUID() AS uuid;\n\n/*--------------------------------------*\n | uuid                                 |\n +--------------------------------------+\n | 4192bff0-e1e0-43ce-a4db-912808c32493 |\n *--------------------------------------*/",
		},
		URL: "https://cloud.google.com/bigquery/docs/reference/standard-sql/utility-functions#generate_uuid",
	},
}
